 //Generated by CoasterFan5
  const baseUrl = "/v1/courses/{course_id}/settings";
  

  const method = "PUT"

  const urlBuilder = (base: string, items: Record<string, unknown>) => {
    let newUrl = baseUrl
    for (const key in items) {
      newUrl = newUrl.replaceAll(`{${key}}`, `${items[key]}`)
    }

    return base + newUrl
  }

export const update_course_settings = async (token: string, baseUrl: string, params: {
  "course_id": string;"allow_final_grade_override"?: boolean;"allow_student_discussion_topics"?: boolean;"allow_student_forum_attachments"?: boolean;"allow_student_discussion_editing"?: boolean;"allow_student_organized_groups"?: boolean;"allow_student_discussion_reporting"?: boolean;"allow_student_anonymous_discussion_topics"?: boolean;"filter_speed_grader_by_student_group"?: boolean;"hide_final_grades"?: boolean;"hide_distribution_graphs"?: boolean;"hide_sections_on_course_users_page"?: boolean;"lock_all_announcements"?: boolean;"usage_rights_required"?: boolean;"restrict_student_past_view"?: boolean;"restrict_student_future_view"?: boolean;"show_announcements_on_home_page"?: boolean;"home_page_announcement_limit"?: number;"syllabus_course_summary"?: boolean;"default_due_time"?: string;"conditional_release"?: boolean
}) => {
  const r = await fetch(urlBuilder(baseUrl, params) + "?per_page=100", {
    method: method,
    headers: {
      "Authorization": "Bearer " + token
    }
  })
  if(r.status != 200) {
    throw r
    return undefined
  }
  return (await r.json()) as void
}
