 //Generated by CoasterFan5
  const baseUrl = "/v1/courses/{course_id}/assignments/{id}";
  import type {Assignment} from "../models/Assignment"

  const method = "PUT"

  const urlBuilder = (base: string, items: Record<string, unknown>) => {
    let newUrl = baseUrl
    for (const key in items) {
      newUrl = newUrl.replaceAll(`{${key}}`, `${items[key]}`)
    }

    return base + newUrl
  }

export const edit_assignment = async (token: string, baseUrl: string, params: {
  "course_id": string;"id": string;"assignment[name]"?: string;"assignment[position]"?: number;"assignment[submission_types]"?: unknown;"assignment[allowed_extensions]"?: unknown;"assignment[turnitin_enabled]"?: boolean;"assignment[vericite_enabled]"?: boolean;"assignment[turnitin_settings]"?: string;"assignment[sis_assignment_id]"?: string;"assignment[integration_data]"?: string;"assignment[integration_id]"?: string;"assignment[peer_reviews]"?: boolean;"assignment[automatic_peer_reviews]"?: boolean;"assignment[notify_of_update]"?: boolean;"assignment[group_category_id]"?: number;"assignment[grade_group_students_individually]"?: number;"assignment[external_tool_tag_attributes]"?: string;"assignment[points_possible]"?: number;"assignment[grading_type]"?: string;"assignment[due_at]"?: undefined;"assignment[lock_at]"?: undefined;"assignment[unlock_at]"?: undefined;"assignment[description]"?: string;"assignment[assignment_group_id]"?: number;"assignment[assignment_overrides]"?: unknown;"assignment[only_visible_to_overrides]"?: boolean;"assignment[published]"?: boolean;"assignment[grading_standard_id]"?: number;"assignment[omit_from_final_grade]"?: boolean;"assignment[hide_in_gradebook]"?: boolean;"assignment[moderated_grading]"?: boolean;"assignment[grader_count]"?: number;"assignment[final_grader_id]"?: number;"assignment[grader_comments_visible_to_graders]"?: boolean;"assignment[graders_anonymous_to_graders]"?: boolean;"assignment[graders_names_visible_to_final_grader]"?: boolean;"assignment[anonymous_grading]"?: boolean;"assignment[allowed_attempts]"?: number;"assignment[annotatable_attachment_id]"?: number;"assignment[force_updated_at]"?: boolean;"assignment[submission_types]"?: unknown
}) => {
  const r = await fetch(urlBuilder(baseUrl, params) + "?per_page=100", {
    method: method,
    headers: {
      "Authorization": "Bearer " + token
    }
  })
  if(r.status != 200) {
    throw r
    return undefined
  }
  return (await r.json()) as Assignment
}
