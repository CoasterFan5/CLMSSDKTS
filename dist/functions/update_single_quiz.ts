 //Generated by CoasterFan5
  const baseUrl = "/quiz/v1/courses/{course_id}/quizzes/{assignment_id}";
  import type {NewQuiz} from "../models/NewQuiz"


  const urlBuilder = (base: string, items: Record<string, unknown>) => {
    let newUrl = baseUrl
    for (const key in items) {
      newUrl = newUrl.replaceAll(`{${key}}`, `${items[key]}`)
    }

    return base + newUrl
  }

export const update_single_quiz = async (token: string, baseUrl: string, params: {
  "course_id": number;"assignment_id": number;"quiz[title]"?: string;"quiz[assignment_group_id]"?: number;"quiz[points_possible]"?: number;"quiz[due_at]"?: undefined;"quiz[lock_at]"?: undefined;"quiz[unlock_at]"?: undefined;"quiz[grading_type]"?: string;"quiz[instructions]"?: string;"quiz[quiz_settings][calculator_type]"?: string;"quiz[quiz_settings][filter_ip_address]"?: boolean;"quiz[quiz_settings][filters][ips]"?: unknown;"quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]"?: boolean;"quiz[quiz_settings][multiple_attempts][attempt_limit]"?: boolean;"quiz[quiz_settings][multiple_attempts][max_attempts]"?: undefined;"quiz[quiz_settings][multiple_attempts][score_to_keep]"?: string;"quiz[quiz_settings][multiple_attempts][cooling_period]"?: boolean;"quiz[quiz_settings][multiple_attempts][cooling_period_seconds]"?: undefined;"quiz[quiz_settings][one_at_a_time_type]"?: string;"quiz[quiz_settings][allow_backtracking]"?: boolean;"quiz[quiz_settings][result_view_settings][result_view_restricted]"?: boolean;"quiz[quiz_settings][result_view_settings][display_points_awarded]"?: boolean;"quiz[quiz_settings][result_view_settings][display_points_possible]"?: boolean;"quiz[quiz_settings][result_view_settings][display_items]"?: boolean;"quiz[quiz_settings][result_view_settings][display_item_response]"?: boolean;"quiz[quiz_settings][result_view_settings][display_item_response_qualifier]"?: string;"quiz[quiz_settings][result_view_settings][show_item_responses_at]"?: undefined;"quiz[quiz_settings][result_view_settings][hide_item_responses_at]"?: undefined;"quiz[quiz_settings][result_view_settings][display_item_response_correctness]"?: boolean;"quiz[quiz_settings][result_view_settings][display_item_response_correctness_qualifier]"?: string;"quiz[quiz_settings][result_view_settings][show_item_response_correctness_at]"?: undefined;"quiz[quiz_settings][result_view_settings][hide_item_response_correctness_at]"?: undefined;"quiz[quiz_settings][result_view_settings][display_item_correct_answer]"?: boolean;"quiz[quiz_settings][result_view_settings][display_item_feedback]"?: boolean;"quiz[quiz_settings][shuffle_answers]"?: boolean;"quiz[quiz_settings][shuffle_questions]"?: boolean;"quiz[quiz_settings][require_student_access_code]"?: boolean;"quiz[quiz_settings][student_access_code]"?: string;"quiz[quiz_settings][has_time_limit]"?: boolean;"quiz[quiz_settings][session_time_limit_in_seconds]"?: undefined
}) => {
  console.log(token)
  const r = await fetch(urlBuilder(baseUrl, params), {
    headers: {
      "Authorization": "Bearer " + token
    }
  })
  if(r.status != 200) {
    console.error(r)
    return undefined
  }
  return (await r.json()) as NewQuiz
}
