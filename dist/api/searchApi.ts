/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SearchApiApiKeys {
}

export class SearchApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: SearchApiApiKeys, value: string) {
        (this.authentications as any)[SearchApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Find valid recipients (users, courses and groups) that the current user can send messages to. The /api/v1/search/recipients path is the preferred endpoint, /api/v1/conversations/find_recipients is deprecated.  Pagination is supported.
     * @summary Find recipients
     * @param search Search terms used for matching users/courses/groups (e.g. \&quot;bob smith\&quot;). If multiple terms are given (separated via whitespace), only results matching all terms will be returned.
     * @param context Limit the search to a particular course/group (e.g. \&quot;course_3\&quot; or \&quot;group_4\&quot;).
     * @param exclude Array of ids to exclude from the search. These may be user ids or course/group ids prefixed with \&quot;course_\&quot; or \&quot;group_\&quot; respectively, e.g. exclude[]&#x3D;1&amp;exclude[]&#x3D;2&amp;exclude[]&#x3D;course_3
     * @param type Limit the search just to users or contexts (groups/courses).
     * @param userId Search for a specific user id. This ignores the other above parameters, and will never return more than one result.
     * @param fromConversationId When searching by user_id, only users that could be normally messaged by this user will be returned. This parameter allows you to specify a conversation that will be referenced for a shared context -- if both the current user and the searched user are in the conversation, the user will be returned. This is used to start new side conversations.
     * @param permissions Array of permission strings to be checked for each matched context (e.g. \&quot;send_messages\&quot;). This argument determines which permissions may be returned in the response; it won\&#39;t prevent contexts from being returned if they don\&#39;t grant the permission(s).
     */
    public async findRecipientsConversations (search?: string, context?: string, exclude?: Array<string>, type?: 'user' | 'context', userId?: number, fromConversationId?: number, permissions?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/conversations/find_recipients';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(search, "string");
        }

        if (context !== undefined) {
            localVarQueryParameters['context'] = ObjectSerializer.serialize(context, "string");
        }

        if (exclude !== undefined) {
            localVarQueryParameters['exclude'] = ObjectSerializer.serialize(exclude, "Array<string>");
        }

        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "'user' | 'context'");
        }

        if (userId !== undefined) {
            localVarQueryParameters['user_id'] = ObjectSerializer.serialize(userId, "number");
        }

        if (fromConversationId !== undefined) {
            localVarQueryParameters['from_conversation_id'] = ObjectSerializer.serialize(fromConversationId, "number");
        }

        if (permissions !== undefined) {
            localVarQueryParameters['permissions'] = ObjectSerializer.serialize(permissions, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Find valid recipients (users, courses and groups) that the current user can send messages to. The /api/v1/search/recipients path is the preferred endpoint, /api/v1/conversations/find_recipients is deprecated.  Pagination is supported.
     * @summary Find recipients
     * @param search Search terms used for matching users/courses/groups (e.g. \&quot;bob smith\&quot;). If multiple terms are given (separated via whitespace), only results matching all terms will be returned.
     * @param context Limit the search to a particular course/group (e.g. \&quot;course_3\&quot; or \&quot;group_4\&quot;).
     * @param exclude Array of ids to exclude from the search. These may be user ids or course/group ids prefixed with \&quot;course_\&quot; or \&quot;group_\&quot; respectively, e.g. exclude[]&#x3D;1&amp;exclude[]&#x3D;2&amp;exclude[]&#x3D;course_3
     * @param type Limit the search just to users or contexts (groups/courses).
     * @param userId Search for a specific user id. This ignores the other above parameters, and will never return more than one result.
     * @param fromConversationId When searching by user_id, only users that could be normally messaged by this user will be returned. This parameter allows you to specify a conversation that will be referenced for a shared context -- if both the current user and the searched user are in the conversation, the user will be returned. This is used to start new side conversations.
     * @param permissions Array of permission strings to be checked for each matched context (e.g. \&quot;send_messages\&quot;). This argument determines which permissions may be returned in the response; it won\&#39;t prevent contexts from being returned if they don\&#39;t grant the permission(s).
     */
    public async findRecipientsSearch (search?: string, context?: string, exclude?: Array<string>, type?: 'user' | 'context', userId?: number, fromConversationId?: number, permissions?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/search/recipients';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(search, "string");
        }

        if (context !== undefined) {
            localVarQueryParameters['context'] = ObjectSerializer.serialize(context, "string");
        }

        if (exclude !== undefined) {
            localVarQueryParameters['exclude'] = ObjectSerializer.serialize(exclude, "Array<string>");
        }

        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "'user' | 'context'");
        }

        if (userId !== undefined) {
            localVarQueryParameters['user_id'] = ObjectSerializer.serialize(userId, "number");
        }

        if (fromConversationId !== undefined) {
            localVarQueryParameters['from_conversation_id'] = ObjectSerializer.serialize(fromConversationId, "number");
        }

        if (permissions !== undefined) {
            localVarQueryParameters['permissions'] = ObjectSerializer.serialize(permissions, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * A paginated list of all courses visible in the public index
     * @summary List all courses
     * @param search Search terms used for matching users/courses/groups (e.g. \&quot;bob smith\&quot;). If multiple terms are given (separated via whitespace), only results matching all terms will be returned.
     * @param publicOnly Only return courses with public content. Defaults to false.
     * @param openEnrollmentOnly Only return courses that allow self enrollment. Defaults to false.
     */
    public async listAllCourses (search?: string, publicOnly?: boolean, openEnrollmentOnly?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/search/all_courses';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(search, "string");
        }

        if (publicOnly !== undefined) {
            localVarQueryParameters['public_only'] = ObjectSerializer.serialize(publicOnly, "boolean");
        }

        if (openEnrollmentOnly !== undefined) {
            localVarQueryParameters['open_enrollment_only'] = ObjectSerializer.serialize(openEnrollmentOnly, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
