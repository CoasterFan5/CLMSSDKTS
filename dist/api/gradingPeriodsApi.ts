/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum GradingPeriodsApiApiKeys {
}

export class GradingPeriodsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: GradingPeriodsApiApiKeys, value: string) {
        (this.authentications as any)[GradingPeriodsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Update multiple grading periods
     * @summary Batch update grading periods
     * @param courseId ID
     * @param setId The id of the grading period set.
     * @param gradingPeriodsTitle The title of the grading period. The title is required for creating a new grading period, but not for updating an existing grading period.
     * @param gradingPeriodsStartDate The date the grading period starts. The start_date is required for creating a new grading period, but not for updating an existing grading period.
     * @param gradingPeriodsEndDate The date the grading period ends. The end_date is required for creating a new grading period, but not for updating an existing grading period.
     * @param gradingPeriodsCloseDate The date after which grades can no longer be changed for a grading period. The close_date is required for creating a new grading period, but not for updating an existing grading period.
     * @param gradingPeriodsId The id of the grading period. If the id parameter does not exist, a new grading period will be created.
     * @param gradingPeriodsWeight A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
     */
    public async batchUpdateGradingPeriodsCourses (courseId: string, setId: string, gradingPeriodsTitle: Array<string>, gradingPeriodsStartDate: Array<string>, gradingPeriodsEndDate: Array<string>, gradingPeriodsCloseDate: Array<string>, gradingPeriodsId?: Array<string>, gradingPeriodsWeight?: Array<number>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/grading_periods/batch_update'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling batchUpdateGradingPeriodsCourses.');
        }

        // verify required parameter 'setId' is not null or undefined
        if (setId === null || setId === undefined) {
            throw new Error('Required parameter setId was null or undefined when calling batchUpdateGradingPeriodsCourses.');
        }

        // verify required parameter 'gradingPeriodsTitle' is not null or undefined
        if (gradingPeriodsTitle === null || gradingPeriodsTitle === undefined) {
            throw new Error('Required parameter gradingPeriodsTitle was null or undefined when calling batchUpdateGradingPeriodsCourses.');
        }

        // verify required parameter 'gradingPeriodsStartDate' is not null or undefined
        if (gradingPeriodsStartDate === null || gradingPeriodsStartDate === undefined) {
            throw new Error('Required parameter gradingPeriodsStartDate was null or undefined when calling batchUpdateGradingPeriodsCourses.');
        }

        // verify required parameter 'gradingPeriodsEndDate' is not null or undefined
        if (gradingPeriodsEndDate === null || gradingPeriodsEndDate === undefined) {
            throw new Error('Required parameter gradingPeriodsEndDate was null or undefined when calling batchUpdateGradingPeriodsCourses.');
        }

        // verify required parameter 'gradingPeriodsCloseDate' is not null or undefined
        if (gradingPeriodsCloseDate === null || gradingPeriodsCloseDate === undefined) {
            throw new Error('Required parameter gradingPeriodsCloseDate was null or undefined when calling batchUpdateGradingPeriodsCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (setId !== undefined) {
            localVarFormParams['set_id'] = ObjectSerializer.serialize(setId, "string");
        }

        if (gradingPeriodsId !== undefined) {
            localVarFormParams['grading_periods[id]'] = ObjectSerializer.serialize(gradingPeriodsId, "Array<string>");
        }

        if (gradingPeriodsTitle !== undefined) {
            localVarFormParams['grading_periods[title]'] = ObjectSerializer.serialize(gradingPeriodsTitle, "Array<string>");
        }

        if (gradingPeriodsStartDate !== undefined) {
            localVarFormParams['grading_periods[start_date]'] = ObjectSerializer.serialize(gradingPeriodsStartDate, "Array<string>");
        }

        if (gradingPeriodsEndDate !== undefined) {
            localVarFormParams['grading_periods[end_date]'] = ObjectSerializer.serialize(gradingPeriodsEndDate, "Array<string>");
        }

        if (gradingPeriodsCloseDate !== undefined) {
            localVarFormParams['grading_periods[close_date]'] = ObjectSerializer.serialize(gradingPeriodsCloseDate, "Array<string>");
        }

        if (gradingPeriodsWeight !== undefined) {
            localVarFormParams['grading_periods[weight]'] = ObjectSerializer.serialize(gradingPeriodsWeight, "Array<number>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update multiple grading periods
     * @summary Batch update grading periods
     * @param setId The id of the grading period set.
     * @param gradingPeriodsTitle The title of the grading period. The title is required for creating a new grading period, but not for updating an existing grading period.
     * @param gradingPeriodsStartDate The date the grading period starts. The start_date is required for creating a new grading period, but not for updating an existing grading period.
     * @param gradingPeriodsEndDate The date the grading period ends. The end_date is required for creating a new grading period, but not for updating an existing grading period.
     * @param gradingPeriodsCloseDate The date after which grades can no longer be changed for a grading period. The close_date is required for creating a new grading period, but not for updating an existing grading period.
     * @param gradingPeriodsId The id of the grading period. If the id parameter does not exist, a new grading period will be created.
     * @param gradingPeriodsWeight A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
     */
    public async batchUpdateGradingPeriodsGradingPeriodSets (setId: string, gradingPeriodsTitle: Array<string>, gradingPeriodsStartDate: Array<string>, gradingPeriodsEndDate: Array<string>, gradingPeriodsCloseDate: Array<string>, gradingPeriodsId?: Array<string>, gradingPeriodsWeight?: Array<number>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/grading_period_sets/{set_id}/grading_periods/batch_update'
            .replace('{' + 'set_id' + '}', encodeURIComponent(String(setId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'setId' is not null or undefined
        if (setId === null || setId === undefined) {
            throw new Error('Required parameter setId was null or undefined when calling batchUpdateGradingPeriodsGradingPeriodSets.');
        }

        // verify required parameter 'gradingPeriodsTitle' is not null or undefined
        if (gradingPeriodsTitle === null || gradingPeriodsTitle === undefined) {
            throw new Error('Required parameter gradingPeriodsTitle was null or undefined when calling batchUpdateGradingPeriodsGradingPeriodSets.');
        }

        // verify required parameter 'gradingPeriodsStartDate' is not null or undefined
        if (gradingPeriodsStartDate === null || gradingPeriodsStartDate === undefined) {
            throw new Error('Required parameter gradingPeriodsStartDate was null or undefined when calling batchUpdateGradingPeriodsGradingPeriodSets.');
        }

        // verify required parameter 'gradingPeriodsEndDate' is not null or undefined
        if (gradingPeriodsEndDate === null || gradingPeriodsEndDate === undefined) {
            throw new Error('Required parameter gradingPeriodsEndDate was null or undefined when calling batchUpdateGradingPeriodsGradingPeriodSets.');
        }

        // verify required parameter 'gradingPeriodsCloseDate' is not null or undefined
        if (gradingPeriodsCloseDate === null || gradingPeriodsCloseDate === undefined) {
            throw new Error('Required parameter gradingPeriodsCloseDate was null or undefined when calling batchUpdateGradingPeriodsGradingPeriodSets.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (gradingPeriodsId !== undefined) {
            localVarFormParams['grading_periods[id]'] = ObjectSerializer.serialize(gradingPeriodsId, "Array<string>");
        }

        if (gradingPeriodsTitle !== undefined) {
            localVarFormParams['grading_periods[title]'] = ObjectSerializer.serialize(gradingPeriodsTitle, "Array<string>");
        }

        if (gradingPeriodsStartDate !== undefined) {
            localVarFormParams['grading_periods[start_date]'] = ObjectSerializer.serialize(gradingPeriodsStartDate, "Array<string>");
        }

        if (gradingPeriodsEndDate !== undefined) {
            localVarFormParams['grading_periods[end_date]'] = ObjectSerializer.serialize(gradingPeriodsEndDate, "Array<string>");
        }

        if (gradingPeriodsCloseDate !== undefined) {
            localVarFormParams['grading_periods[close_date]'] = ObjectSerializer.serialize(gradingPeriodsCloseDate, "Array<string>");
        }

        if (gradingPeriodsWeight !== undefined) {
            localVarFormParams['grading_periods[weight]'] = ObjectSerializer.serialize(gradingPeriodsWeight, "Array<number>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <b>204 No Content</b> response code is returned if the deletion was successful.
     * @summary Delete a grading period
     * @param accountId ID
     * @param id ID
     */
    public async deleteGradingPeriodAccounts (accountId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/grading_periods/{id}'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling deleteGradingPeriodAccounts.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteGradingPeriodAccounts.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <b>204 No Content</b> response code is returned if the deletion was successful.
     * @summary Delete a grading period
     * @param courseId ID
     * @param id ID
     */
    public async deleteGradingPeriodCourses (courseId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/grading_periods/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling deleteGradingPeriodCourses.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteGradingPeriodCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the grading period with the given id
     * @summary Get a single grading period
     * @param courseId ID
     * @param id ID
     */
    public async getSingleGradingPeriod (courseId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/grading_periods/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getSingleGradingPeriod.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSingleGradingPeriod.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the paginated list of grading periods for the current course.
     * @summary List grading periods
     * @param accountId ID
     */
    public async listGradingPeriodsAccounts (accountId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/grading_periods'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling listGradingPeriodsAccounts.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the paginated list of grading periods for the current course.
     * @summary List grading periods
     * @param courseId ID
     */
    public async listGradingPeriodsCourses (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/grading_periods'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listGradingPeriodsCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an existing grading period.
     * @summary Update a single grading period
     * @param courseId ID
     * @param id ID
     * @param gradingPeriodsStartDate The date the grading period starts.
     * @param gradingPeriodsEndDate no description
     * @param gradingPeriodsWeight A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
     */
    public async updateSingleGradingPeriod (courseId: string, id: string, gradingPeriodsStartDate: Array<string>, gradingPeriodsEndDate: Array<string>, gradingPeriodsWeight?: Array<number>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/grading_periods/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling updateSingleGradingPeriod.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateSingleGradingPeriod.');
        }

        // verify required parameter 'gradingPeriodsStartDate' is not null or undefined
        if (gradingPeriodsStartDate === null || gradingPeriodsStartDate === undefined) {
            throw new Error('Required parameter gradingPeriodsStartDate was null or undefined when calling updateSingleGradingPeriod.');
        }

        // verify required parameter 'gradingPeriodsEndDate' is not null or undefined
        if (gradingPeriodsEndDate === null || gradingPeriodsEndDate === undefined) {
            throw new Error('Required parameter gradingPeriodsEndDate was null or undefined when calling updateSingleGradingPeriod.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (gradingPeriodsStartDate !== undefined) {
            localVarFormParams['grading_periods[start_date]'] = ObjectSerializer.serialize(gradingPeriodsStartDate, "Array<string>");
        }

        if (gradingPeriodsEndDate !== undefined) {
            localVarFormParams['grading_periods[end_date]'] = ObjectSerializer.serialize(gradingPeriodsEndDate, "Array<string>");
        }

        if (gradingPeriodsWeight !== undefined) {
            localVarFormParams['grading_periods[weight]'] = ObjectSerializer.serialize(gradingPeriodsWeight, "Array<number>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
