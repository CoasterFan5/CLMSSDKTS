/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum QuizExtensionsApiApiKeys {
}

export class QuizExtensionsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: QuizExtensionsApiApiKeys, value: string) {
        (this.authentications as any)[QuizExtensionsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course
     * @summary Set extensions for student quiz submissions
     * @param courseId ID
     * @param quizId ID
     * @param quizExtensionsUserId The ID of the user we want to add quiz extensions for.
     * @param quizExtensionsExtraAttempts Number of times the student is allowed to re-take the quiz over the multiple-attempt limit. This is limited to 1000 attempts or less.
     * @param quizExtensionsExtraTime The number of extra minutes to allow for all attempts. This will add to the existing time limit on the submission. This is limited to 10080 minutes (1 week)
     * @param quizExtensionsManuallyUnlocked Allow the student to take the quiz even if it\\\&#39;s locked for everyone else.
     * @param quizExtensionsExtendFromNow The number of minutes to extend the quiz from the current time. This is mutually exclusive to extend_from_end_at. This is limited to 1440 minutes (24 hours)
     * @param quizExtensionsExtendFromEndAt The number of minutes to extend the quiz beyond the quiz\\\&#39;s current ending time. This is mutually exclusive to extend_from_now. This is limited to 1440 minutes (24 hours)
     */
    public async setExtensionsForStudentQuizSubmissions (courseId: string, quizId: string, quizExtensionsUserId: Array<number>, quizExtensionsExtraAttempts?: Array<number>, quizExtensionsExtraTime?: Array<number>, quizExtensionsManuallyUnlocked?: Array<boolean>, quizExtensionsExtendFromNow?: Array<number>, quizExtensionsExtendFromEndAt?: Array<number>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/quizzes/{quiz_id}/extensions'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'quiz_id' + '}', encodeURIComponent(String(quizId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling setExtensionsForStudentQuizSubmissions.');
        }

        // verify required parameter 'quizId' is not null or undefined
        if (quizId === null || quizId === undefined) {
            throw new Error('Required parameter quizId was null or undefined when calling setExtensionsForStudentQuizSubmissions.');
        }

        // verify required parameter 'quizExtensionsUserId' is not null or undefined
        if (quizExtensionsUserId === null || quizExtensionsUserId === undefined) {
            throw new Error('Required parameter quizExtensionsUserId was null or undefined when calling setExtensionsForStudentQuizSubmissions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (quizExtensionsUserId !== undefined) {
            localVarFormParams['quiz_extensions[user_id]'] = ObjectSerializer.serialize(quizExtensionsUserId, "Array<number>");
        }

        if (quizExtensionsExtraAttempts !== undefined) {
            localVarFormParams['quiz_extensions[extra_attempts]'] = ObjectSerializer.serialize(quizExtensionsExtraAttempts, "Array<number>");
        }

        if (quizExtensionsExtraTime !== undefined) {
            localVarFormParams['quiz_extensions[extra_time]'] = ObjectSerializer.serialize(quizExtensionsExtraTime, "Array<number>");
        }

        if (quizExtensionsManuallyUnlocked !== undefined) {
            localVarFormParams['quiz_extensions[manually_unlocked]'] = ObjectSerializer.serialize(quizExtensionsManuallyUnlocked, "Array<boolean>");
        }

        if (quizExtensionsExtendFromNow !== undefined) {
            localVarFormParams['quiz_extensions[extend_from_now]'] = ObjectSerializer.serialize(quizExtensionsExtendFromNow, "Array<number>");
        }

        if (quizExtensionsExtendFromEndAt !== undefined) {
            localVarFormParams['quiz_extensions[extend_from_end_at]'] = ObjectSerializer.serialize(quizExtensionsExtendFromEndAt, "Array<number>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
