/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { Page } from '../model/page';
import { PageRevision } from '../model/pageRevision';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum PagesApiApiKeys {
}

export class PagesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: PagesApiApiKeys, value: string) {
        (this.authentications as any)[PagesApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Create a new wiki page
     * @summary Create page
     * @param courseId ID
     * @param wikiPageTitle The title for the new page.
     * @param wikiPageBody The content for the new page.
     * @param wikiPageEditingRoles Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).  \\\&quot;teachers\\\&quot;:: Allows editing by teachers in the course. \\\&quot;students\\\&quot;:: Allows editing by students in the course. \\\&quot;members\\\&quot;:: For group wikis, allows editing by members of the group. \\\&quot;public\\\&quot;:: Allows editing by any user.
     * @param wikiPageNotifyOfUpdate Whether participants should be notified when this page changes.
     * @param wikiPagePublished Whether the page is published (true) or draft state (false).
     * @param wikiPageFrontPage Set an unhidden page as the front page (if true)
     * @param wikiPagePublishAt Schedule a future date/time to publish the page. This will have no effect unless the \\\&quot;Scheduled Page Publication\\\&quot; feature is enabled in the account. If a future date is supplied, the page will be unpublished and wiki_page[published] will be ignored.
     */
    public async createPageCourses (courseId: string, wikiPageTitle: string, wikiPageBody?: string, wikiPageEditingRoles?: string, wikiPageNotifyOfUpdate?: boolean, wikiPagePublished?: boolean, wikiPageFrontPage?: boolean, wikiPagePublishAt?: Date, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling createPageCourses.');
        }

        // verify required parameter 'wikiPageTitle' is not null or undefined
        if (wikiPageTitle === null || wikiPageTitle === undefined) {
            throw new Error('Required parameter wikiPageTitle was null or undefined when calling createPageCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (wikiPageTitle !== undefined) {
            localVarFormParams['wiki_page[title]'] = ObjectSerializer.serialize(wikiPageTitle, "string");
        }

        if (wikiPageBody !== undefined) {
            localVarFormParams['wiki_page[body]'] = ObjectSerializer.serialize(wikiPageBody, "string");
        }

        if (wikiPageEditingRoles !== undefined) {
            localVarFormParams['wiki_page[editing_roles]'] = ObjectSerializer.serialize(wikiPageEditingRoles, "string");
        }

        if (wikiPageNotifyOfUpdate !== undefined) {
            localVarFormParams['wiki_page[notify_of_update]'] = ObjectSerializer.serialize(wikiPageNotifyOfUpdate, "boolean");
        }

        if (wikiPagePublished !== undefined) {
            localVarFormParams['wiki_page[published]'] = ObjectSerializer.serialize(wikiPagePublished, "boolean");
        }

        if (wikiPageFrontPage !== undefined) {
            localVarFormParams['wiki_page[front_page]'] = ObjectSerializer.serialize(wikiPageFrontPage, "boolean");
        }

        if (wikiPagePublishAt !== undefined) {
            localVarFormParams['wiki_page[publish_at]'] = ObjectSerializer.serialize(wikiPagePublishAt, "Date");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a new wiki page
     * @summary Create page
     * @param groupId ID
     * @param wikiPageTitle The title for the new page.
     * @param wikiPageBody The content for the new page.
     * @param wikiPageEditingRoles Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).  \\\&quot;teachers\\\&quot;:: Allows editing by teachers in the course. \\\&quot;students\\\&quot;:: Allows editing by students in the course. \\\&quot;members\\\&quot;:: For group wikis, allows editing by members of the group. \\\&quot;public\\\&quot;:: Allows editing by any user.
     * @param wikiPageNotifyOfUpdate Whether participants should be notified when this page changes.
     * @param wikiPagePublished Whether the page is published (true) or draft state (false).
     * @param wikiPageFrontPage Set an unhidden page as the front page (if true)
     * @param wikiPagePublishAt Schedule a future date/time to publish the page. This will have no effect unless the \\\&quot;Scheduled Page Publication\\\&quot; feature is enabled in the account. If a future date is supplied, the page will be unpublished and wiki_page[published] will be ignored.
     */
    public async createPageGroups (groupId: string, wikiPageTitle: string, wikiPageBody?: string, wikiPageEditingRoles?: string, wikiPageNotifyOfUpdate?: boolean, wikiPagePublished?: boolean, wikiPageFrontPage?: boolean, wikiPagePublishAt?: Date, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling createPageGroups.');
        }

        // verify required parameter 'wikiPageTitle' is not null or undefined
        if (wikiPageTitle === null || wikiPageTitle === undefined) {
            throw new Error('Required parameter wikiPageTitle was null or undefined when calling createPageGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (wikiPageTitle !== undefined) {
            localVarFormParams['wiki_page[title]'] = ObjectSerializer.serialize(wikiPageTitle, "string");
        }

        if (wikiPageBody !== undefined) {
            localVarFormParams['wiki_page[body]'] = ObjectSerializer.serialize(wikiPageBody, "string");
        }

        if (wikiPageEditingRoles !== undefined) {
            localVarFormParams['wiki_page[editing_roles]'] = ObjectSerializer.serialize(wikiPageEditingRoles, "string");
        }

        if (wikiPageNotifyOfUpdate !== undefined) {
            localVarFormParams['wiki_page[notify_of_update]'] = ObjectSerializer.serialize(wikiPageNotifyOfUpdate, "boolean");
        }

        if (wikiPagePublished !== undefined) {
            localVarFormParams['wiki_page[published]'] = ObjectSerializer.serialize(wikiPagePublished, "boolean");
        }

        if (wikiPageFrontPage !== undefined) {
            localVarFormParams['wiki_page[front_page]'] = ObjectSerializer.serialize(wikiPageFrontPage, "boolean");
        }

        if (wikiPagePublishAt !== undefined) {
            localVarFormParams['wiki_page[publish_at]'] = ObjectSerializer.serialize(wikiPagePublishAt, "Date");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete a wiki page
     * @summary Delete page
     * @param courseId ID
     * @param urlOrId ID
     */
    public async deletePageCourses (courseId: string, urlOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages/{url_or_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling deletePageCourses.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling deletePageCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete a wiki page
     * @summary Delete page
     * @param groupId ID
     * @param urlOrId ID
     */
    public async deletePageGroups (groupId: string, urlOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages/{url_or_id}'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling deletePageGroups.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling deletePageGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Duplicate a wiki page
     * @summary Duplicate page
     * @param courseId ID
     * @param urlOrId ID
     */
    public async duplicatePage (courseId: string, urlOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages/{url_or_id}/duplicate'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling duplicatePage.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling duplicatePage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * A paginated list of the wiki pages associated with a course or group
     * @summary List pages
     * @param courseId ID
     * @param sort Sort results by this field.
     * @param order The sorting order. Defaults to \&#39;asc\&#39;.
     * @param searchTerm The partial title of the pages to match and return.
     * @param published If true, include only published paqes. If false, exclude published pages. If not present, do not filter on published status.
     * @param include - \&quot;enrollments\&quot;: Optionally include the page body with each Page. If this is a block_editor page, returns the block_editor_attributes.
     */
    public async listPagesCourses (courseId: string, sort?: 'title' | 'created_at' | 'updated_at', order?: 'asc' | 'desc', searchTerm?: string, published?: boolean, include?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<Page>;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listPagesCourses.');
        }

        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'title' | 'created_at' | 'updated_at'");
        }

        if (order !== undefined) {
            localVarQueryParameters['order'] = ObjectSerializer.serialize(order, "'asc' | 'desc'");
        }

        if (searchTerm !== undefined) {
            localVarQueryParameters['search_term'] = ObjectSerializer.serialize(searchTerm, "string");
        }

        if (published !== undefined) {
            localVarQueryParameters['published'] = ObjectSerializer.serialize(published, "boolean");
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<Page>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<Page>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * A paginated list of the wiki pages associated with a course or group
     * @summary List pages
     * @param groupId ID
     * @param sort Sort results by this field.
     * @param order The sorting order. Defaults to \&#39;asc\&#39;.
     * @param searchTerm The partial title of the pages to match and return.
     * @param published If true, include only published paqes. If false, exclude published pages. If not present, do not filter on published status.
     * @param include - \&quot;enrollments\&quot;: Optionally include the page body with each Page. If this is a block_editor page, returns the block_editor_attributes.
     */
    public async listPagesGroups (groupId: string, sort?: 'title' | 'created_at' | 'updated_at', order?: 'asc' | 'desc', searchTerm?: string, published?: boolean, include?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<Page>;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling listPagesGroups.');
        }

        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'title' | 'created_at' | 'updated_at'");
        }

        if (order !== undefined) {
            localVarQueryParameters['order'] = ObjectSerializer.serialize(order, "'asc' | 'desc'");
        }

        if (searchTerm !== undefined) {
            localVarQueryParameters['search_term'] = ObjectSerializer.serialize(searchTerm, "string");
        }

        if (published !== undefined) {
            localVarQueryParameters['published'] = ObjectSerializer.serialize(published, "boolean");
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<Page>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<Page>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.
     * @summary List revisions
     * @param courseId ID
     * @param urlOrId ID
     */
    public async listRevisionsCourses (courseId: string, urlOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<PageRevision>;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages/{url_or_id}/revisions'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listRevisionsCourses.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling listRevisionsCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<PageRevision>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<PageRevision>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.
     * @summary List revisions
     * @param groupId ID
     * @param urlOrId ID
     */
    public async listRevisionsGroups (groupId: string, urlOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<PageRevision>;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages/{url_or_id}/revisions'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling listRevisionsGroups.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling listRevisionsGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<PageRevision>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<PageRevision>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Revert a page to a prior revision.
     * @summary Revert to revision
     * @param courseId ID
     * @param urlOrId ID
     * @param revisionId The revision to revert to (use the {api:WikiPagesApiController#revisions List Revisions API} to see available revisions)
     */
    public async revertToRevisionCourses (courseId: string, urlOrId: string, revisionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PageRevision;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages/{url_or_id}/revisions/{revision_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)))
            .replace('{' + 'revision_id' + '}', encodeURIComponent(String(revisionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling revertToRevisionCourses.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling revertToRevisionCourses.');
        }

        // verify required parameter 'revisionId' is not null or undefined
        if (revisionId === null || revisionId === undefined) {
            throw new Error('Required parameter revisionId was null or undefined when calling revertToRevisionCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PageRevision;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PageRevision");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Revert a page to a prior revision.
     * @summary Revert to revision
     * @param groupId ID
     * @param urlOrId ID
     * @param revisionId The revision to revert to (use the {api:WikiPagesApiController#revisions List Revisions API} to see available revisions)
     */
    public async revertToRevisionGroups (groupId: string, urlOrId: string, revisionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PageRevision;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages/{url_or_id}/revisions/{revision_id}'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)))
            .replace('{' + 'revision_id' + '}', encodeURIComponent(String(revisionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling revertToRevisionGroups.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling revertToRevisionGroups.');
        }

        // verify required parameter 'revisionId' is not null or undefined
        if (revisionId === null || revisionId === undefined) {
            throw new Error('Required parameter revisionId was null or undefined when calling revertToRevisionGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PageRevision;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PageRevision");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the content of the front page
     * @summary Show front page
     * @param courseId ID
     */
    public async showFrontPageCourses (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/front_page'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling showFrontPageCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the content of the front page
     * @summary Show front page
     * @param groupId ID
     */
    public async showFrontPageGroups (groupId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/front_page'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling showFrontPageGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the content of a wiki page
     * @summary Show page
     * @param courseId ID
     * @param urlOrId ID
     */
    public async showPageCourses (courseId: string, urlOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages/{url_or_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling showPageCourses.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling showPageCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the content of a wiki page
     * @summary Show page
     * @param groupId ID
     * @param urlOrId ID
     */
    public async showPageGroups (groupId: string, urlOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages/{url_or_id}'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling showPageGroups.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling showPageGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the metadata and optionally content of a revision of the page. Note that retrieving historic versions of pages requires edit rights.
     * @summary Show revision
     * @param courseId ID
     * @param urlOrId ID
     * @param summary If set, exclude page content from results
     */
    public async showRevisionCoursesLatest (courseId: string, urlOrId: string, summary?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PageRevision;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages/{url_or_id}/revisions/latest'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling showRevisionCoursesLatest.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling showRevisionCoursesLatest.');
        }

        if (summary !== undefined) {
            localVarQueryParameters['summary'] = ObjectSerializer.serialize(summary, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PageRevision;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PageRevision");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the metadata and optionally content of a revision of the page. Note that retrieving historic versions of pages requires edit rights.
     * @summary Show revision
     * @param courseId ID
     * @param urlOrId ID
     * @param revisionId ID
     * @param summary If set, exclude page content from results
     */
    public async showRevisionCoursesRevisionId (courseId: string, urlOrId: string, revisionId: string, summary?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PageRevision;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages/{url_or_id}/revisions/{revision_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)))
            .replace('{' + 'revision_id' + '}', encodeURIComponent(String(revisionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling showRevisionCoursesRevisionId.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling showRevisionCoursesRevisionId.');
        }

        // verify required parameter 'revisionId' is not null or undefined
        if (revisionId === null || revisionId === undefined) {
            throw new Error('Required parameter revisionId was null or undefined when calling showRevisionCoursesRevisionId.');
        }

        if (summary !== undefined) {
            localVarQueryParameters['summary'] = ObjectSerializer.serialize(summary, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PageRevision;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PageRevision");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the metadata and optionally content of a revision of the page. Note that retrieving historic versions of pages requires edit rights.
     * @summary Show revision
     * @param groupId ID
     * @param urlOrId ID
     * @param summary If set, exclude page content from results
     */
    public async showRevisionGroupsLatest (groupId: string, urlOrId: string, summary?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PageRevision;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages/{url_or_id}/revisions/latest'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling showRevisionGroupsLatest.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling showRevisionGroupsLatest.');
        }

        if (summary !== undefined) {
            localVarQueryParameters['summary'] = ObjectSerializer.serialize(summary, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PageRevision;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PageRevision");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieve the metadata and optionally content of a revision of the page. Note that retrieving historic versions of pages requires edit rights.
     * @summary Show revision
     * @param groupId ID
     * @param urlOrId ID
     * @param revisionId ID
     * @param summary If set, exclude page content from results
     */
    public async showRevisionGroupsRevisionId (groupId: string, urlOrId: string, revisionId: string, summary?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PageRevision;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages/{url_or_id}/revisions/{revision_id}'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)))
            .replace('{' + 'revision_id' + '}', encodeURIComponent(String(revisionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling showRevisionGroupsRevisionId.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling showRevisionGroupsRevisionId.');
        }

        // verify required parameter 'revisionId' is not null or undefined
        if (revisionId === null || revisionId === undefined) {
            throw new Error('Required parameter revisionId was null or undefined when calling showRevisionGroupsRevisionId.');
        }

        if (summary !== undefined) {
            localVarQueryParameters['summary'] = ObjectSerializer.serialize(summary, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PageRevision;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PageRevision");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update the title or contents of the front page
     * @summary Update/create front page
     * @param courseId ID
     * @param wikiPageTitle The title for the new page. NOTE: changing a page\\\&#39;s title will change its url. The updated url will be returned in the result.
     * @param wikiPageBody The content for the new page.
     * @param wikiPageEditingRoles Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).  \\\&quot;teachers\\\&quot;:: Allows editing by teachers in the course. \\\&quot;students\\\&quot;:: Allows editing by students in the course. \\\&quot;members\\\&quot;:: For group wikis, allows editing by members of the group. \\\&quot;public\\\&quot;:: Allows editing by any user.
     * @param wikiPageNotifyOfUpdate Whether participants should be notified when this page changes.
     * @param wikiPagePublished Whether the page is published (true) or draft state (false).
     */
    public async updateCreateFrontPageCourses (courseId: string, wikiPageTitle?: string, wikiPageBody?: string, wikiPageEditingRoles?: string, wikiPageNotifyOfUpdate?: boolean, wikiPagePublished?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/front_page'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling updateCreateFrontPageCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (wikiPageTitle !== undefined) {
            localVarFormParams['wiki_page[title]'] = ObjectSerializer.serialize(wikiPageTitle, "string");
        }

        if (wikiPageBody !== undefined) {
            localVarFormParams['wiki_page[body]'] = ObjectSerializer.serialize(wikiPageBody, "string");
        }

        if (wikiPageEditingRoles !== undefined) {
            localVarFormParams['wiki_page[editing_roles]'] = ObjectSerializer.serialize(wikiPageEditingRoles, "string");
        }

        if (wikiPageNotifyOfUpdate !== undefined) {
            localVarFormParams['wiki_page[notify_of_update]'] = ObjectSerializer.serialize(wikiPageNotifyOfUpdate, "boolean");
        }

        if (wikiPagePublished !== undefined) {
            localVarFormParams['wiki_page[published]'] = ObjectSerializer.serialize(wikiPagePublished, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update the title or contents of the front page
     * @summary Update/create front page
     * @param groupId ID
     * @param wikiPageTitle The title for the new page. NOTE: changing a page\\\&#39;s title will change its url. The updated url will be returned in the result.
     * @param wikiPageBody The content for the new page.
     * @param wikiPageEditingRoles Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).  \\\&quot;teachers\\\&quot;:: Allows editing by teachers in the course. \\\&quot;students\\\&quot;:: Allows editing by students in the course. \\\&quot;members\\\&quot;:: For group wikis, allows editing by members of the group. \\\&quot;public\\\&quot;:: Allows editing by any user.
     * @param wikiPageNotifyOfUpdate Whether participants should be notified when this page changes.
     * @param wikiPagePublished Whether the page is published (true) or draft state (false).
     */
    public async updateCreateFrontPageGroups (groupId: string, wikiPageTitle?: string, wikiPageBody?: string, wikiPageEditingRoles?: string, wikiPageNotifyOfUpdate?: boolean, wikiPagePublished?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/front_page'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling updateCreateFrontPageGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (wikiPageTitle !== undefined) {
            localVarFormParams['wiki_page[title]'] = ObjectSerializer.serialize(wikiPageTitle, "string");
        }

        if (wikiPageBody !== undefined) {
            localVarFormParams['wiki_page[body]'] = ObjectSerializer.serialize(wikiPageBody, "string");
        }

        if (wikiPageEditingRoles !== undefined) {
            localVarFormParams['wiki_page[editing_roles]'] = ObjectSerializer.serialize(wikiPageEditingRoles, "string");
        }

        if (wikiPageNotifyOfUpdate !== undefined) {
            localVarFormParams['wiki_page[notify_of_update]'] = ObjectSerializer.serialize(wikiPageNotifyOfUpdate, "boolean");
        }

        if (wikiPagePublished !== undefined) {
            localVarFormParams['wiki_page[published]'] = ObjectSerializer.serialize(wikiPagePublished, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update the title or contents of a wiki page  NOTE: You cannot specify the ID when creating a page. If you pass a numeric value as the page identifier and that does not represent a page ID that already exists, it will be interpreted as a URL.
     * @summary Update/create page
     * @param courseId ID
     * @param urlOrId ID
     * @param wikiPageTitle The title for the new page. NOTE: changing a page\\\&#39;s title will change its url. The updated url will be returned in the result.
     * @param wikiPageBody The content for the new page.
     * @param wikiPageEditingRoles Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).  \\\&quot;teachers\\\&quot;:: Allows editing by teachers in the course. \\\&quot;students\\\&quot;:: Allows editing by students in the course. \\\&quot;members\\\&quot;:: For group wikis, allows editing by members of the group. \\\&quot;public\\\&quot;:: Allows editing by any user.
     * @param wikiPageNotifyOfUpdate Whether participants should be notified when this page changes.
     * @param wikiPagePublished Whether the page is published (true) or draft state (false).
     * @param wikiPagePublishAt Schedule a future date/time to publish the page. This will have no effect unless the \\\&quot;Scheduled Page Publication\\\&quot; feature is enabled in the account. If a future date is set and the page is already published, it will be unpublished.
     * @param wikiPageFrontPage Set an unhidden page as the front page (if true)
     */
    public async updateCreatePageCourses (courseId: string, urlOrId: string, wikiPageTitle?: string, wikiPageBody?: string, wikiPageEditingRoles?: string, wikiPageNotifyOfUpdate?: boolean, wikiPagePublished?: boolean, wikiPagePublishAt?: Date, wikiPageFrontPage?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/pages/{url_or_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling updateCreatePageCourses.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling updateCreatePageCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (wikiPageTitle !== undefined) {
            localVarFormParams['wiki_page[title]'] = ObjectSerializer.serialize(wikiPageTitle, "string");
        }

        if (wikiPageBody !== undefined) {
            localVarFormParams['wiki_page[body]'] = ObjectSerializer.serialize(wikiPageBody, "string");
        }

        if (wikiPageEditingRoles !== undefined) {
            localVarFormParams['wiki_page[editing_roles]'] = ObjectSerializer.serialize(wikiPageEditingRoles, "string");
        }

        if (wikiPageNotifyOfUpdate !== undefined) {
            localVarFormParams['wiki_page[notify_of_update]'] = ObjectSerializer.serialize(wikiPageNotifyOfUpdate, "boolean");
        }

        if (wikiPagePublished !== undefined) {
            localVarFormParams['wiki_page[published]'] = ObjectSerializer.serialize(wikiPagePublished, "boolean");
        }

        if (wikiPagePublishAt !== undefined) {
            localVarFormParams['wiki_page[publish_at]'] = ObjectSerializer.serialize(wikiPagePublishAt, "Date");
        }

        if (wikiPageFrontPage !== undefined) {
            localVarFormParams['wiki_page[front_page]'] = ObjectSerializer.serialize(wikiPageFrontPage, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update the title or contents of a wiki page  NOTE: You cannot specify the ID when creating a page. If you pass a numeric value as the page identifier and that does not represent a page ID that already exists, it will be interpreted as a URL.
     * @summary Update/create page
     * @param groupId ID
     * @param urlOrId ID
     * @param wikiPageTitle The title for the new page. NOTE: changing a page\\\&#39;s title will change its url. The updated url will be returned in the result.
     * @param wikiPageBody The content for the new page.
     * @param wikiPageEditingRoles Which user roles are allowed to edit this page. Any combination of these roles is allowed (separated by commas).  \\\&quot;teachers\\\&quot;:: Allows editing by teachers in the course. \\\&quot;students\\\&quot;:: Allows editing by students in the course. \\\&quot;members\\\&quot;:: For group wikis, allows editing by members of the group. \\\&quot;public\\\&quot;:: Allows editing by any user.
     * @param wikiPageNotifyOfUpdate Whether participants should be notified when this page changes.
     * @param wikiPagePublished Whether the page is published (true) or draft state (false).
     * @param wikiPagePublishAt Schedule a future date/time to publish the page. This will have no effect unless the \\\&quot;Scheduled Page Publication\\\&quot; feature is enabled in the account. If a future date is set and the page is already published, it will be unpublished.
     * @param wikiPageFrontPage Set an unhidden page as the front page (if true)
     */
    public async updateCreatePageGroups (groupId: string, urlOrId: string, wikiPageTitle?: string, wikiPageBody?: string, wikiPageEditingRoles?: string, wikiPageNotifyOfUpdate?: boolean, wikiPagePublished?: boolean, wikiPagePublishAt?: Date, wikiPageFrontPage?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Page;  }> {
        const localVarPath = this.basePath + '/v1/groups/{group_id}/pages/{url_or_id}'
            .replace('{' + 'group_id' + '}', encodeURIComponent(String(groupId)))
            .replace('{' + 'url_or_id' + '}', encodeURIComponent(String(urlOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling updateCreatePageGroups.');
        }

        // verify required parameter 'urlOrId' is not null or undefined
        if (urlOrId === null || urlOrId === undefined) {
            throw new Error('Required parameter urlOrId was null or undefined when calling updateCreatePageGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (wikiPageTitle !== undefined) {
            localVarFormParams['wiki_page[title]'] = ObjectSerializer.serialize(wikiPageTitle, "string");
        }

        if (wikiPageBody !== undefined) {
            localVarFormParams['wiki_page[body]'] = ObjectSerializer.serialize(wikiPageBody, "string");
        }

        if (wikiPageEditingRoles !== undefined) {
            localVarFormParams['wiki_page[editing_roles]'] = ObjectSerializer.serialize(wikiPageEditingRoles, "string");
        }

        if (wikiPageNotifyOfUpdate !== undefined) {
            localVarFormParams['wiki_page[notify_of_update]'] = ObjectSerializer.serialize(wikiPageNotifyOfUpdate, "boolean");
        }

        if (wikiPagePublished !== undefined) {
            localVarFormParams['wiki_page[published]'] = ObjectSerializer.serialize(wikiPagePublished, "boolean");
        }

        if (wikiPagePublishAt !== undefined) {
            localVarFormParams['wiki_page[publish_at]'] = ObjectSerializer.serialize(wikiPagePublishAt, "Date");
        }

        if (wikiPageFrontPage !== undefined) {
            localVarFormParams['wiki_page[front_page]'] = ObjectSerializer.serialize(wikiPageFrontPage, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Page;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Page");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
