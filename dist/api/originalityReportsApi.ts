/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { OriginalityReport } from '../model/originalityReport';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum OriginalityReportsApiApiKeys {
}

export class OriginalityReportsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: OriginalityReportsApiApiKeys, value: string) {
        (this.authentications as any)[OriginalityReportsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Create a new OriginalityReport for the specified file
     * @summary Create an Originality Report
     * @param assignmentId ID
     * @param submissionId ID
     * @param originalityReportOriginalityScore A number between 0 and 100 representing the measure of the specified file\\\&#39;s originality.
     * @param originalityReportFileId The id of the file being given an originality score. Required if creating a report associated with a file.
     * @param originalityReportOriginalityReportUrl The URL where the originality report for the specified file may be found.
     * @param originalityReportOriginalityReportFileId The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
     * @param originalityReportToolSettingResourceTypeCode The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type \\\&#39;basic-lti-launch-request\\\&#39; in the specified resource handler rather than using the originality_report_url.
     * @param originalityReportToolSettingResourceUrl The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler\\\&#39;s message \\\&quot;path\\\&quot; value (See &#x60;resource_type_code&#x60;) unless it is specified. If this parameter is used a &#x60;resource_type_code&#x60; must also be specified.
     * @param originalityReportWorkflowState May be set to \\\&quot;pending\\\&quot;, \\\&quot;error\\\&quot;, or \\\&quot;scored\\\&quot;. If an originality score is provided a workflow state of \\\&quot;scored\\\&quot; will be inferred.
     * @param originalityReportErrorMessage A message describing the error. If set, the \\\&quot;workflow_state\\\&quot; will be set to \\\&quot;error.\\\&quot;
     * @param originalityReportAttempt If no &#x60;file_id&#x60; is given, and no file is required for the assignment (that is, the assignment allows an online text entry), this parameter may be given to clarify which attempt number the report is for (in the case of resubmissions). If this field is omitted and no &#x60;file_id&#x60; is given, the report will be created (or updated, if it exists) for the first submission attempt with no associated file.
     */
    public async createOriginalityReport (assignmentId: string, submissionId: string, originalityReportOriginalityScore: number, originalityReportFileId?: number, originalityReportOriginalityReportUrl?: string, originalityReportOriginalityReportFileId?: number, originalityReportToolSettingResourceTypeCode?: string, originalityReportToolSettingResourceUrl?: string, originalityReportWorkflowState?: string, originalityReportErrorMessage?: string, originalityReportAttempt?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }> {
        const localVarPath = this.basePath + '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report'
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)))
            .replace('{' + 'submission_id' + '}', encodeURIComponent(String(submissionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling createOriginalityReport.');
        }

        // verify required parameter 'submissionId' is not null or undefined
        if (submissionId === null || submissionId === undefined) {
            throw new Error('Required parameter submissionId was null or undefined when calling createOriginalityReport.');
        }

        // verify required parameter 'originalityReportOriginalityScore' is not null or undefined
        if (originalityReportOriginalityScore === null || originalityReportOriginalityScore === undefined) {
            throw new Error('Required parameter originalityReportOriginalityScore was null or undefined when calling createOriginalityReport.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (originalityReportFileId !== undefined) {
            localVarFormParams['originality_report[file_id]'] = ObjectSerializer.serialize(originalityReportFileId, "number");
        }

        if (originalityReportOriginalityScore !== undefined) {
            localVarFormParams['originality_report[originality_score]'] = ObjectSerializer.serialize(originalityReportOriginalityScore, "number");
        }

        if (originalityReportOriginalityReportUrl !== undefined) {
            localVarFormParams['originality_report[originality_report_url]'] = ObjectSerializer.serialize(originalityReportOriginalityReportUrl, "string");
        }

        if (originalityReportOriginalityReportFileId !== undefined) {
            localVarFormParams['originality_report[originality_report_file_id]'] = ObjectSerializer.serialize(originalityReportOriginalityReportFileId, "number");
        }

        if (originalityReportToolSettingResourceTypeCode !== undefined) {
            localVarFormParams['originality_report[tool_setting][resource_type_code]'] = ObjectSerializer.serialize(originalityReportToolSettingResourceTypeCode, "string");
        }

        if (originalityReportToolSettingResourceUrl !== undefined) {
            localVarFormParams['originality_report[tool_setting][resource_url]'] = ObjectSerializer.serialize(originalityReportToolSettingResourceUrl, "string");
        }

        if (originalityReportWorkflowState !== undefined) {
            localVarFormParams['originality_report[workflow_state]'] = ObjectSerializer.serialize(originalityReportWorkflowState, "string");
        }

        if (originalityReportErrorMessage !== undefined) {
            localVarFormParams['originality_report[error_message]'] = ObjectSerializer.serialize(originalityReportErrorMessage, "string");
        }

        if (originalityReportAttempt !== undefined) {
            localVarFormParams['originality_report[attempt]'] = ObjectSerializer.serialize(originalityReportAttempt, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "OriginalityReport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint.
     * @summary Edit an Originality Report
     * @param assignmentId ID
     * @param fileId ID
     * @param originalityReportOriginalityScore A number between 0 and 100 representing the measure of the specified file\\\&#39;s originality.
     * @param originalityReportOriginalityReportUrl The URL where the originality report for the specified file may be found.
     * @param originalityReportOriginalityReportFileId The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
     * @param originalityReportToolSettingResourceTypeCode The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type \\\&#39;basic-lti-launch-request\\\&#39; in the specified resource handler rather than using the originality_report_url.
     * @param originalityReportToolSettingResourceUrl The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler\\\&#39;s message \\\&quot;path\\\&quot; value (See &#x60;resource_type_code&#x60;) unless it is specified. If this parameter is used a &#x60;resource_type_code&#x60; must also be specified.
     * @param originalityReportWorkflowState May be set to \\\&quot;pending\\\&quot;, \\\&quot;error\\\&quot;, or \\\&quot;scored\\\&quot;. If an originality score is provided a workflow state of \\\&quot;scored\\\&quot; will be inferred.
     * @param originalityReportErrorMessage A message describing the error. If set, the \\\&quot;workflow_state\\\&quot; will be set to \\\&quot;error.\\\&quot;
     */
    public async editOriginalityReportFiles (assignmentId: string, fileId: string, originalityReportOriginalityScore?: number, originalityReportOriginalityReportUrl?: string, originalityReportOriginalityReportFileId?: number, originalityReportToolSettingResourceTypeCode?: string, originalityReportToolSettingResourceUrl?: string, originalityReportWorkflowState?: string, originalityReportErrorMessage?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }> {
        const localVarPath = this.basePath + '/lti/assignments/{assignment_id}/files/{file_id}/originality_report'
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)))
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling editOriginalityReportFiles.');
        }

        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling editOriginalityReportFiles.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (originalityReportOriginalityScore !== undefined) {
            localVarFormParams['originality_report[originality_score]'] = ObjectSerializer.serialize(originalityReportOriginalityScore, "number");
        }

        if (originalityReportOriginalityReportUrl !== undefined) {
            localVarFormParams['originality_report[originality_report_url]'] = ObjectSerializer.serialize(originalityReportOriginalityReportUrl, "string");
        }

        if (originalityReportOriginalityReportFileId !== undefined) {
            localVarFormParams['originality_report[originality_report_file_id]'] = ObjectSerializer.serialize(originalityReportOriginalityReportFileId, "number");
        }

        if (originalityReportToolSettingResourceTypeCode !== undefined) {
            localVarFormParams['originality_report[tool_setting][resource_type_code]'] = ObjectSerializer.serialize(originalityReportToolSettingResourceTypeCode, "string");
        }

        if (originalityReportToolSettingResourceUrl !== undefined) {
            localVarFormParams['originality_report[tool_setting][resource_url]'] = ObjectSerializer.serialize(originalityReportToolSettingResourceUrl, "string");
        }

        if (originalityReportWorkflowState !== undefined) {
            localVarFormParams['originality_report[workflow_state]'] = ObjectSerializer.serialize(originalityReportWorkflowState, "string");
        }

        if (originalityReportErrorMessage !== undefined) {
            localVarFormParams['originality_report[error_message]'] = ObjectSerializer.serialize(originalityReportErrorMessage, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "OriginalityReport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint.
     * @summary Edit an Originality Report
     * @param assignmentId ID
     * @param submissionId ID
     * @param id ID
     * @param originalityReportOriginalityScore A number between 0 and 100 representing the measure of the specified file\\\&#39;s originality.
     * @param originalityReportOriginalityReportUrl The URL where the originality report for the specified file may be found.
     * @param originalityReportOriginalityReportFileId The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
     * @param originalityReportToolSettingResourceTypeCode The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type \\\&#39;basic-lti-launch-request\\\&#39; in the specified resource handler rather than using the originality_report_url.
     * @param originalityReportToolSettingResourceUrl The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler\\\&#39;s message \\\&quot;path\\\&quot; value (See &#x60;resource_type_code&#x60;) unless it is specified. If this parameter is used a &#x60;resource_type_code&#x60; must also be specified.
     * @param originalityReportWorkflowState May be set to \\\&quot;pending\\\&quot;, \\\&quot;error\\\&quot;, or \\\&quot;scored\\\&quot;. If an originality score is provided a workflow state of \\\&quot;scored\\\&quot; will be inferred.
     * @param originalityReportErrorMessage A message describing the error. If set, the \\\&quot;workflow_state\\\&quot; will be set to \\\&quot;error.\\\&quot;
     */
    public async editOriginalityReportSubmissions (assignmentId: string, submissionId: string, id: string, originalityReportOriginalityScore?: number, originalityReportOriginalityReportUrl?: string, originalityReportOriginalityReportFileId?: number, originalityReportToolSettingResourceTypeCode?: string, originalityReportToolSettingResourceUrl?: string, originalityReportWorkflowState?: string, originalityReportErrorMessage?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }> {
        const localVarPath = this.basePath + '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}'
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)))
            .replace('{' + 'submission_id' + '}', encodeURIComponent(String(submissionId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling editOriginalityReportSubmissions.');
        }

        // verify required parameter 'submissionId' is not null or undefined
        if (submissionId === null || submissionId === undefined) {
            throw new Error('Required parameter submissionId was null or undefined when calling editOriginalityReportSubmissions.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editOriginalityReportSubmissions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (originalityReportOriginalityScore !== undefined) {
            localVarFormParams['originality_report[originality_score]'] = ObjectSerializer.serialize(originalityReportOriginalityScore, "number");
        }

        if (originalityReportOriginalityReportUrl !== undefined) {
            localVarFormParams['originality_report[originality_report_url]'] = ObjectSerializer.serialize(originalityReportOriginalityReportUrl, "string");
        }

        if (originalityReportOriginalityReportFileId !== undefined) {
            localVarFormParams['originality_report[originality_report_file_id]'] = ObjectSerializer.serialize(originalityReportOriginalityReportFileId, "number");
        }

        if (originalityReportToolSettingResourceTypeCode !== undefined) {
            localVarFormParams['originality_report[tool_setting][resource_type_code]'] = ObjectSerializer.serialize(originalityReportToolSettingResourceTypeCode, "string");
        }

        if (originalityReportToolSettingResourceUrl !== undefined) {
            localVarFormParams['originality_report[tool_setting][resource_url]'] = ObjectSerializer.serialize(originalityReportToolSettingResourceUrl, "string");
        }

        if (originalityReportWorkflowState !== undefined) {
            localVarFormParams['originality_report[workflow_state]'] = ObjectSerializer.serialize(originalityReportWorkflowState, "string");
        }

        if (originalityReportErrorMessage !== undefined) {
            localVarFormParams['originality_report[error_message]'] = ObjectSerializer.serialize(originalityReportErrorMessage, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "OriginalityReport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get a single originality report
     * @summary Show an Originality Report
     * @param assignmentId ID
     * @param fileId ID
     */
    public async showOriginalityReportFiles (assignmentId: string, fileId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }> {
        const localVarPath = this.basePath + '/lti/assignments/{assignment_id}/files/{file_id}/originality_report'
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)))
            .replace('{' + 'file_id' + '}', encodeURIComponent(String(fileId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling showOriginalityReportFiles.');
        }

        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling showOriginalityReportFiles.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "OriginalityReport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get a single originality report
     * @summary Show an Originality Report
     * @param assignmentId ID
     * @param submissionId ID
     * @param id ID
     */
    public async showOriginalityReportSubmissions (assignmentId: string, submissionId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }> {
        const localVarPath = this.basePath + '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}'
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)))
            .replace('{' + 'submission_id' + '}', encodeURIComponent(String(submissionId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling showOriginalityReportSubmissions.');
        }

        // verify required parameter 'submissionId' is not null or undefined
        if (submissionId === null || submissionId === undefined) {
            throw new Error('Required parameter submissionId was null or undefined when calling showOriginalityReportSubmissions.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling showOriginalityReportSubmissions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: OriginalityReport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "OriginalityReport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
