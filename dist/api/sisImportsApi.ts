/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { Progress } from '../model/progress';
import { SisImport } from '../model/sisImport';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SisImportsApiApiKeys {
}

export class SisImportsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: SisImportsApiApiKeys, value: string) {
        (this.authentications as any)[SisImportsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Abort already created but not processed or processing SIS imports.
     * @summary Abort all pending SIS imports
     * @param accountId ID
     */
    public async abortAllPendingSisImports (accountId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: boolean;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sis_imports/abort_all_pending'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling abortAllPendingSisImports.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: boolean;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "boolean");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Abort a SIS import that has not completed.  Aborting a sis batch that is running can take some time for every process to see the abort event. Subsequent sis batches begin to process 10 minutes after the abort to allow each process to clean up properly.
     * @summary Abort SIS import
     * @param accountId ID
     * @param id ID
     */
    public async abortSisImport (accountId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SisImport;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sis_imports/{id}/abort'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling abortSisImport.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling abortSisImport.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SisImport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SisImport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the SIS imports that are currently processing for an account. If no imports are running, will return an empty array.  Example:   curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/importing \\     -H \'Authorization: Bearer <token>\'
     * @summary Get the current importing SIS import
     * @param accountId ID
     */
    public async getCurrentImportingSisImport (accountId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SisImport;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sis_imports/importing'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getCurrentImportingSisImport.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SisImport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SisImport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the list of SIS imports for an account  Example:   curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports \\     -H \'Authorization: Bearer <token>\'
     * @summary Get SIS import list
     * @param accountId ID
     * @param createdSince If set, only shows imports created after the specified date (use ISO8601 format)
     * @param createdBefore If set, only shows imports created before the specified date (use ISO8601 format)
     * @param workflowState If set, only returns imports that are in the given state.
     */
    public async getSisImportList (accountId: string, createdSince?: Date, createdBefore?: Date, workflowState?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<SisImport>;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sis_imports'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getSisImportList.');
        }

        if (createdSince !== undefined) {
            localVarQueryParameters['created_since'] = ObjectSerializer.serialize(createdSince, "Date");
        }

        if (createdBefore !== undefined) {
            localVarQueryParameters['created_before'] = ObjectSerializer.serialize(createdBefore, "Date");
        }

        if (workflowState !== undefined) {
            localVarQueryParameters['workflow_state'] = ObjectSerializer.serialize(workflowState, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<SisImport>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<SisImport>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get the status of an already created SIS import.    Examples:     curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<sis_import_id> \\         -H \'Authorization: Bearer <token>\'
     * @summary Get SIS import status
     * @param accountId ID
     * @param id ID
     */
    public async getSisImportStatus (accountId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SisImport;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sis_imports/{id}'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getSisImportStatus.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSisImportStatus.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SisImport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SisImport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Import SIS data into Canvas. Must be on a root account with SIS imports enabled.  For more information on the format that\'s expected here, please see the \"SIS CSV\" section in the API docs.
     * @summary Import SIS data
     * @param accountId ID
     * @param importType Choose the data format for reading SIS data. With a standard Canvas install, this option can only be \\\&#39;instructure_csv\\\&#39;, and if unprovided, will be assumed to be so. Can be part of the query string.
     * @param attachment There are two ways to post SIS import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.  \\\&#39;attachment\\\&#39; is required for multipart/form-data style posts. Assumed to be SIS data from a file upload form field named \\\&#39;attachment\\\&#39;.  Examples:   curl -F attachment&#x3D;@&lt;filename&gt; -H \\\&quot;Authorization: Bearer &lt;token&gt;\\\&quot; \\\\       https://&lt;canvas&gt;/api/v1/accounts/&lt;account_id&gt;/sis_imports.json?import_type&#x3D;instructure_csv  If you decide to do a raw post, you can skip the \\\&#39;attachment\\\&#39; argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the \\\&#39;extension\\\&#39; argument.  Examples:   curl -H \\\&#39;Content-Type: application/octet-stream\\\&#39; --data-binary @&lt;filename&gt;.zip \\\\       -H \\\&quot;Authorization: Bearer &lt;token&gt;\\\&quot; \\\\       https://&lt;canvas&gt;/api/v1/accounts/&lt;account_id&gt;/sis_imports.json?import_type&#x3D;instructure_csv&amp;extension&#x3D;zip    curl -H \\\&#39;Content-Type: application/zip\\\&#39; --data-binary @&lt;filename&gt;.zip \\\\       -H \\\&quot;Authorization: Bearer &lt;token&gt;\\\&quot; \\\\       https://&lt;canvas&gt;/api/v1/accounts/&lt;account_id&gt;/sis_imports.json?import_type&#x3D;instructure_csv    curl -H \\\&#39;Content-Type: text/csv\\\&#39; --data-binary @&lt;filename&gt;.csv \\\\       -H \\\&quot;Authorization: Bearer &lt;token&gt;\\\&quot; \\\\       https://&lt;canvas&gt;/api/v1/accounts/&lt;account_id&gt;/sis_imports.json?import_type&#x3D;instructure_csv    curl -H \\\&#39;Content-Type: text/csv\\\&#39; --data-binary @&lt;filename&gt;.csv \\\\       -H \\\&quot;Authorization: Bearer &lt;token&gt;\\\&quot; \\\\       https://&lt;canvas&gt;/api/v1/accounts/&lt;account_id&gt;/sis_imports.json?import_type&#x3D;instructure_csv&amp;batch_mode&#x3D;1&amp;batch_mode_term_id&#x3D;15  If the attachment is a zip file, the uncompressed file(s) cannot be 100x larger than the zip, or the import will fail. For example, if the zip file is 1KB but the total size of the uncompressed file(s) is 100KB or greater the import will fail. There is a hard cap of 50 GB.
     * @param extension Recommended for raw post request style imports. This field will be used to distinguish between zip, xml, csv, and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to zip-file format if all else fails.
     * @param batchMode If set, this SIS import will be run in batch mode, deleting any data previously imported via SIS that is not present in this latest import. See the SIS CSV Format page for details. Batch mode cannot be used with diffing.
     * @param batchModeTermId Limit deletions to only this term. Required if batch mode is enabled.
     * @param multiTermBatchMode Runs batch mode against all terms in terms file. Requires change_threshold.
     * @param skipDeletes When set the import will skip any deletes. This does not account for objects that are deleted during the batch mode cleanup process.
     * @param overrideSisStickiness Default is false. If true, any fields containing “sticky” or UI changes will be overridden. See SIS CSV Format documentation for information on which fields can have SIS stickiness
     * @param addSisStickiness This option, if present, will process all changes as if they were UI changes. This means that \\\&quot;stickiness\\\&quot; will be added to changed fields. This option is only processed if \\\&#39;override_sis_stickiness\\\&#39; is also provided.
     * @param clearSisStickiness This option, if present, will clear \\\&quot;stickiness\\\&quot; from all fields touched by this import. Requires that \\\&#39;override_sis_stickiness\\\&#39; is also provided. If \\\&#39;add_sis_stickiness\\\&#39; is also provided, \\\&#39;clear_sis_stickiness\\\&#39; will overrule the behavior of \\\&#39;add_sis_stickiness\\\&#39;
     * @param updateSisIdIfLoginClaimed This option, if present, will override the old (or non-existent) non-matching SIS ID with the new SIS ID in the upload, if a pseudonym is found from the login field and the SIS ID doesn\\\&#39;t match.
     * @param diffingDataSetIdentifier If set on a CSV import, Canvas will attempt to optimize the SIS import by comparing this set of CSVs to the previous set that has the same data set identifier, and only applying the difference between the two. See the SIS CSV Format documentation for more details. Diffing cannot be used with batch_mode
     * @param diffingRemasterDataSet If true, and diffing_data_set_identifier is sent, this SIS import will be part of the data set, but diffing will not be performed. See the SIS CSV Format documentation for details.
     * @param diffingDropStatus If diffing_drop_status is passed, this SIS import will use this status for enrollments that are not included in the sis_batch. Defaults to \\\&#39;deleted\\\&#39;
     * @param diffingUserRemoveStatus For users removed from one batch to the next one using the same diffing_data_set_identifier, set their status to the value of this argument. Defaults to \\\&#39;deleted\\\&#39;.
     * @param batchModeEnrollmentDropStatus If batch_mode_enrollment_drop_status is passed, this SIS import will use this status for enrollments that are not included in the sis_batch. This will have an effect if multi_term_batch_mode is set. Defaults to \\\&#39;deleted\\\&#39; This will still mark courses and sections that are not included in the sis_batch as deleted, and subsequently enrollments in the deleted courses and sections as deleted.
     * @param changeThreshold If set with batch_mode, the batch cleanup process will not run if the number of items deleted is higher than the percentage set. If set to 10 and a term has 200 enrollments, and batch would delete more than 20 of the enrollments the batch will abort before the enrollments are deleted. The change_threshold will be evaluated for course, sections, and enrollments independently. If set with diffing, diffing will not be performed if the files are greater than the threshold as a percent. If set to 5 and the file is more than 5% smaller or more than 5% larger than the file that is being compared to, diffing will not be performed. If the files are less than 5%, diffing will be performed. The way the percent is calculated is by taking the size of the current import and dividing it by the size of the previous import. The formula used is: |(1 - current_file_size / previous_file_size)| * 100 See the SIS CSV Format documentation for more details. Required for multi_term_batch_mode.
     * @param diffRowCountThreshold If set with diffing, diffing will not be performed if the number of rows to be run in the fully calculated diff import exceeds the threshold.
     */
    public async importSisData (accountId: string, importType?: string, attachment?: string, extension?: string, batchMode?: boolean, batchModeTermId?: string, multiTermBatchMode?: boolean, skipDeletes?: boolean, overrideSisStickiness?: boolean, addSisStickiness?: boolean, clearSisStickiness?: boolean, updateSisIdIfLoginClaimed?: boolean, diffingDataSetIdentifier?: string, diffingRemasterDataSet?: boolean, diffingDropStatus?: string, diffingUserRemoveStatus?: string, batchModeEnrollmentDropStatus?: string, changeThreshold?: number, diffRowCountThreshold?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SisImport;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sis_imports'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling importSisData.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (importType !== undefined) {
            localVarFormParams['import_type'] = ObjectSerializer.serialize(importType, "string");
        }

        if (attachment !== undefined) {
            localVarFormParams['attachment'] = ObjectSerializer.serialize(attachment, "string");
        }

        if (extension !== undefined) {
            localVarFormParams['extension'] = ObjectSerializer.serialize(extension, "string");
        }

        if (batchMode !== undefined) {
            localVarFormParams['batch_mode'] = ObjectSerializer.serialize(batchMode, "boolean");
        }

        if (batchModeTermId !== undefined) {
            localVarFormParams['batch_mode_term_id'] = ObjectSerializer.serialize(batchModeTermId, "string");
        }

        if (multiTermBatchMode !== undefined) {
            localVarFormParams['multi_term_batch_mode'] = ObjectSerializer.serialize(multiTermBatchMode, "boolean");
        }

        if (skipDeletes !== undefined) {
            localVarFormParams['skip_deletes'] = ObjectSerializer.serialize(skipDeletes, "boolean");
        }

        if (overrideSisStickiness !== undefined) {
            localVarFormParams['override_sis_stickiness'] = ObjectSerializer.serialize(overrideSisStickiness, "boolean");
        }

        if (addSisStickiness !== undefined) {
            localVarFormParams['add_sis_stickiness'] = ObjectSerializer.serialize(addSisStickiness, "boolean");
        }

        if (clearSisStickiness !== undefined) {
            localVarFormParams['clear_sis_stickiness'] = ObjectSerializer.serialize(clearSisStickiness, "boolean");
        }

        if (updateSisIdIfLoginClaimed !== undefined) {
            localVarFormParams['update_sis_id_if_login_claimed'] = ObjectSerializer.serialize(updateSisIdIfLoginClaimed, "boolean");
        }

        if (diffingDataSetIdentifier !== undefined) {
            localVarFormParams['diffing_data_set_identifier'] = ObjectSerializer.serialize(diffingDataSetIdentifier, "string");
        }

        if (diffingRemasterDataSet !== undefined) {
            localVarFormParams['diffing_remaster_data_set'] = ObjectSerializer.serialize(diffingRemasterDataSet, "boolean");
        }

        if (diffingDropStatus !== undefined) {
            localVarFormParams['diffing_drop_status'] = ObjectSerializer.serialize(diffingDropStatus, "string");
        }

        if (diffingUserRemoveStatus !== undefined) {
            localVarFormParams['diffing_user_remove_status'] = ObjectSerializer.serialize(diffingUserRemoveStatus, "string");
        }

        if (batchModeEnrollmentDropStatus !== undefined) {
            localVarFormParams['batch_mode_enrollment_drop_status'] = ObjectSerializer.serialize(batchModeEnrollmentDropStatus, "string");
        }

        if (changeThreshold !== undefined) {
            localVarFormParams['change_threshold'] = ObjectSerializer.serialize(changeThreshold, "number");
        }

        if (diffRowCountThreshold !== undefined) {
            localVarFormParams['diff_row_count_threshold'] = ObjectSerializer.serialize(diffRowCountThreshold, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SisImport;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SisImport");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This will restore the the workflow_state for all the items that changed their workflow_state during the import being restored. This will restore states for items imported with the following importers: accounts.csv terms.csv courses.csv sections.csv group_categories.csv groups.csv users.csv admins.csv This also restores states for other items that changed during the import. An example would be if an enrollment was deleted from a sis import and the group_membership was also deleted as a result of the enrollment deletion, both items would be restored when the sis batch is restored.  Restore data is retained for 30 days post-import. This endpoint is unavailable after that time.
     * @summary Restore workflow_states of SIS imported items
     * @param accountId ID
     * @param id ID
     * @param batchMode If set, will only restore items that were deleted from batch_mode.
     * @param undeleteOnly If set, will only restore items that were deleted. This will ignore any items that were created or modified.
     * @param unconcludeOnly If set, will only restore enrollments that were concluded. This will ignore any items that were created or deleted.
     */
    public async restoreWorkflowStatesOfSisImportedItems (accountId: string, id: string, batchMode?: boolean, undeleteOnly?: boolean, unconcludeOnly?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Progress;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sis_imports/{id}/restore_states'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling restoreWorkflowStatesOfSisImportedItems.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling restoreWorkflowStatesOfSisImportedItems.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (batchMode !== undefined) {
            localVarFormParams['batch_mode'] = ObjectSerializer.serialize(batchMode, "boolean");
        }

        if (undeleteOnly !== undefined) {
            localVarFormParams['undelete_only'] = ObjectSerializer.serialize(undeleteOnly, "boolean");
        }

        if (unconcludeOnly !== undefined) {
            localVarFormParams['unconclude_only'] = ObjectSerializer.serialize(unconcludeOnly, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Progress;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Progress");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
