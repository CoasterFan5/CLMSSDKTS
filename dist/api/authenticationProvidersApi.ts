/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AuthenticationProvider } from '../model/authenticationProvider';
import { SSOSettings } from '../model/sSOSettings';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AuthenticationProvidersApiApiKeys {
}

export class AuthenticationProvidersApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: AuthenticationProvidersApiApiKeys, value: string) {
        (this.authentications as any)[AuthenticationProvidersApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Add external authentication provider(s) for the account. Services may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn, Microsoft, OpenID Connect, or SAML.  Each authentication provider is specified as a set of parameters as described below. A provider specification must include an \'auth_type\' parameter with a value of \'apple\', \'canvas\', \'cas\', \'clever\', \'facebook\', \'github\', \'google\', \'ldap\', \'linkedin\', \'microsoft\', \'openid_connect\', or \'saml\'. The other recognized parameters depend on this auth_type; unrecognized parameters are discarded. Provider specifications not specifying a valid auth_type are ignored.  You can set the \'position\' for any provider. The config in the 1st position is considered the default. You can set \'jit_provisioning\' for any provider besides Canvas. You can set \'mfa_required\' for any provider.  For Apple, the additional recognized parameters are:  - client_id [Required]    The developerâ€™s client identifier, as provided by WWDR. Not available if   configured globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user\'s login in Canvas. Either   \'sub\' (the default), or \'email\'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are \'email\',   \'firstName\', \'lastName\', and \'sub\'.  For Canvas, the additional recognized parameter is:  - self_registration    \'all\', \'none\', or \'observer\' - who is allowed to register as a new user  For CAS, the additional recognized parameters are:  - auth_base    The CAS server\'s URL.  - log_in_url [Optional]    An alternate SSO URL for logging into CAS. You probably should not set   this.  For Clever, the additional recognized parameters are:  - client_id [Required]    The Clever application\'s Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The Clever application\'s Client Secret. Not available if configured   globally for Canvas.  - district_id [Optional]    A district\'s Clever ID. Leave this blank to let Clever handle the details   with its District Picker. This is required for Clever Instant Login to   work in a multi-tenant environment.  - login_attribute [Optional]    The attribute to use to look up the user\'s login in Canvas. Either   \'id\' (the default), \'sis_id\', \'email\', \'student_number\', or   \'teacher_number\'. Note that some fields may not be populated for   all users at Clever.  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are \'id\',   \'sis_id\', \'email\', \'student_number\', and \'teacher_number\'.  For Facebook, the additional recognized parameters are:  - app_id [Required]    The Facebook App ID. Not available if configured globally for Canvas.  - app_secret [Required]    The Facebook App Secret. Not available if configured globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user\'s login in Canvas. Either   \'id\' (the default), or \'email\'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are \'email\',   \'first_name\', \'id\', \'last_name\', \'locale\', and \'name\'.  For GitHub, the additional recognized parameters are:  - domain [Optional]    The domain of a GitHub Enterprise installation. I.e.   github.mycompany.com. If not set, it will default to the public   github.com.  - client_id [Required]    The GitHub application\'s Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The GitHub application\'s Client Secret. Not available if configured   globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user\'s login in Canvas. Either   \'id\' (the default), or \'login\'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are \'email\',   \'id\', \'login\', and \'name\'.  For Google, the additional recognized parameters are:  - client_id [Required]    The Google application\'s Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The Google application\'s Client Secret. Not available if configured   globally for Canvas.  - hosted_domain [Optional]    A Google Apps domain to restrict logins to. See   https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param  - login_attribute [Optional]    The attribute to use to look up the user\'s login in Canvas. Either   \'sub\' (the default), or \'email\'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are \'email\',   \'family_name\', \'given_name\', \'locale\', \'name\', and \'sub\'.  For LDAP, the additional recognized parameters are:  - auth_host    The LDAP server\'s URL.  - auth_port [Optional, Integer]    The LDAP server\'s TCP port. (default: 389)  - auth_over_tls [Optional]    Whether to use TLS. Can be \'simple_tls\', or \'start_tls\'. For backwards   compatibility, booleans are also accepted, with true meaning simple_tls.   If not provided, it will default to start_tls.  - auth_base [Optional]    A default treebase parameter for searches performed against the LDAP   server.  - auth_filter    LDAP search filter. Use !{{login}} as a placeholder for the username   supplied by the user. For example: \"(sAMAccountName=!{{login}})\".  - identifier_format [Optional]    The LDAP attribute to use to look up the Canvas login. Omit to use   the username supplied by the user.  - auth_username    Username  - auth_password    Password  For LinkedIn, the additional recognized parameters are:  - client_id [Required]    The LinkedIn application\'s Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The LinkedIn application\'s Client Secret. Not available if configured   globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user\'s login in Canvas. Either   \'id\' (the default), or \'emailAddress\'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are \'emailAddress\',   \'firstName\', \'id\', \'formattedName\', and \'lastName\'.  For Microsoft, the additional recognized parameters are:  - application_id [Required]    The application\'s ID.  - application_secret [Required]    The application\'s Client Secret (Password)  - tenant [Optional]    See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/   Valid values are \'common\', \'organizations\', \'consumers\', or an Azure Active Directory Tenant   (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to \'common\'  - login_attribute [Optional]    See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens   Valid values are \'sub\', \'email\', \'oid\', or \'preferred_username\'. Note   that email may not always be populated in the user\'s profile at   Microsoft. Oid will not be populated for personal Microsoft accounts.   Defaults to \'sub\'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are \'email\',   \'name\', \'preferred_username\', \'oid\', and \'sub\'.  For OpenID Connect, the additional recognized parameters are:  - client_id [Required]    The application\'s Client ID.  - client_secret [Required]    The application\'s Client Secret.  - authorize_url [Required]    The URL for getting starting the OAuth 2.0 web flow  - token_url [Required]    The URL for exchanging the OAuth 2.0 authorization code for an Access   Token and ID Token  - scope [Optional]    Space separated additional scopes to request for the token. Note that   you need not specify the \'openid\' scope, or any scopes that can be   automatically inferred by the rules defined at   http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims  - end_session_endpoint [Optional]    URL to send the end user to after logging out of Canvas. See   https://openid.net/specs/openid-connect-session-1_0.html#RPLogout  - userinfo_endpoint [Optional]    URL to request additional claims from. If the initial ID Token received   from the provider cannot be used to satisfy the login_attribute and   all federated_attributes, this endpoint will be queried for additional   information.  - login_attribute [Optional]    The attribute of the ID Token to look up the user\'s login in Canvas.   Defaults to \'sub\'.  - federated_attributes [Optional]    See FederatedAttributesConfig. Any value is allowed for the provider   attribute names, but standard claims are listed at   http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims  For SAML, the additional recognized parameters are:  - metadata [Optional]    An XML document to parse as SAML metadata, and automatically populate idp_entity_id,   log_in_url, log_out_url, certificate_fingerprint, and identifier_format  - metadata_uri [Optional]    A URI to download the SAML metadata from, and automatically populate idp_entity_id,   log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI   will also be saved, and the metadata periodically refreshed, automatically. If   the metadata contains multiple entities, also supply idp_entity_id to distinguish   which one you want (otherwise the only entity in the metadata will be inferred).   If you provide the URI \'urn:mace:incommon\' or \'http://ukfederation.org.uk\',   the InCommon or UK Access Management Federation metadata aggregate, respectively,   will be used instead, and additional validation checks will happen (including   validating that the metadata has been properly signed with the   appropriate key).  - idp_entity_id    The SAML IdP\'s entity ID  - log_in_url    The SAML service\'s SSO target URL  - log_out_url [Optional]    The SAML service\'s SLO target URL  - certificate_fingerprint    The SAML service\'s certificate fingerprint.  - identifier_format    The SAML service\'s identifier format. Must be one of:    - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress   - urn:oasis:names:tc:SAML:2.0:nameid-format:entity   - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos   - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent   - urn:oasis:names:tc:SAML:2.0:nameid-format:transient   - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified   - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName   - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName  - requested_authn_context [Optional]    The SAML AuthnContext  - sig_alg [Optional]    If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages   are signed with the corresponding algorithm. Supported algorithms are:    - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}   - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}    RSA-SHA1 and RSA-SHA256 are acceptable aliases.  - federated_attributes [Optional]    See FederatedAttributesConfig. Any value is allowed for the provider attribute names.
     * @summary Add authentication provider
     * @param accountId ID
     */
    public async addAuthenticationProvider (accountId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuthenticationProvider;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/authentication_providers'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling addAuthenticationProvider.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuthenticationProvider;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AuthenticationProvider");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete the config
     * @summary Delete authentication provider
     * @param accountId ID
     * @param id ID
     */
    public async deleteAuthenticationProvider (accountId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/authentication_providers/{id}'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling deleteAuthenticationProvider.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAuthenticationProvider.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get the specified authentication provider
     * @summary Get authentication provider
     * @param accountId ID
     * @param id ID
     */
    public async getAuthenticationProvider (accountId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuthenticationProvider;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/authentication_providers/{id}'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getAuthenticationProvider.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAuthenticationProvider.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuthenticationProvider;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AuthenticationProvider");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a paginated list of authentication providers
     * @summary List authentication providers
     * @param accountId ID
     */
    public async listAuthenticationProviders (accountId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<AuthenticationProvider>;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/authentication_providers'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling listAuthenticationProviders.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<AuthenticationProvider>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<AuthenticationProvider>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Restore an authentication provider back to active that was previously deleted. Only available to admins who can manage_account_settings for given root account.
     * @summary Restore a deleted authentication provider
     * @param accountId ID
     * @param id ID
     */
    public async restoreDeletedAuthenticationProvider (accountId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuthenticationProvider;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/authentication_providers/{id}/restore'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling restoreDeletedAuthenticationProvider.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling restoreDeletedAuthenticationProvider.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuthenticationProvider;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AuthenticationProvider");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The way to get the current state of each account level setting that\'s relevant to Single Sign On configuration  You can list the current state of each setting with \"update_sso_settings\"
     * @summary Show account auth settings
     * @param accountId ID
     */
    public async showAccountAuthSettings (accountId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SSOSettings;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sso_settings'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling showAccountAuthSettings.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SSOSettings;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SSOSettings");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * For various cases of mixed SSO configurations, you may need to set some configuration at the account level to handle the particulars of your setup.  This endpoint accepts a PUT request to set several possible account settings. All setting are optional on each request, any that are not provided at all are simply retained as is.  Any that provide the key but a null-ish value (blank string, null, undefined) will be UN-set.  You can list the current state of each setting with \"show_sso_settings\"
     * @summary Update account auth settings
     * @param accountId ID
     */
    public async updateAccountAuthSettings (accountId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SSOSettings;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/sso_settings'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling updateAccountAuthSettings.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SSOSettings;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SSOSettings");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an authentication provider using the same options as the {api:AuthenticationProvidersController#create Add authentication provider} endpoint. You cannot update an existing provider to a new authentication type.
     * @summary Update authentication provider
     * @param accountId ID
     * @param id ID
     */
    public async updateAuthenticationProvider (accountId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuthenticationProvider;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/authentication_providers/{id}'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling updateAuthenticationProvider.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAuthenticationProvider.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuthenticationProvider;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AuthenticationProvider");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
