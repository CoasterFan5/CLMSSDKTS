/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AccommodationResponse } from '../model/accommodationResponse';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum NewQuizzesAccommodationsApiApiKeys {
}

export class NewQuizzesAccommodationsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: NewQuizzesAccommodationsApiApiKeys, value: string) {
        (this.authentications as any)[NewQuizzesAccommodationsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Apply accommodations at the <b>course level</b> for students enrolled in a given course.  <b>Request Body Format:</b>   [{     \"user_id\": 3,     \"extra_time\": 60,     \"apply_to_in_progress_quiz_sessions\": true,     \"reduce_choices_enabled\": true   }]  <b>Responses</b>  * <code>200 OK</code>: Accommodations were processed with some successes and failures * <code>401 Unauthorized</code>: User does not have permission to update accommodations * <code>404 Not Found</code>: The course was not found * <code>400 Bad Request</code>: Validation error (e.g., invalid JSON, missing user IDs)
     * @summary Set Course-Level Accommodations
     * @param courseId The ID of the course where accommodations should be applied.
     * @param userId The Canvas user ID of the student receiving accommodations.
     * @param extraTime Amount of extra time in &lt;b&gt;minutes&lt;/b&gt; granted for quiz submission. Allowed range: 0 to 10080 minutes (168 hours).
     * @param applyToInProgressQuizSessions If \\\&#39;true\\\&#39;, applies the accommodation to currently &lt;b&gt;in-progress&lt;/b&gt; quiz sessions.
     * @param reduceChoicesEnabled If \\\&#39;true\\\&#39;, removes &lt;b&gt;one incorrect answer&lt;/b&gt; from multiple-choice questions with &lt;b&gt;4 or more options&lt;/b&gt;.
     */
    public async setCourseLevelAccommodations (courseId: string, userId: number, extraTime?: number, applyToInProgressQuizSessions?: boolean, reduceChoicesEnabled?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AccommodationResponse;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/accommodations'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling setCourseLevelAccommodations.');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling setCourseLevelAccommodations.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (userId !== undefined) {
            localVarFormParams['user_id'] = ObjectSerializer.serialize(userId, "number");
        }

        if (extraTime !== undefined) {
            localVarFormParams['extra_time'] = ObjectSerializer.serialize(extraTime, "number");
        }

        if (applyToInProgressQuizSessions !== undefined) {
            localVarFormParams['apply_to_in_progress_quiz_sessions'] = ObjectSerializer.serialize(applyToInProgressQuizSessions, "boolean");
        }

        if (reduceChoicesEnabled !== undefined) {
            localVarFormParams['reduce_choices_enabled'] = ObjectSerializer.serialize(reduceChoicesEnabled, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AccommodationResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AccommodationResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Apply accommodations at the <b>quiz level</b> for students in a specific assignment.  <b>Request Body Format:</b>   [{     \"user_id\": 3,     \"extra_time\": 60,     \"extra_attempts\": 1,     \"reduce_choices_enabled\": true   }]  <b>Responses</b>  * <code>200 OK</code>: Accommodations were processed with some successes and failures * <code>401 Unauthorized</code>: User does not have permission to update accommodations * <code>404 Not Found</code>: The course or assignment was not found * <code>400 Bad Request</code>: Validation error (e.g., invalid JSON, missing user IDs)
     * @summary Set Quiz-Level Accommodations
     * @param courseId The ID of the course where the quiz is located.
     * @param assignmentId The ID of the assignment/quiz that needs accommodations.
     * @param userId The Canvas user ID of the student receiving accommodations.
     * @param extraTime Amount of extra time in &lt;b&gt;minutes&lt;/b&gt; granted for quiz submission. Allowed range: 0 to 10080 minutes (168 hours).
     * @param extraAttempts Number of times the student is allowed to re-take the quiz over the multiple-attempt limit.
     * @param reduceChoicesEnabled If \\\&#39;true\\\&#39;, removes &lt;b&gt;one incorrect answer&lt;/b&gt; from multiple-choice questions with &lt;b&gt;4 or more options&lt;/b&gt;.
     */
    public async setQuizLevelAccommodations (courseId: string, assignmentId: number, userId: number, extraTime?: number, extraAttempts?: number, reduceChoicesEnabled?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AccommodationResponse;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/accommodations'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling setQuizLevelAccommodations.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling setQuizLevelAccommodations.');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling setQuizLevelAccommodations.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (userId !== undefined) {
            localVarFormParams['user_id'] = ObjectSerializer.serialize(userId, "number");
        }

        if (extraTime !== undefined) {
            localVarFormParams['extra_time'] = ObjectSerializer.serialize(extraTime, "number");
        }

        if (extraAttempts !== undefined) {
            localVarFormParams['extra_attempts'] = ObjectSerializer.serialize(extraAttempts, "number");
        }

        if (reduceChoicesEnabled !== undefined) {
            localVarFormParams['reduce_choices_enabled'] = ObjectSerializer.serialize(reduceChoicesEnabled, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AccommodationResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AccommodationResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
