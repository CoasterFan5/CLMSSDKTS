/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { NewQuiz } from '../model/newQuiz';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum NewQuizzesApiApiKeys {
}

export class NewQuizzesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: NewQuizzesApiApiKeys, value: string) {
        (this.authentications as any)[NewQuizzesApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Create a new quiz for the course.
     * @summary Create a new quiz
     * @param courseId no description
     * @param quizTitle The title of the quiz.
     * @param quizAssignmentGroupId The ID of the quiz\\\&#39;s assignment group.
     * @param quizPointsPossible The total point value given to the quiz. Must be positive.
     * @param quizDueAt When the quiz is due.
     * @param quizLockAt When to lock the quiz.
     * @param quizUnlockAt When to unlock the quiz.
     * @param quizGradingType The type of grading the assignment receives.
     * @param quizInstructions Instructions for the quiz.
     * @param quizQuizSettingsCalculatorType Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.
     * @param quizQuizSettingsFilterIpAddress Whether IP filtering is needed.  Must be true for filters to take effect.
     * @param quizQuizSettingsFiltersIps Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there\\\&#39;s no restriction.
     * @param quizQuizSettingsMultipleAttemptsMultipleAttemptsEnabled Whether multiple attempts for this quiz is true.
     * @param quizQuizSettingsMultipleAttemptsAttemptLimit Whether there is an attempt limit.  Only set if multiple_attempts_enabled is true.
     * @param quizQuizSettingsMultipleAttemptsMaxAttempts The allowed attempts a student can take. If null, the allowed attempts are unlimited.  Only used if attempt_limit is true.
     * @param quizQuizSettingsMultipleAttemptsScoreToKeep Whichever score to keep for the attempts.  Only used if multiple_attempts_enabled is true.
     * @param quizQuizSettingsMultipleAttemptsCoolingPeriod Whether there is a cooling (waiting) period.  Only used if multiple_attempts_enabled is true.
     * @param quizQuizSettingsMultipleAttemptsCoolingPeriodSeconds Required waiting period in seconds between attempts. If null, there is no required time. Only used if cooling_period is true
     * @param quizQuizSettingsOneAtATimeType Specifies the settings for questions to display when quiz taking.
     * @param quizQuizSettingsAllowBacktracking Whether to allow user to return to previous questions when \\\&#39;one_at_a_time_type\\\&#39; is set to \\\&#39;question\\\&#39;.
     * @param quizQuizSettingsResultViewSettingsResultViewRestricted Whether the results view is restricted for students.  Must be true for any student restrictions to be set.
     * @param quizQuizSettingsResultViewSettingsDisplayPointsAwarded Whether points are shown. Must set result_view_restricted to true to use this parameter.
     * @param quizQuizSettingsResultViewSettingsDisplayPointsPossible Whether points possible is shown. Must set result_view_restricted to true to use this parameter.
     * @param quizQuizSettingsResultViewSettingsDisplayItems Whether to show items in the results view.  Must be true for any items restrictions to be set.
     * @param quizQuizSettingsResultViewSettingsDisplayItemResponse Whether item response is shown.  Only set if display_items is true.  Must be true for display_item_response_qualifier, show_item_responses_at, hide_item_responses_at, and display_item_response_correctness to be set.
     * @param quizQuizSettingsResultViewSettingsDisplayItemResponseQualifier Specifies after which attempts student responses should be shown to them. Only used if display_item_response is true.
     * @param quizQuizSettingsResultViewSettingsShowItemResponsesAt When student responses should be shown to them. Only used if display_item_response is true.
     * @param quizQuizSettingsResultViewSettingsHideItemResponsesAt When student responses should be hidden from them. Only used if display_item_response is true.
     * @param quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectness Whether item correctness is shown.  Only set if display_item_response is true.  Must be true for display_item_response_correctness_qualifier, show_item_response_correctness_at, hide_item_response_correctness_at and display_item_correct_answer to be set.
     * @param quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectnessQualifier Specifies after which attempts student response correctness should be shown to them. Only used if display_item_response_correctness is true.
     * @param quizQuizSettingsResultViewSettingsShowItemResponseCorrectnessAt When student response correctness should be shown to them. Only used if display_item_response_correctness is true.
     * @param quizQuizSettingsResultViewSettingsHideItemResponseCorrectnessAt When student response correctness should be hidden from them. Only used if display_item_response_correctness is true.
     * @param quizQuizSettingsResultViewSettingsDisplayItemCorrectAnswer Whether correct answer is shown.  Only set if display_item_response_correctness is true.
     * @param quizQuizSettingsResultViewSettingsDisplayItemFeedback Whether Item feedback is shown.  Only set if display_items is true.
     * @param quizQuizSettingsShuffleAnswers Whether answers should be shuffled for students.
     * @param quizQuizSettingsShuffleQuestions Whether questions should be shuffled for students.
     * @param quizQuizSettingsRequireStudentAccessCode Whether an access code is needed to take the quiz.
     * @param quizQuizSettingsStudentAccessCode Access code to restrict quiz access. Should be null if no restriction.
     * @param quizQuizSettingsHasTimeLimit Whether there is a time limit for the quiz.
     * @param quizQuizSettingsSessionTimeLimitInSeconds Limit the time a student can work on the quiz. Should be null if no restriction.
     */
    public async createNewQuiz (courseId: number, quizTitle?: string, quizAssignmentGroupId?: number, quizPointsPossible?: number, quizDueAt?: Date, quizLockAt?: Date, quizUnlockAt?: Date, quizGradingType?: string, quizInstructions?: string, quizQuizSettingsCalculatorType?: string, quizQuizSettingsFilterIpAddress?: boolean, quizQuizSettingsFiltersIps?: Array<string>, quizQuizSettingsMultipleAttemptsMultipleAttemptsEnabled?: boolean, quizQuizSettingsMultipleAttemptsAttemptLimit?: boolean, quizQuizSettingsMultipleAttemptsMaxAttempts?: any, quizQuizSettingsMultipleAttemptsScoreToKeep?: string, quizQuizSettingsMultipleAttemptsCoolingPeriod?: boolean, quizQuizSettingsMultipleAttemptsCoolingPeriodSeconds?: any, quizQuizSettingsOneAtATimeType?: string, quizQuizSettingsAllowBacktracking?: boolean, quizQuizSettingsResultViewSettingsResultViewRestricted?: boolean, quizQuizSettingsResultViewSettingsDisplayPointsAwarded?: boolean, quizQuizSettingsResultViewSettingsDisplayPointsPossible?: boolean, quizQuizSettingsResultViewSettingsDisplayItems?: boolean, quizQuizSettingsResultViewSettingsDisplayItemResponse?: boolean, quizQuizSettingsResultViewSettingsDisplayItemResponseQualifier?: string, quizQuizSettingsResultViewSettingsShowItemResponsesAt?: Date, quizQuizSettingsResultViewSettingsHideItemResponsesAt?: Date, quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectness?: boolean, quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectnessQualifier?: string, quizQuizSettingsResultViewSettingsShowItemResponseCorrectnessAt?: Date, quizQuizSettingsResultViewSettingsHideItemResponseCorrectnessAt?: Date, quizQuizSettingsResultViewSettingsDisplayItemCorrectAnswer?: boolean, quizQuizSettingsResultViewSettingsDisplayItemFeedback?: boolean, quizQuizSettingsShuffleAnswers?: boolean, quizQuizSettingsShuffleQuestions?: boolean, quizQuizSettingsRequireStudentAccessCode?: boolean, quizQuizSettingsStudentAccessCode?: string, quizQuizSettingsHasTimeLimit?: boolean, quizQuizSettingsSessionTimeLimitInSeconds?: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: NewQuiz;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling createNewQuiz.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (quizTitle !== undefined) {
            localVarFormParams['quiz[title]'] = ObjectSerializer.serialize(quizTitle, "string");
        }

        if (quizAssignmentGroupId !== undefined) {
            localVarFormParams['quiz[assignment_group_id]'] = ObjectSerializer.serialize(quizAssignmentGroupId, "number");
        }

        if (quizPointsPossible !== undefined) {
            localVarFormParams['quiz[points_possible]'] = ObjectSerializer.serialize(quizPointsPossible, "number");
        }

        if (quizDueAt !== undefined) {
            localVarFormParams['quiz[due_at]'] = ObjectSerializer.serialize(quizDueAt, "Date");
        }

        if (quizLockAt !== undefined) {
            localVarFormParams['quiz[lock_at]'] = ObjectSerializer.serialize(quizLockAt, "Date");
        }

        if (quizUnlockAt !== undefined) {
            localVarFormParams['quiz[unlock_at]'] = ObjectSerializer.serialize(quizUnlockAt, "Date");
        }

        if (quizGradingType !== undefined) {
            localVarFormParams['quiz[grading_type]'] = ObjectSerializer.serialize(quizGradingType, "string");
        }

        if (quizInstructions !== undefined) {
            localVarFormParams['quiz[instructions]'] = ObjectSerializer.serialize(quizInstructions, "string");
        }

        if (quizQuizSettingsCalculatorType !== undefined) {
            localVarFormParams['quiz[quiz_settings][calculator_type]'] = ObjectSerializer.serialize(quizQuizSettingsCalculatorType, "string");
        }

        if (quizQuizSettingsFilterIpAddress !== undefined) {
            localVarFormParams['quiz[quiz_settings][filter_ip_address]'] = ObjectSerializer.serialize(quizQuizSettingsFilterIpAddress, "boolean");
        }

        if (quizQuizSettingsFiltersIps !== undefined) {
            localVarFormParams['quiz[quiz_settings][filters][ips]'] = ObjectSerializer.serialize(quizQuizSettingsFiltersIps, "Array<string>");
        }

        if (quizQuizSettingsMultipleAttemptsMultipleAttemptsEnabled !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsMultipleAttemptsEnabled, "boolean");
        }

        if (quizQuizSettingsMultipleAttemptsAttemptLimit !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][attempt_limit]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsAttemptLimit, "boolean");
        }

        if (quizQuizSettingsMultipleAttemptsMaxAttempts !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][max_attempts]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsMaxAttempts, "any");
        }

        if (quizQuizSettingsMultipleAttemptsScoreToKeep !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][score_to_keep]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsScoreToKeep, "string");
        }

        if (quizQuizSettingsMultipleAttemptsCoolingPeriod !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][cooling_period]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsCoolingPeriod, "boolean");
        }

        if (quizQuizSettingsMultipleAttemptsCoolingPeriodSeconds !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][cooling_period_seconds]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsCoolingPeriodSeconds, "any");
        }

        if (quizQuizSettingsOneAtATimeType !== undefined) {
            localVarFormParams['quiz[quiz_settings][one_at_a_time_type]'] = ObjectSerializer.serialize(quizQuizSettingsOneAtATimeType, "string");
        }

        if (quizQuizSettingsAllowBacktracking !== undefined) {
            localVarFormParams['quiz[quiz_settings][allow_backtracking]'] = ObjectSerializer.serialize(quizQuizSettingsAllowBacktracking, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsResultViewRestricted !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][result_view_restricted]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsResultViewRestricted, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayPointsAwarded !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_points_awarded]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayPointsAwarded, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayPointsPossible !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_points_possible]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayPointsPossible, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItems !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_items]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItems, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemResponse !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_response]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemResponse, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemResponseQualifier !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_response_qualifier]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemResponseQualifier, "string");
        }

        if (quizQuizSettingsResultViewSettingsShowItemResponsesAt !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][show_item_responses_at]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsShowItemResponsesAt, "Date");
        }

        if (quizQuizSettingsResultViewSettingsHideItemResponsesAt !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][hide_item_responses_at]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsHideItemResponsesAt, "Date");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectness !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_response_correctness]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectness, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectnessQualifier !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_response_correctness_qualifier]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectnessQualifier, "string");
        }

        if (quizQuizSettingsResultViewSettingsShowItemResponseCorrectnessAt !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][show_item_response_correctness_at]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsShowItemResponseCorrectnessAt, "Date");
        }

        if (quizQuizSettingsResultViewSettingsHideItemResponseCorrectnessAt !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][hide_item_response_correctness_at]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsHideItemResponseCorrectnessAt, "Date");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemCorrectAnswer !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_correct_answer]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemCorrectAnswer, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemFeedback !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_feedback]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemFeedback, "boolean");
        }

        if (quizQuizSettingsShuffleAnswers !== undefined) {
            localVarFormParams['quiz[quiz_settings][shuffle_answers]'] = ObjectSerializer.serialize(quizQuizSettingsShuffleAnswers, "boolean");
        }

        if (quizQuizSettingsShuffleQuestions !== undefined) {
            localVarFormParams['quiz[quiz_settings][shuffle_questions]'] = ObjectSerializer.serialize(quizQuizSettingsShuffleQuestions, "boolean");
        }

        if (quizQuizSettingsRequireStudentAccessCode !== undefined) {
            localVarFormParams['quiz[quiz_settings][require_student_access_code]'] = ObjectSerializer.serialize(quizQuizSettingsRequireStudentAccessCode, "boolean");
        }

        if (quizQuizSettingsStudentAccessCode !== undefined) {
            localVarFormParams['quiz[quiz_settings][student_access_code]'] = ObjectSerializer.serialize(quizQuizSettingsStudentAccessCode, "string");
        }

        if (quizQuizSettingsHasTimeLimit !== undefined) {
            localVarFormParams['quiz[quiz_settings][has_time_limit]'] = ObjectSerializer.serialize(quizQuizSettingsHasTimeLimit, "boolean");
        }

        if (quizQuizSettingsSessionTimeLimitInSeconds !== undefined) {
            localVarFormParams['quiz[quiz_settings][session_time_limit_in_seconds]'] = ObjectSerializer.serialize(quizQuizSettingsSessionTimeLimitInSeconds, "any");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: NewQuiz;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "NewQuiz");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete a single new quiz.
     * @summary Delete a new quiz
     * @param courseId no description
     * @param assignmentId The id of the assignment associated with the quiz.
     */
    public async deleteNewQuiz (courseId: number, assignmentId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: NewQuiz;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling deleteNewQuiz.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling deleteNewQuiz.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: NewQuiz;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "NewQuiz");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get details about a single new quiz.
     * @summary Get a new quiz
     * @param courseId no description
     * @param assignmentId The id of the assignment associated with the quiz.
     */
    public async getNewQuiz (courseId: number, assignmentId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: NewQuiz;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getNewQuiz.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling getNewQuiz.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: NewQuiz;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "NewQuiz");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get a list of new quizzes.
     * @summary List new quizzes
     * @param courseId no description
     */
    public async listNewQuizzes (courseId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<NewQuiz>;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listNewQuizzes.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<NewQuiz>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<NewQuiz>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update a single quiz for the course.
     * @summary Update a single quiz
     * @param courseId no description
     * @param assignmentId The id of the assignment associated with the quiz.
     * @param quizTitle The title of the quiz.
     * @param quizAssignmentGroupId The ID of the quiz\\\&#39;s assignment group.
     * @param quizPointsPossible The total point value given to the quiz. Must be positive.
     * @param quizDueAt When the quiz is due.
     * @param quizLockAt When to lock the quiz.
     * @param quizUnlockAt When to unlock the quiz.
     * @param quizGradingType The type of grading the assignment receives.
     * @param quizInstructions Instructions for the quiz.
     * @param quizQuizSettingsCalculatorType Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.
     * @param quizQuizSettingsFilterIpAddress Whether IP filtering is needed. Must be true for filters to take effect.
     * @param quizQuizSettingsFiltersIps Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there\\\&#39;s no restriction. Specifies the range of IP addresses where the quiz can be taken from. Should be null if there\\\&#39;s no restriction.
     * @param quizQuizSettingsMultipleAttemptsMultipleAttemptsEnabled Whether multiple attempts for this quiz is true.
     * @param quizQuizSettingsMultipleAttemptsAttemptLimit Whether there is an attempt limit.  Only set if multiple_attempts_enabled is true.
     * @param quizQuizSettingsMultipleAttemptsMaxAttempts The allowed attempts a student can take. If null, the allowed attempts are unlimited. Only used if attempt_limit is true.
     * @param quizQuizSettingsMultipleAttemptsScoreToKeep Whichever score to keep for the attempts. Only used if multiple_attempts_enabled is true.
     * @param quizQuizSettingsMultipleAttemptsCoolingPeriod Whether there is a cooling period. Only used if multiple_attempts_enabled is true.
     * @param quizQuizSettingsMultipleAttemptsCoolingPeriodSeconds Required waiting period in seconds between attempts. If null, there is no required time.  Only used if cooling_period is true.
     * @param quizQuizSettingsOneAtATimeType Specifies the settings for questions to display when quiz taking.
     * @param quizQuizSettingsAllowBacktracking Whether to allow user to return to previous questions when \\\&#39;one_at_a_time_type\\\&#39; is set to \\\&#39;question\\\&#39;.
     * @param quizQuizSettingsResultViewSettingsResultViewRestricted Whether the results view is restricted for students.  Must be true for any student restrictions to be set.
     * @param quizQuizSettingsResultViewSettingsDisplayPointsAwarded Whether points are shown. Must set result_view_restricted to true to use this parameter.
     * @param quizQuizSettingsResultViewSettingsDisplayPointsPossible Whether points possible is shown. Must set result_view_restricted to true to use this parameter.
     * @param quizQuizSettingsResultViewSettingsDisplayItems Whether to show items in the results view.  Must be true for any items restrictions to be set.
     * @param quizQuizSettingsResultViewSettingsDisplayItemResponse Whether item response is shown.  Only set if display_items is true.  Must be true for display_item_response_qualifier, show_item_responses_at, hide_item_responses_at, and display_item_response_correctness to be set.
     * @param quizQuizSettingsResultViewSettingsDisplayItemResponseQualifier Specifies after which attempts student responses should be shown to them. Only used if display_item_response is true.
     * @param quizQuizSettingsResultViewSettingsShowItemResponsesAt When student responses should be shown to them. Only used if display_item_response is true.
     * @param quizQuizSettingsResultViewSettingsHideItemResponsesAt When student responses should be hidden from them. Only used if display_item_response is true.
     * @param quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectness Whether item correctness is shown.  Only set if display_item_response is true.  Must be true for display_item_response_correctness_qualifier, show_item_response_correctness_at, hide_item_response_correctness_at and display_item_correct_answer to be set.
     * @param quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectnessQualifier Specifies after which attempts student response correctness should be shown to them. Only used if display_item_response_correctness is true.
     * @param quizQuizSettingsResultViewSettingsShowItemResponseCorrectnessAt When student response correctness should be shown to them. Only used if display_item_response_correctness is true.
     * @param quizQuizSettingsResultViewSettingsHideItemResponseCorrectnessAt When student response correctness should be hidden from them. Only used if display_item_response_correctness is true.
     * @param quizQuizSettingsResultViewSettingsDisplayItemCorrectAnswer Whether correct answer is shown.  Only set if display_item_response_correctness is true.
     * @param quizQuizSettingsResultViewSettingsDisplayItemFeedback Whether Item feedback is shown.  Only set if display_items is true.
     * @param quizQuizSettingsShuffleAnswers Whether answers should be shuffled for students.
     * @param quizQuizSettingsShuffleQuestions Whether questions should be shuffled for students.
     * @param quizQuizSettingsRequireStudentAccessCode Whether an access code is needed to take the quiz.
     * @param quizQuizSettingsStudentAccessCode Access code to restrict quiz access. Should be null if no restriction.
     * @param quizQuizSettingsHasTimeLimit Whether there is a time limit for the quiz.
     * @param quizQuizSettingsSessionTimeLimitInSeconds Limit the time a student can work on the quiz. Should be null if no restriction.
     */
    public async updateSingleQuiz (courseId: number, assignmentId: number, quizTitle?: string, quizAssignmentGroupId?: number, quizPointsPossible?: number, quizDueAt?: Date, quizLockAt?: Date, quizUnlockAt?: Date, quizGradingType?: string, quizInstructions?: string, quizQuizSettingsCalculatorType?: string, quizQuizSettingsFilterIpAddress?: boolean, quizQuizSettingsFiltersIps?: Array<string>, quizQuizSettingsMultipleAttemptsMultipleAttemptsEnabled?: boolean, quizQuizSettingsMultipleAttemptsAttemptLimit?: boolean, quizQuizSettingsMultipleAttemptsMaxAttempts?: any, quizQuizSettingsMultipleAttemptsScoreToKeep?: string, quizQuizSettingsMultipleAttemptsCoolingPeriod?: boolean, quizQuizSettingsMultipleAttemptsCoolingPeriodSeconds?: any, quizQuizSettingsOneAtATimeType?: string, quizQuizSettingsAllowBacktracking?: boolean, quizQuizSettingsResultViewSettingsResultViewRestricted?: boolean, quizQuizSettingsResultViewSettingsDisplayPointsAwarded?: boolean, quizQuizSettingsResultViewSettingsDisplayPointsPossible?: boolean, quizQuizSettingsResultViewSettingsDisplayItems?: boolean, quizQuizSettingsResultViewSettingsDisplayItemResponse?: boolean, quizQuizSettingsResultViewSettingsDisplayItemResponseQualifier?: string, quizQuizSettingsResultViewSettingsShowItemResponsesAt?: Date, quizQuizSettingsResultViewSettingsHideItemResponsesAt?: Date, quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectness?: boolean, quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectnessQualifier?: string, quizQuizSettingsResultViewSettingsShowItemResponseCorrectnessAt?: Date, quizQuizSettingsResultViewSettingsHideItemResponseCorrectnessAt?: Date, quizQuizSettingsResultViewSettingsDisplayItemCorrectAnswer?: boolean, quizQuizSettingsResultViewSettingsDisplayItemFeedback?: boolean, quizQuizSettingsShuffleAnswers?: boolean, quizQuizSettingsShuffleQuestions?: boolean, quizQuizSettingsRequireStudentAccessCode?: boolean, quizQuizSettingsStudentAccessCode?: string, quizQuizSettingsHasTimeLimit?: boolean, quizQuizSettingsSessionTimeLimitInSeconds?: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: NewQuiz;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling updateSingleQuiz.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling updateSingleQuiz.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (quizTitle !== undefined) {
            localVarFormParams['quiz[title]'] = ObjectSerializer.serialize(quizTitle, "string");
        }

        if (quizAssignmentGroupId !== undefined) {
            localVarFormParams['quiz[assignment_group_id]'] = ObjectSerializer.serialize(quizAssignmentGroupId, "number");
        }

        if (quizPointsPossible !== undefined) {
            localVarFormParams['quiz[points_possible]'] = ObjectSerializer.serialize(quizPointsPossible, "number");
        }

        if (quizDueAt !== undefined) {
            localVarFormParams['quiz[due_at]'] = ObjectSerializer.serialize(quizDueAt, "Date");
        }

        if (quizLockAt !== undefined) {
            localVarFormParams['quiz[lock_at]'] = ObjectSerializer.serialize(quizLockAt, "Date");
        }

        if (quizUnlockAt !== undefined) {
            localVarFormParams['quiz[unlock_at]'] = ObjectSerializer.serialize(quizUnlockAt, "Date");
        }

        if (quizGradingType !== undefined) {
            localVarFormParams['quiz[grading_type]'] = ObjectSerializer.serialize(quizGradingType, "string");
        }

        if (quizInstructions !== undefined) {
            localVarFormParams['quiz[instructions]'] = ObjectSerializer.serialize(quizInstructions, "string");
        }

        if (quizQuizSettingsCalculatorType !== undefined) {
            localVarFormParams['quiz[quiz_settings][calculator_type]'] = ObjectSerializer.serialize(quizQuizSettingsCalculatorType, "string");
        }

        if (quizQuizSettingsFilterIpAddress !== undefined) {
            localVarFormParams['quiz[quiz_settings][filter_ip_address]'] = ObjectSerializer.serialize(quizQuizSettingsFilterIpAddress, "boolean");
        }

        if (quizQuizSettingsFiltersIps !== undefined) {
            localVarFormParams['quiz[quiz_settings][filters][ips]'] = ObjectSerializer.serialize(quizQuizSettingsFiltersIps, "Array<string>");
        }

        if (quizQuizSettingsMultipleAttemptsMultipleAttemptsEnabled !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsMultipleAttemptsEnabled, "boolean");
        }

        if (quizQuizSettingsMultipleAttemptsAttemptLimit !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][attempt_limit]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsAttemptLimit, "boolean");
        }

        if (quizQuizSettingsMultipleAttemptsMaxAttempts !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][max_attempts]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsMaxAttempts, "any");
        }

        if (quizQuizSettingsMultipleAttemptsScoreToKeep !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][score_to_keep]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsScoreToKeep, "string");
        }

        if (quizQuizSettingsMultipleAttemptsCoolingPeriod !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][cooling_period]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsCoolingPeriod, "boolean");
        }

        if (quizQuizSettingsMultipleAttemptsCoolingPeriodSeconds !== undefined) {
            localVarFormParams['quiz[quiz_settings][multiple_attempts][cooling_period_seconds]'] = ObjectSerializer.serialize(quizQuizSettingsMultipleAttemptsCoolingPeriodSeconds, "any");
        }

        if (quizQuizSettingsOneAtATimeType !== undefined) {
            localVarFormParams['quiz[quiz_settings][one_at_a_time_type]'] = ObjectSerializer.serialize(quizQuizSettingsOneAtATimeType, "string");
        }

        if (quizQuizSettingsAllowBacktracking !== undefined) {
            localVarFormParams['quiz[quiz_settings][allow_backtracking]'] = ObjectSerializer.serialize(quizQuizSettingsAllowBacktracking, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsResultViewRestricted !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][result_view_restricted]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsResultViewRestricted, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayPointsAwarded !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_points_awarded]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayPointsAwarded, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayPointsPossible !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_points_possible]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayPointsPossible, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItems !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_items]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItems, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemResponse !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_response]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemResponse, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemResponseQualifier !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_response_qualifier]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemResponseQualifier, "string");
        }

        if (quizQuizSettingsResultViewSettingsShowItemResponsesAt !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][show_item_responses_at]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsShowItemResponsesAt, "Date");
        }

        if (quizQuizSettingsResultViewSettingsHideItemResponsesAt !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][hide_item_responses_at]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsHideItemResponsesAt, "Date");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectness !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_response_correctness]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectness, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectnessQualifier !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_response_correctness_qualifier]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemResponseCorrectnessQualifier, "string");
        }

        if (quizQuizSettingsResultViewSettingsShowItemResponseCorrectnessAt !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][show_item_response_correctness_at]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsShowItemResponseCorrectnessAt, "Date");
        }

        if (quizQuizSettingsResultViewSettingsHideItemResponseCorrectnessAt !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][hide_item_response_correctness_at]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsHideItemResponseCorrectnessAt, "Date");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemCorrectAnswer !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_correct_answer]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemCorrectAnswer, "boolean");
        }

        if (quizQuizSettingsResultViewSettingsDisplayItemFeedback !== undefined) {
            localVarFormParams['quiz[quiz_settings][result_view_settings][display_item_feedback]'] = ObjectSerializer.serialize(quizQuizSettingsResultViewSettingsDisplayItemFeedback, "boolean");
        }

        if (quizQuizSettingsShuffleAnswers !== undefined) {
            localVarFormParams['quiz[quiz_settings][shuffle_answers]'] = ObjectSerializer.serialize(quizQuizSettingsShuffleAnswers, "boolean");
        }

        if (quizQuizSettingsShuffleQuestions !== undefined) {
            localVarFormParams['quiz[quiz_settings][shuffle_questions]'] = ObjectSerializer.serialize(quizQuizSettingsShuffleQuestions, "boolean");
        }

        if (quizQuizSettingsRequireStudentAccessCode !== undefined) {
            localVarFormParams['quiz[quiz_settings][require_student_access_code]'] = ObjectSerializer.serialize(quizQuizSettingsRequireStudentAccessCode, "boolean");
        }

        if (quizQuizSettingsStudentAccessCode !== undefined) {
            localVarFormParams['quiz[quiz_settings][student_access_code]'] = ObjectSerializer.serialize(quizQuizSettingsStudentAccessCode, "string");
        }

        if (quizQuizSettingsHasTimeLimit !== undefined) {
            localVarFormParams['quiz[quiz_settings][has_time_limit]'] = ObjectSerializer.serialize(quizQuizSettingsHasTimeLimit, "boolean");
        }

        if (quizQuizSettingsSessionTimeLimitInSeconds !== undefined) {
            localVarFormParams['quiz[quiz_settings][session_time_limit_in_seconds]'] = ObjectSerializer.serialize(quizQuizSettingsSessionTimeLimitInSeconds, "any");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: NewQuiz;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "NewQuiz");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
