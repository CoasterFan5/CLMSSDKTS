/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { Quiz } from '../model/quiz';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum QuizzesApiApiKeys {
}

export class QuizzesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: QuizzesApiApiKeys, value: string) {
        (this.authentications as any)[QuizzesApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Create a new quiz for this course.
     * @summary Create a quiz
     * @param courseId ID
     * @param quizTitle The quiz title.
     * @param quizDescription A description of the quiz.
     * @param quizQuizType The type of quiz.
     * @param quizAssignmentGroupId The assignment group id to put the assignment in. Defaults to the top assignment group in the course. Only valid if the quiz is graded, i.e. if quiz_type is \\\&quot;assignment\\\&quot; or \\\&quot;graded_survey\\\&quot;.
     * @param quizTimeLimit Time limit to take this quiz, in minutes. Set to null for no time limit. Defaults to null.
     * @param quizShuffleAnswers If true, quiz answers for multiple choice questions will be randomized for each student. Defaults to false.
     * @param quizHideResults Dictates whether or not quiz results are hidden from students. If null, students can see their results after any attempt. If \\\&quot;always\\\&quot;, students can never see their results. If \\\&quot;until_after_last_attempt\\\&quot;, students can only see results after their last attempt. (Only valid if allowed_attempts &gt; 1). Defaults to null.
     * @param quizShowCorrectAnswers Only valid if hide_results&#x3D;null If false, hides correct answers from students when quiz results are viewed. Defaults to true.
     * @param quizShowCorrectAnswersLastAttempt Only valid if show_correct_answers&#x3D;true and allowed_attempts &gt; 1 If true, hides correct answers from students when quiz results are viewed until they submit the last attempt for the quiz. Defaults to false.
     * @param quizShowCorrectAnswersAt Only valid if show_correct_answers&#x3D;true If set, the correct answers will be visible by students only after this date, otherwise the correct answers are visible once the student hands in their quiz submission.
     * @param quizHideCorrectAnswersAt Only valid if show_correct_answers&#x3D;true If set, the correct answers will stop being visible once this date has passed. Otherwise, the correct answers will be visible indefinitely.
     * @param quizAllowedAttempts Number of times a student is allowed to take a quiz. Set to -1 for unlimited attempts. Defaults to 1.
     * @param quizScoringPolicy Required and only valid if allowed_attempts &gt; 1. Scoring policy for a quiz that students can take multiple times. Defaults to \\\&quot;keep_highest\\\&quot;.
     * @param quizOneQuestionAtATime If true, shows quiz to student one question at a time. Defaults to false.
     * @param quizCantGoBack Only valid if one_question_at_a_time&#x3D;true If true, questions are locked after answering. Defaults to false.
     * @param quizAccessCode Restricts access to the quiz with a password. For no access code restriction, set to null. Defaults to null.
     * @param quizIpFilter Restricts access to the quiz to computers in a specified IP range. Filters can be a comma-separated list of addresses, or an address followed by a mask  Examples:   \\\&quot;192.168.217.1\\\&quot;   \\\&quot;192.168.217.1/24\\\&quot;   \\\&quot;192.168.217.1/255.255.255.0\\\&quot;  For no IP filter restriction, set to null. Defaults to null.
     * @param quizDueAt The day/time the quiz is due. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
     * @param quizLockAt The day/time the quiz is locked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
     * @param quizUnlockAt The day/time the quiz is unlocked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
     * @param quizPublished Whether the quiz should have a draft state of published or unpublished. NOTE: If students have started taking the quiz, or there are any submissions for the quiz, you may not unpublish a quiz and will recieve an error.
     * @param quizOneTimeResults Whether students should be prevented from viewing their quiz results past the first time (right after they turn the quiz in.) Only valid if \\\&quot;hide_results\\\&quot; is not set to \\\&quot;always\\\&quot;. Defaults to false.
     * @param quizOnlyVisibleToOverrides Whether this quiz is only visible to overrides (Only useful if \\\&#39;differentiated assignments\\\&#39; account setting is on) Defaults to false.
     */
    public async createQuiz (courseId: string, quizTitle: string, quizDescription?: string, quizQuizType?: string, quizAssignmentGroupId?: number, quizTimeLimit?: number, quizShuffleAnswers?: boolean, quizHideResults?: string, quizShowCorrectAnswers?: boolean, quizShowCorrectAnswersLastAttempt?: boolean, quizShowCorrectAnswersAt?: Date, quizHideCorrectAnswersAt?: Date, quizAllowedAttempts?: number, quizScoringPolicy?: string, quizOneQuestionAtATime?: boolean, quizCantGoBack?: boolean, quizAccessCode?: string, quizIpFilter?: string, quizDueAt?: Date, quizLockAt?: Date, quizUnlockAt?: Date, quizPublished?: boolean, quizOneTimeResults?: boolean, quizOnlyVisibleToOverrides?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Quiz;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/quizzes'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling createQuiz.');
        }

        // verify required parameter 'quizTitle' is not null or undefined
        if (quizTitle === null || quizTitle === undefined) {
            throw new Error('Required parameter quizTitle was null or undefined when calling createQuiz.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (quizTitle !== undefined) {
            localVarFormParams['quiz[title]'] = ObjectSerializer.serialize(quizTitle, "string");
        }

        if (quizDescription !== undefined) {
            localVarFormParams['quiz[description]'] = ObjectSerializer.serialize(quizDescription, "string");
        }

        if (quizQuizType !== undefined) {
            localVarFormParams['quiz[quiz_type]'] = ObjectSerializer.serialize(quizQuizType, "string");
        }

        if (quizAssignmentGroupId !== undefined) {
            localVarFormParams['quiz[assignment_group_id]'] = ObjectSerializer.serialize(quizAssignmentGroupId, "number");
        }

        if (quizTimeLimit !== undefined) {
            localVarFormParams['quiz[time_limit]'] = ObjectSerializer.serialize(quizTimeLimit, "number");
        }

        if (quizShuffleAnswers !== undefined) {
            localVarFormParams['quiz[shuffle_answers]'] = ObjectSerializer.serialize(quizShuffleAnswers, "boolean");
        }

        if (quizHideResults !== undefined) {
            localVarFormParams['quiz[hide_results]'] = ObjectSerializer.serialize(quizHideResults, "string");
        }

        if (quizShowCorrectAnswers !== undefined) {
            localVarFormParams['quiz[show_correct_answers]'] = ObjectSerializer.serialize(quizShowCorrectAnswers, "boolean");
        }

        if (quizShowCorrectAnswersLastAttempt !== undefined) {
            localVarFormParams['quiz[show_correct_answers_last_attempt]'] = ObjectSerializer.serialize(quizShowCorrectAnswersLastAttempt, "boolean");
        }

        if (quizShowCorrectAnswersAt !== undefined) {
            localVarFormParams['quiz[show_correct_answers_at]'] = ObjectSerializer.serialize(quizShowCorrectAnswersAt, "Date");
        }

        if (quizHideCorrectAnswersAt !== undefined) {
            localVarFormParams['quiz[hide_correct_answers_at]'] = ObjectSerializer.serialize(quizHideCorrectAnswersAt, "Date");
        }

        if (quizAllowedAttempts !== undefined) {
            localVarFormParams['quiz[allowed_attempts]'] = ObjectSerializer.serialize(quizAllowedAttempts, "number");
        }

        if (quizScoringPolicy !== undefined) {
            localVarFormParams['quiz[scoring_policy]'] = ObjectSerializer.serialize(quizScoringPolicy, "string");
        }

        if (quizOneQuestionAtATime !== undefined) {
            localVarFormParams['quiz[one_question_at_a_time]'] = ObjectSerializer.serialize(quizOneQuestionAtATime, "boolean");
        }

        if (quizCantGoBack !== undefined) {
            localVarFormParams['quiz[cant_go_back]'] = ObjectSerializer.serialize(quizCantGoBack, "boolean");
        }

        if (quizAccessCode !== undefined) {
            localVarFormParams['quiz[access_code]'] = ObjectSerializer.serialize(quizAccessCode, "string");
        }

        if (quizIpFilter !== undefined) {
            localVarFormParams['quiz[ip_filter]'] = ObjectSerializer.serialize(quizIpFilter, "string");
        }

        if (quizDueAt !== undefined) {
            localVarFormParams['quiz[due_at]'] = ObjectSerializer.serialize(quizDueAt, "Date");
        }

        if (quizLockAt !== undefined) {
            localVarFormParams['quiz[lock_at]'] = ObjectSerializer.serialize(quizLockAt, "Date");
        }

        if (quizUnlockAt !== undefined) {
            localVarFormParams['quiz[unlock_at]'] = ObjectSerializer.serialize(quizUnlockAt, "Date");
        }

        if (quizPublished !== undefined) {
            localVarFormParams['quiz[published]'] = ObjectSerializer.serialize(quizPublished, "boolean");
        }

        if (quizOneTimeResults !== undefined) {
            localVarFormParams['quiz[one_time_results]'] = ObjectSerializer.serialize(quizOneTimeResults, "boolean");
        }

        if (quizOnlyVisibleToOverrides !== undefined) {
            localVarFormParams['quiz[only_visible_to_overrides]'] = ObjectSerializer.serialize(quizOnlyVisibleToOverrides, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Quiz;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Quiz");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Delete a quiz
     * @param courseId ID
     * @param id ID
     */
    public async deleteQuiz (courseId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Quiz;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/quizzes/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling deleteQuiz.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteQuiz.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Quiz;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Quiz");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Modify an existing quiz. See the documentation for quiz creation.  Additional arguments:
     * @summary Edit a quiz
     * @param courseId ID
     * @param id ID
     * @param quizNotifyOfUpdate If true, notifies users that the quiz has changed. Defaults to true
     */
    public async editQuiz (courseId: string, id: string, quizNotifyOfUpdate?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Quiz;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/quizzes/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling editQuiz.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editQuiz.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (quizNotifyOfUpdate !== undefined) {
            localVarFormParams['quiz[notify_of_update]'] = ObjectSerializer.serialize(quizNotifyOfUpdate, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Quiz;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Quiz");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the quiz with the given id.
     * @summary Get a single quiz
     * @param courseId ID
     * @param id ID
     */
    public async getSingleQuiz (courseId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Quiz;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/quizzes/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getSingleQuiz.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSingleQuiz.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Quiz;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Quiz");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the paginated list of Quizzes in this course.
     * @summary List quizzes in a course
     * @param courseId ID
     * @param searchTerm The partial title of the quizzes to match and return.
     */
    public async listQuizzesInCourse (courseId: string, searchTerm?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<Quiz>;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/quizzes'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listQuizzesInCourse.');
        }

        if (searchTerm !== undefined) {
            localVarQueryParameters['search_term'] = ObjectSerializer.serialize(searchTerm, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<Quiz>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<Quiz>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Change order of the quiz questions or groups within the quiz  <b>204 No Content</b> response code is returned if the reorder was successful.
     * @summary Reorder quiz items
     * @param courseId ID
     * @param id ID
     * @param orderId The associated item\\\&#39;s unique identifier
     * @param orderType The type of item is either \\\&#39;question\\\&#39; or \\\&#39;group\\\&#39;
     */
    public async reorderQuizItems (courseId: string, id: string, orderId: Array<number>, orderType?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/quizzes/{id}/reorder'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling reorderQuizItems.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling reorderQuizItems.');
        }

        // verify required parameter 'orderId' is not null or undefined
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling reorderQuizItems.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (orderId !== undefined) {
            localVarFormParams['order[id]'] = ObjectSerializer.serialize(orderId, "Array<number>");
        }

        if (orderType !== undefined) {
            localVarFormParams['order[type]'] = ObjectSerializer.serialize(orderType, "Array<string>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Accepts an access code and returns a boolean indicating whether that access code is correct
     * @summary Validate quiz access code
     * @param courseId ID
     * @param id ID
     * @param accessCode The access code being validated
     */
    public async validateQuizAccessCode (courseId: string, id: string, accessCode: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: boolean;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/quizzes/{id}/validate_access_code'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling validateQuizAccessCode.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling validateQuizAccessCode.');
        }

        // verify required parameter 'accessCode' is not null or undefined
        if (accessCode === null || accessCode === undefined) {
            throw new Error('Required parameter accessCode was null or undefined when calling validateQuizAccessCode.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (accessCode !== undefined) {
            localVarFormParams['access_code'] = ObjectSerializer.serialize(accessCode, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: boolean;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "boolean");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
