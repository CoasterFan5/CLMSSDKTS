/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { QuizItem } from '../model/quizItem';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum NewQuizItemsApiApiKeys {
}

export class NewQuizItemsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: NewQuizItemsApiApiKeys, value: string) {
        (this.authentications as any)[NewQuizItemsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Create a quiz item in a new quiz. Only +QuestionItem+ types can be created.
     * @summary Create a quiz item
     * @param courseId no description
     * @param assignmentId The id of the assignment associated with the quiz.
     * @param itemEntryType The type of the item.
     * @param itemEntryItemBody The question stem (rich content).
     * @param itemEntryInteractionTypeSlug The type of question. One of \\\&#39;multi-answer\\\&#39;, \\\&#39;matching\\\&#39;, \\\&#39;categorization\\\&#39;, \\\&#39;file-upload\\\&#39;, \\\&#39;formula\\\&#39;, \\\&#39;ordering\\\&#39;, \\\&#39;rich-fill-blank\\\&#39;, \\\&#39;hot-spot\\\&#39;, \\\&#39;choice\\\&#39;, \\\&#39;numeric\\\&#39;, \\\&#39;true-false\\\&#39;, or \\\&#39;essay\\\&#39;. See {Appendix: Question Types} for more info about each type.
     * @param itemEntryInteractionData An object that contains the question data. See {Appendix: Question Types} for more info about this field.
     * @param itemEntryScoringData An object that describes how to score the question. See {Appendix: Question Types} for more info about this field.
     * @param itemEntryScoringAlgorithm The algorithm used to score the question. See {Appendix: Question Types} for more info about this field.
     * @param itemPosition The position of the item within the quiz.
     * @param itemPointsPossible The number of points available to score on this item. Must be positive.
     * @param itemEntryTitle The question title.
     * @param itemEntryCalculatorType Type of calculator the user will have access to during the question.
     * @param itemEntryFeedbackNeutral General feedback to show regardless of answer (rich content).
     * @param itemEntryFeedbackCorrect Feedback to show if the question is answered correctly (rich content).
     * @param itemEntryFeedbackIncorrect Feedback to show if the question is answered incorrectly (rich content).
     * @param itemEntryProperties An object that contains additional properties for some question types. See {Appendix: Question Types} for more info about this field.
     * @param itemEntryAnswerFeedback Feedback provided for each answer (rich content, only available on \\\&#39;choice\\\&#39; question types).
     */
    public async createQuizItem (courseId: number, assignmentId: number, itemEntryType: string, itemEntryItemBody: string, itemEntryInteractionTypeSlug: string, itemEntryInteractionData: object, itemEntryScoringData: object, itemEntryScoringAlgorithm: string, itemPosition?: number, itemPointsPossible?: number, itemEntryTitle?: string, itemEntryCalculatorType?: string, itemEntryFeedbackNeutral?: string, itemEntryFeedbackCorrect?: string, itemEntryFeedbackIncorrect?: string, itemEntryProperties?: object, itemEntryAnswerFeedback?: object, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: QuizItem;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling createQuizItem.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling createQuizItem.');
        }

        // verify required parameter 'itemEntryType' is not null or undefined
        if (itemEntryType === null || itemEntryType === undefined) {
            throw new Error('Required parameter itemEntryType was null or undefined when calling createQuizItem.');
        }

        // verify required parameter 'itemEntryItemBody' is not null or undefined
        if (itemEntryItemBody === null || itemEntryItemBody === undefined) {
            throw new Error('Required parameter itemEntryItemBody was null or undefined when calling createQuizItem.');
        }

        // verify required parameter 'itemEntryInteractionTypeSlug' is not null or undefined
        if (itemEntryInteractionTypeSlug === null || itemEntryInteractionTypeSlug === undefined) {
            throw new Error('Required parameter itemEntryInteractionTypeSlug was null or undefined when calling createQuizItem.');
        }

        // verify required parameter 'itemEntryInteractionData' is not null or undefined
        if (itemEntryInteractionData === null || itemEntryInteractionData === undefined) {
            throw new Error('Required parameter itemEntryInteractionData was null or undefined when calling createQuizItem.');
        }

        // verify required parameter 'itemEntryScoringData' is not null or undefined
        if (itemEntryScoringData === null || itemEntryScoringData === undefined) {
            throw new Error('Required parameter itemEntryScoringData was null or undefined when calling createQuizItem.');
        }

        // verify required parameter 'itemEntryScoringAlgorithm' is not null or undefined
        if (itemEntryScoringAlgorithm === null || itemEntryScoringAlgorithm === undefined) {
            throw new Error('Required parameter itemEntryScoringAlgorithm was null or undefined when calling createQuizItem.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (itemPosition !== undefined) {
            localVarFormParams['item[position]'] = ObjectSerializer.serialize(itemPosition, "number");
        }

        if (itemPointsPossible !== undefined) {
            localVarFormParams['item[points_possible]'] = ObjectSerializer.serialize(itemPointsPossible, "number");
        }

        if (itemEntryType !== undefined) {
            localVarFormParams['item[entry_type]'] = ObjectSerializer.serialize(itemEntryType, "string");
        }

        if (itemEntryTitle !== undefined) {
            localVarFormParams['item[entry][title]'] = ObjectSerializer.serialize(itemEntryTitle, "string");
        }

        if (itemEntryItemBody !== undefined) {
            localVarFormParams['item[entry][item_body]'] = ObjectSerializer.serialize(itemEntryItemBody, "string");
        }

        if (itemEntryCalculatorType !== undefined) {
            localVarFormParams['item[entry][calculator_type]'] = ObjectSerializer.serialize(itemEntryCalculatorType, "string");
        }

        if (itemEntryFeedbackNeutral !== undefined) {
            localVarFormParams['item[entry][feedback][neutral]'] = ObjectSerializer.serialize(itemEntryFeedbackNeutral, "string");
        }

        if (itemEntryFeedbackCorrect !== undefined) {
            localVarFormParams['item[entry][feedback][correct]'] = ObjectSerializer.serialize(itemEntryFeedbackCorrect, "string");
        }

        if (itemEntryFeedbackIncorrect !== undefined) {
            localVarFormParams['item[entry][feedback][incorrect]'] = ObjectSerializer.serialize(itemEntryFeedbackIncorrect, "string");
        }

        if (itemEntryInteractionTypeSlug !== undefined) {
            localVarFormParams['item[entry][interaction_type_slug]'] = ObjectSerializer.serialize(itemEntryInteractionTypeSlug, "string");
        }

        if (itemEntryInteractionData !== undefined) {
            localVarFormParams['item[entry][interaction_data]'] = ObjectSerializer.serialize(itemEntryInteractionData, "object");
        }

        if (itemEntryProperties !== undefined) {
            localVarFormParams['item[entry][properties]'] = ObjectSerializer.serialize(itemEntryProperties, "object");
        }

        if (itemEntryScoringData !== undefined) {
            localVarFormParams['item[entry][scoring_data]'] = ObjectSerializer.serialize(itemEntryScoringData, "object");
        }

        if (itemEntryAnswerFeedback !== undefined) {
            localVarFormParams['item[entry][answer_feedback]'] = ObjectSerializer.serialize(itemEntryAnswerFeedback, "object");
        }

        if (itemEntryScoringAlgorithm !== undefined) {
            localVarFormParams['item[entry][scoring_algorithm]'] = ObjectSerializer.serialize(itemEntryScoringAlgorithm, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: QuizItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "QuizItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete a single quiz item in a new quiz.
     * @summary Delete a quiz item
     * @param courseId no description
     * @param assignmentId The id of the assignment associated with the quiz.
     * @param itemId The id of the item associated with the quiz.
     */
    public async deleteQuizItem (courseId: number, assignmentId: number, itemId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: QuizItem;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/{item_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)))
            .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling deleteQuizItem.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling deleteQuizItem.');
        }

        // verify required parameter 'itemId' is not null or undefined
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling deleteQuizItem.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: QuizItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "QuizItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get a url for uploading media for use in hot-spot question types. See the hot-spot question type in the {Appendix: Question Types} for more details about using this endpoint.
     * @summary Get items media_upload_url
     * @param courseId no description
     * @param assignmentId no description
     */
    public async getItemsMediaUploadUrl (courseId: number, assignmentId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/media_upload_url'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getItemsMediaUploadUrl.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling getItemsMediaUploadUrl.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get details about a single item in a new quiz.
     * @summary Get a quiz item
     * @param courseId no description
     * @param assignmentId The id of the assignment associated with the quiz.
     * @param itemId The id of the item associated with the quiz.
     */
    public async getQuizItem (courseId: number, assignmentId: number, itemId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: QuizItem;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/{item_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)))
            .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getQuizItem.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling getQuizItem.');
        }

        // verify required parameter 'itemId' is not null or undefined
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getQuizItem.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: QuizItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "QuizItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get a list of items in a new quiz.
     * @summary List quiz items
     * @param courseId no description
     * @param assignmentId no description
     */
    public async listQuizItems (courseId: number, assignmentId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<QuizItem>;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listQuizItems.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling listQuizItems.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<QuizItem>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<QuizItem>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update a single quiz item in a new quiz. Only +QuestionItem+ types can be updated.
     * @summary Update a quiz item
     * @param courseId no description
     * @param assignmentId The id of the assignment associated with the quiz.
     * @param itemId The id of the item associated with the quiz.
     * @param itemPosition The position of the item within the quiz.
     * @param itemPointsPossible The number of points available to score on this item. Must be positive.
     * @param itemEntryType The type of the item.
     * @param itemEntryTitle The question title.
     * @param itemEntryItemBody The question stem (rich content).
     * @param itemEntryCalculatorType Type of calculator the user will have access to during the question.
     * @param itemEntryFeedbackNeutral General feedback to show regardless of answer (rich content).
     * @param itemEntryFeedbackCorrect Feedback to show if the question is answered correctly (rich content).
     * @param itemEntryFeedbackIncorrect Feedback to show if the question is answered incorrectly (rich content).
     * @param itemEntryInteractionTypeSlug The type of question. One of \\\&#39;multi-answer\\\&#39;, \\\&#39;matching\\\&#39;, \\\&#39;categorization\\\&#39;, \\\&#39;file-upload\\\&#39;, \\\&#39;formula\\\&#39;, \\\&#39;ordering\\\&#39;, \\\&#39;rich-fill-blank\\\&#39;, \\\&#39;hot-spot\\\&#39;, \\\&#39;choice\\\&#39;, \\\&#39;numeric\\\&#39;, \\\&#39;true-false\\\&#39;, or \\\&#39;essay\\\&#39;. See {Appendix: Question Types} for more info about each type.
     * @param itemEntryInteractionData An object that contains the question data. See {Appendix: Question Types} for more info about this field.
     * @param itemEntryProperties An object that contains additional properties for some question types. See {Appendix: Question Types} for more info about this field.
     * @param itemEntryScoringData An object that describes how to score the question. See {Appendix: Question Types} for more info about this field.
     * @param itemEntryAnswerFeedback Feedback provided for each answer (rich content, only available on \\\&#39;choice\\\&#39; question types).
     * @param itemEntryScoringAlgorithm The algorithm used to score the question. See {Appendix: Question Types} for more info about this field.
     */
    public async updateQuizItem (courseId: number, assignmentId: number, itemId: number, itemPosition?: number, itemPointsPossible?: number, itemEntryType?: string, itemEntryTitle?: string, itemEntryItemBody?: string, itemEntryCalculatorType?: string, itemEntryFeedbackNeutral?: string, itemEntryFeedbackCorrect?: string, itemEntryFeedbackIncorrect?: string, itemEntryInteractionTypeSlug?: string, itemEntryInteractionData?: object, itemEntryProperties?: object, itemEntryScoringData?: object, itemEntryAnswerFeedback?: object, itemEntryScoringAlgorithm?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: QuizItem;  }> {
        const localVarPath = this.basePath + '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/{item_id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'assignment_id' + '}', encodeURIComponent(String(assignmentId)))
            .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling updateQuizItem.');
        }

        // verify required parameter 'assignmentId' is not null or undefined
        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling updateQuizItem.');
        }

        // verify required parameter 'itemId' is not null or undefined
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling updateQuizItem.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (itemPosition !== undefined) {
            localVarFormParams['item[position]'] = ObjectSerializer.serialize(itemPosition, "number");
        }

        if (itemPointsPossible !== undefined) {
            localVarFormParams['item[points_possible]'] = ObjectSerializer.serialize(itemPointsPossible, "number");
        }

        if (itemEntryType !== undefined) {
            localVarFormParams['item[entry_type]'] = ObjectSerializer.serialize(itemEntryType, "string");
        }

        if (itemEntryTitle !== undefined) {
            localVarFormParams['item[entry][title]'] = ObjectSerializer.serialize(itemEntryTitle, "string");
        }

        if (itemEntryItemBody !== undefined) {
            localVarFormParams['item[entry][item_body]'] = ObjectSerializer.serialize(itemEntryItemBody, "string");
        }

        if (itemEntryCalculatorType !== undefined) {
            localVarFormParams['item[entry][calculator_type]'] = ObjectSerializer.serialize(itemEntryCalculatorType, "string");
        }

        if (itemEntryFeedbackNeutral !== undefined) {
            localVarFormParams['item[entry][feedback][neutral]'] = ObjectSerializer.serialize(itemEntryFeedbackNeutral, "string");
        }

        if (itemEntryFeedbackCorrect !== undefined) {
            localVarFormParams['item[entry][feedback][correct]'] = ObjectSerializer.serialize(itemEntryFeedbackCorrect, "string");
        }

        if (itemEntryFeedbackIncorrect !== undefined) {
            localVarFormParams['item[entry][feedback][incorrect]'] = ObjectSerializer.serialize(itemEntryFeedbackIncorrect, "string");
        }

        if (itemEntryInteractionTypeSlug !== undefined) {
            localVarFormParams['item[entry][interaction_type_slug]'] = ObjectSerializer.serialize(itemEntryInteractionTypeSlug, "string");
        }

        if (itemEntryInteractionData !== undefined) {
            localVarFormParams['item[entry][interaction_data]'] = ObjectSerializer.serialize(itemEntryInteractionData, "object");
        }

        if (itemEntryProperties !== undefined) {
            localVarFormParams['item[entry][properties]'] = ObjectSerializer.serialize(itemEntryProperties, "object");
        }

        if (itemEntryScoringData !== undefined) {
            localVarFormParams['item[entry][scoring_data]'] = ObjectSerializer.serialize(itemEntryScoringData, "object");
        }

        if (itemEntryAnswerFeedback !== undefined) {
            localVarFormParams['item[entry][answer_feedback]'] = ObjectSerializer.serialize(itemEntryAnswerFeedback, "object");
        }

        if (itemEntryScoringAlgorithm !== undefined) {
            localVarFormParams['item[entry][scoring_algorithm]'] = ObjectSerializer.serialize(itemEntryScoringAlgorithm, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: QuizItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "QuizItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
