/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { Course } from '../model/course';
import { CourseProgress } from '../model/courseProgress';
import { Progress } from '../model/progress';
import { User } from '../model/user';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CoursesApiApiKeys {
}

export class CoursesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: CoursesApiApiKeys, value: string) {
        (this.authentications as any)[CoursesApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}  Copies content from one course into another. The default is to copy all course content. You can control specific types to copy by using either the \'except\' option or the \'only\' option.  The response is the same as the course copy status endpoint
     * @summary Copy course content
     * @param courseId ID
     * @param sourceCourse ID or SIS-ID of the course to copy the content from
     * @param except A list of the course content types to exclude, all areas not listed will be copied.
     * @param only A list of the course content types to copy, all areas not listed will not be copied.
     */
    public async copyCourseContent (courseId: string, sourceCourse?: string, except?: Array<string>, only?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/course_copy'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling copyCourseContent.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (sourceCourse !== undefined) {
            localVarFormParams['source_course'] = ObjectSerializer.serialize(sourceCourse, "string");
        }

        if (except !== undefined) {
            localVarFormParams['except'] = ObjectSerializer.serialize(except, "Array<string>");
        }

        if (only !== undefined) {
            localVarFormParams['only'] = ObjectSerializer.serialize(only, "Array<string>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the current user\'s course-specific activity stream, paginated.  For full documentation, see the API documentation for the user activity stream, in the user api.
     * @summary Course activity stream
     * @param courseId ID
     */
    public async courseActivityStream (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/activity_stream'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling courseActivityStream.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a summary of the current user\'s course-specific activity stream.  For full documentation, see the API documentation for the user activity stream summary, in the user api.
     * @summary Course activity stream summary
     * @param courseId ID
     */
    public async courseActivityStreamSummary (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/activity_stream/summary'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling courseActivityStreamSummary.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the current user\'s course-specific todo items.  For full documentation, see the API documentation for the user todo items, in the user api.
     * @summary Course TODO items
     * @param courseId ID
     */
    public async courseTodoItems (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/todo'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling courseTodoItems.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a new course
     * @summary Create a new course
     * @param accountId ID
     * @param courseName The name of the course. If omitted, the course will be named \\\&quot;Unnamed Course.\\\&quot;
     * @param courseCourseCode The course code for the course.
     * @param courseStartAt Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless \\\&#39;restrict_enrollments_to_course_dates\\\&#39; is set to true.
     * @param courseEndAt Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless \\\&#39;restrict_enrollments_to_course_dates\\\&#39; is set to true.
     * @param courseLicense The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference): - \\\&#39;private\\\&#39; (Private Copyrighted) - \\\&#39;cc_by_nc_nd\\\&#39; (CC Attribution Non-Commercial No Derivatives) - \\\&#39;cc_by_nc_sa\\\&#39; (CC Attribution Non-Commercial Share Alike) - \\\&#39;cc_by_nc\\\&#39; (CC Attribution Non-Commercial) - \\\&#39;cc_by_nd\\\&#39; (CC Attribution No Derivatives) - \\\&#39;cc_by_sa\\\&#39; (CC Attribution Share Alike) - \\\&#39;cc_by\\\&#39; (CC Attribution) - \\\&#39;public_domain\\\&#39; (Public Domain).
     * @param courseIsPublic Set to true if course is public to both authenticated and unauthenticated users.
     * @param courseIsPublicToAuthUsers Set to true if course is public only to authenticated users.
     * @param coursePublicSyllabus Set to true to make the course syllabus public.
     * @param coursePublicSyllabusToAuth Set to true to make the course syllabus public for authenticated users.
     * @param coursePublicDescription A publicly visible description of the course.
     * @param courseAllowStudentWikiEdits If true, students will be able to modify the course wiki.
     * @param courseAllowWikiComments If true, course members will be able to comment on wiki pages.
     * @param courseAllowStudentForumAttachments If true, students can attach files to forum posts.
     * @param courseOpenEnrollment Set to true if the course is open enrollment.
     * @param courseSelfEnrollment Set to true if the course is self enrollment.
     * @param courseRestrictEnrollmentsToCourseDates Set to true to restrict user enrollments to the start and end dates of the course. This value must be set to true in order to specify a course start date and/or end date.
     * @param courseTermId The unique ID of the term to create to course in.
     * @param courseSisCourseId The unique SIS identifier.
     * @param courseIntegrationId The unique Integration identifier.
     * @param courseHideFinalGrades If this option is set to true, the totals in student grades summary will be hidden.
     * @param courseApplyAssignmentGroupWeights Set to true to weight final grade based on assignment groups percentages.
     * @param courseTimeZone The time zone for the course. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.
     * @param offer If this option is set to true, the course will be available to students immediately.
     * @param enrollMe Set to true to enroll the current user as the teacher.
     * @param courseDefaultView The type of page that users will see when they first visit the course * \\\&#39;feed\\\&#39; Recent Activity Dashboard * \\\&#39;modules\\\&#39; Course Modules/Sections Page * \\\&#39;assignments\\\&#39; Course Assignments List * \\\&#39;syllabus\\\&#39; Course Syllabus Page other types may be added in the future
     * @param courseSyllabusBody The syllabus body for the course
     * @param courseGradingStandardId The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.
     * @param courseGradePassbackSetting Optional. The grade_passback_setting for the course. Only \\\&#39;nightly_sync\\\&#39;, \\\&#39;disabled\\\&#39;, and \\\&#39;\\\&#39; are allowed
     * @param courseCourseFormat Optional. Specifies the format of the course. (Should be \\\&#39;on_campus\\\&#39;, \\\&#39;online\\\&#39;, or \\\&#39;blended\\\&#39;)
     * @param coursePostManually Default is false. When true, all grades in the course must be posted manually, and will not be automatically posted. When false, all grades in the course will be automatically posted.
     * @param enableSisReactivation When true, will first try to re-activate a deleted course with matching sis_course_id if possible.
     */
    public async createNewCourse (accountId: string, courseName?: string, courseCourseCode?: string, courseStartAt?: Date, courseEndAt?: Date, courseLicense?: string, courseIsPublic?: boolean, courseIsPublicToAuthUsers?: boolean, coursePublicSyllabus?: boolean, coursePublicSyllabusToAuth?: boolean, coursePublicDescription?: string, courseAllowStudentWikiEdits?: boolean, courseAllowWikiComments?: boolean, courseAllowStudentForumAttachments?: boolean, courseOpenEnrollment?: boolean, courseSelfEnrollment?: boolean, courseRestrictEnrollmentsToCourseDates?: boolean, courseTermId?: string, courseSisCourseId?: string, courseIntegrationId?: string, courseHideFinalGrades?: boolean, courseApplyAssignmentGroupWeights?: boolean, courseTimeZone?: string, offer?: boolean, enrollMe?: boolean, courseDefaultView?: string, courseSyllabusBody?: string, courseGradingStandardId?: number, courseGradePassbackSetting?: string, courseCourseFormat?: string, coursePostManually?: boolean, enableSisReactivation?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Course;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/courses'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling createNewCourse.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (courseName !== undefined) {
            localVarFormParams['course[name]'] = ObjectSerializer.serialize(courseName, "string");
        }

        if (courseCourseCode !== undefined) {
            localVarFormParams['course[course_code]'] = ObjectSerializer.serialize(courseCourseCode, "string");
        }

        if (courseStartAt !== undefined) {
            localVarFormParams['course[start_at]'] = ObjectSerializer.serialize(courseStartAt, "Date");
        }

        if (courseEndAt !== undefined) {
            localVarFormParams['course[end_at]'] = ObjectSerializer.serialize(courseEndAt, "Date");
        }

        if (courseLicense !== undefined) {
            localVarFormParams['course[license]'] = ObjectSerializer.serialize(courseLicense, "string");
        }

        if (courseIsPublic !== undefined) {
            localVarFormParams['course[is_public]'] = ObjectSerializer.serialize(courseIsPublic, "boolean");
        }

        if (courseIsPublicToAuthUsers !== undefined) {
            localVarFormParams['course[is_public_to_auth_users]'] = ObjectSerializer.serialize(courseIsPublicToAuthUsers, "boolean");
        }

        if (coursePublicSyllabus !== undefined) {
            localVarFormParams['course[public_syllabus]'] = ObjectSerializer.serialize(coursePublicSyllabus, "boolean");
        }

        if (coursePublicSyllabusToAuth !== undefined) {
            localVarFormParams['course[public_syllabus_to_auth]'] = ObjectSerializer.serialize(coursePublicSyllabusToAuth, "boolean");
        }

        if (coursePublicDescription !== undefined) {
            localVarFormParams['course[public_description]'] = ObjectSerializer.serialize(coursePublicDescription, "string");
        }

        if (courseAllowStudentWikiEdits !== undefined) {
            localVarFormParams['course[allow_student_wiki_edits]'] = ObjectSerializer.serialize(courseAllowStudentWikiEdits, "boolean");
        }

        if (courseAllowWikiComments !== undefined) {
            localVarFormParams['course[allow_wiki_comments]'] = ObjectSerializer.serialize(courseAllowWikiComments, "boolean");
        }

        if (courseAllowStudentForumAttachments !== undefined) {
            localVarFormParams['course[allow_student_forum_attachments]'] = ObjectSerializer.serialize(courseAllowStudentForumAttachments, "boolean");
        }

        if (courseOpenEnrollment !== undefined) {
            localVarFormParams['course[open_enrollment]'] = ObjectSerializer.serialize(courseOpenEnrollment, "boolean");
        }

        if (courseSelfEnrollment !== undefined) {
            localVarFormParams['course[self_enrollment]'] = ObjectSerializer.serialize(courseSelfEnrollment, "boolean");
        }

        if (courseRestrictEnrollmentsToCourseDates !== undefined) {
            localVarFormParams['course[restrict_enrollments_to_course_dates]'] = ObjectSerializer.serialize(courseRestrictEnrollmentsToCourseDates, "boolean");
        }

        if (courseTermId !== undefined) {
            localVarFormParams['course[term_id]'] = ObjectSerializer.serialize(courseTermId, "string");
        }

        if (courseSisCourseId !== undefined) {
            localVarFormParams['course[sis_course_id]'] = ObjectSerializer.serialize(courseSisCourseId, "string");
        }

        if (courseIntegrationId !== undefined) {
            localVarFormParams['course[integration_id]'] = ObjectSerializer.serialize(courseIntegrationId, "string");
        }

        if (courseHideFinalGrades !== undefined) {
            localVarFormParams['course[hide_final_grades]'] = ObjectSerializer.serialize(courseHideFinalGrades, "boolean");
        }

        if (courseApplyAssignmentGroupWeights !== undefined) {
            localVarFormParams['course[apply_assignment_group_weights]'] = ObjectSerializer.serialize(courseApplyAssignmentGroupWeights, "boolean");
        }

        if (courseTimeZone !== undefined) {
            localVarFormParams['course[time_zone]'] = ObjectSerializer.serialize(courseTimeZone, "string");
        }

        if (offer !== undefined) {
            localVarFormParams['offer'] = ObjectSerializer.serialize(offer, "boolean");
        }

        if (enrollMe !== undefined) {
            localVarFormParams['enroll_me'] = ObjectSerializer.serialize(enrollMe, "boolean");
        }

        if (courseDefaultView !== undefined) {
            localVarFormParams['course[default_view]'] = ObjectSerializer.serialize(courseDefaultView, "string");
        }

        if (courseSyllabusBody !== undefined) {
            localVarFormParams['course[syllabus_body]'] = ObjectSerializer.serialize(courseSyllabusBody, "string");
        }

        if (courseGradingStandardId !== undefined) {
            localVarFormParams['course[grading_standard_id]'] = ObjectSerializer.serialize(courseGradingStandardId, "number");
        }

        if (courseGradePassbackSetting !== undefined) {
            localVarFormParams['course[grade_passback_setting]'] = ObjectSerializer.serialize(courseGradePassbackSetting, "string");
        }

        if (courseCourseFormat !== undefined) {
            localVarFormParams['course[course_format]'] = ObjectSerializer.serialize(courseCourseFormat, "string");
        }

        if (coursePostManually !== undefined) {
            localVarFormParams['course[post_manually]'] = ObjectSerializer.serialize(coursePostManually, "boolean");
        }

        if (enableSisReactivation !== undefined) {
            localVarFormParams['enable_sis_reactivation'] = ObjectSerializer.serialize(enableSisReactivation, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Course;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Course");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete or conclude an existing course
     * @summary Delete/Conclude a course
     * @param id ID
     * @param event The action to take on the course.
     */
    public async deleteConcludeCourse (id: string, event: 'delete' | 'conclude', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteConcludeCourse.');
        }

        // verify required parameter 'event' is not null or undefined
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling deleteConcludeCourse.');
        }

        if (event !== undefined) {
            localVarQueryParameters['event'] = ObjectSerializer.serialize(event, "'delete' | 'conclude'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns progress information for all users enrolled in the given course.  You must be a user who has permission to view all grades in the course (such as a teacher or administrator).
     * @summary Get bulk user progress
     * @param courseId ID
     */
    public async getBulkUserProgress (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/bulk_user_progress'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getBulkUserProgress.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}  Retrieve the status of a course copy
     * @summary Get course copy status
     * @param courseId ID
     * @param id ID
     */
    public async getCourseCopyStatus (courseId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/course_copy/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getCourseCopyStatus.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCourseCopyStatus.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns some of a course\'s settings.
     * @summary Get course settings
     * @param courseId ID
     */
    public async getCourseSettings (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/settings'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getCourseSettings.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * For each assignment in the course, returns each assigned student\'s ID and their corresponding due date along with some grading period data. Returns a collection with keys representing assignment IDs and values as a collection containing keys representing student IDs and values representing the student\'s effective due_at, the grading_period_id of which the due_at falls in, and whether or not the grading period is closed (in_closed_grading_period)  The list of assignment IDs for which effective student due dates are requested. If not provided, all assignments in the course will be used.
     * @summary Get effective due dates
     * @param courseId ID
     * @param assignmentIds no description
     */
    public async getEffectiveDueDates (courseId: string, assignmentIds?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/effective_due_dates'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getEffectiveDueDates.');
        }

        if (assignmentIds !== undefined) {
            localVarQueryParameters['assignment_ids'] = ObjectSerializer.serialize(assignmentIds, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Return information on a single course.  Accepts the same include[] parameters as the list action plus:
     * @summary Get a single course
     * @param accountId ID
     * @param id ID
     * @param include - \&quot;all_courses\&quot;: Also search recently deleted courses. - \&quot;permissions\&quot;: Include permissions the current user has   for the course. - \&quot;observed_users\&quot;: Include observed users in the enrollments - \&quot;course_image\&quot;: Include course image url if a course image has been set - \&quot;banner_image\&quot;: Include course banner image url if the course is a Canvas for   Elementary subject and a banner image has been set - \&quot;concluded\&quot;: Optional information to include with Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \&quot;lti_context_id\&quot;: Include course LTI tool id. - \&quot;post_manually\&quot;: Include course post policy. If the post policy is manually post grades,   the value will be true. If the post policy is automatically post grades, the value will be false.
     * @param teacherLimit The maximum number of teacher enrollments to show. If the course contains more teachers than this, instead of giving the teacher enrollments, the count of teachers will be given under a _teacher_count_ key.
     */
    public async getSingleCourseAccounts (accountId: string, id: string, include?: Array<string>, teacherLimit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Course;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/courses/{id}'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getSingleCourseAccounts.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSingleCourseAccounts.');
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        if (teacherLimit !== undefined) {
            localVarQueryParameters['teacher_limit'] = ObjectSerializer.serialize(teacherLimit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Course;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Course");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Return information on a single course.  Accepts the same include[] parameters as the list action plus:
     * @summary Get a single course
     * @param id ID
     * @param include - \&quot;all_courses\&quot;: Also search recently deleted courses. - \&quot;permissions\&quot;: Include permissions the current user has   for the course. - \&quot;observed_users\&quot;: Include observed users in the enrollments - \&quot;course_image\&quot;: Include course image url if a course image has been set - \&quot;banner_image\&quot;: Include course banner image url if the course is a Canvas for   Elementary subject and a banner image has been set - \&quot;concluded\&quot;: Optional information to include with Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \&quot;lti_context_id\&quot;: Include course LTI tool id. - \&quot;post_manually\&quot;: Include course post policy. If the post policy is manually post grades,   the value will be true. If the post policy is automatically post grades, the value will be false.
     * @param teacherLimit The maximum number of teacher enrollments to show. If the course contains more teachers than this, instead of giving the teacher enrollments, the count of teachers will be given under a _teacher_count_ key.
     */
    public async getSingleCourseCourses (id: string, include?: Array<string>, teacherLimit?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Course;  }> {
        const localVarPath = this.basePath + '/v1/courses/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSingleCourseCourses.');
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        if (teacherLimit !== undefined) {
            localVarQueryParameters['teacher_limit'] = ObjectSerializer.serialize(teacherLimit, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Course;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Course");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Return information on a single user.  Accepts the same include[] parameters as the :users: action, and returns a single user with the same fields as that action.
     * @summary Get single user
     * @param courseId ID
     * @param id ID
     */
    public async getSingleUser (courseId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: User;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/users/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getSingleUser.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSingleUser.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: User;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "User");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Return progress information for the user and course  You can supply +self+ as the user_id to query your own progress in a course. To query another user\'s progress, you must be a teacher in the course, an administrator, or a linked observer of the user.
     * @summary Get user progress
     * @param courseId ID
     * @param userId ID
     */
    public async getUserProgress (courseId: string, userId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CourseProgress;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/users/{user_id}/progress'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getUserProgress.');
        }

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserProgress.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CourseProgress;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CourseProgress");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.
     * @summary List courses for a user
     * @param userId ID
     * @param include - \&quot;needs_grading_count\&quot;: Optional information to include with each Course.   When needs_grading_count is given, and the current user has grading   rights, the total number of submissions needing grading for all   assignments is returned. - \&quot;syllabus_body\&quot;: Optional information to include with each Course.   When syllabus_body is given the user-generated html for the course   syllabus is returned. - \&quot;public_description\&quot;: Optional information to include with each Course.   When public_description is given the user-generated text for the course   public description is returned. - \&quot;total_scores\&quot;: Optional information to include with each Course.   When total_scores is given, any student enrollments will also   include the fields \&#39;computed_current_score\&#39;, \&#39;computed_final_score\&#39;,   \&#39;computed_current_grade\&#39;, and \&#39;computed_final_grade\&#39; (see Enrollment   documentation for more information on these fields). This argument   is ignored if the course is configured to hide final grades. - \&quot;current_grading_period_scores\&quot;: Optional information to include with   each Course. When current_grading_period_scores is given and total_scores   is given, any student enrollments will also include the fields   \&#39;has_grading_periods\&#39;,   \&#39;totals_for_all_grading_periods_option\&#39;, \&#39;current_grading_period_title\&#39;,   \&#39;current_grading_period_id\&#39;, current_period_computed_current_score\&#39;,   \&#39;current_period_computed_final_score\&#39;,   \&#39;current_period_computed_current_grade\&#39;, and   \&#39;current_period_computed_final_grade\&#39;, as well as (if the user has permission)   \&#39;current_period_unposted_current_score\&#39;,   \&#39;current_period_unposted_final_score\&#39;,   \&#39;current_period_unposted_current_grade\&#39;, and   \&#39;current_period_unposted_final_grade\&#39; (see Enrollment documentation for   more information on these fields). In addition, when this argument is   passed, the course will have a \&#39;has_grading_periods\&#39; attribute   on it. This argument is ignored if the course is configured to hide final   grades or if the total_scores argument is not included. - \&quot;grading_periods\&quot;: Optional information to include with each Course. When   grading_periods is given, a list of the grading periods associated with   each course is returned. - \&quot;term\&quot;: Optional information to include with each Course. When   term is given, the information for the enrollment term for each course   is returned. - \&quot;account\&quot;: Optional information to include with each Course. When   account is given, the account json for each course is returned. - \&quot;course_progress\&quot;: Optional information to include with each Course.   When course_progress is given, each course will include a   \&#39;course_progress\&#39; object with the fields: \&#39;requirement_count\&#39;, an integer   specifying the total number of requirements in the course,   \&#39;requirement_completed_count\&#39;, an integer specifying the total number of   requirements in this course that have been completed, and   \&#39;next_requirement_url\&#39;, a string url to the next requirement item, and   \&#39;completed_at\&#39;, the date the course was completed (null if incomplete).   \&#39;next_requirement_url\&#39; will be null if all requirements have been   completed or the current module does not require sequential progress.   \&quot;course_progress\&quot; will return an error message if the course is not   module based or the user is not enrolled as a student in the course. - \&quot;sections\&quot;: Section enrollment information to include with each Course.   Returns an array of hashes containing the section ID (id), section name   (name), start and end dates (start_at, end_at), as well as the enrollment   type (enrollment_role, e.g. \&#39;StudentEnrollment\&#39;). - \&quot;storage_quota_used_mb\&quot;: The amount of storage space used by the files in this course - \&quot;total_students\&quot;: Optional information to include with each Course.   Returns an integer for the total amount of active and invited students. - \&quot;passback_status\&quot;: Include the grade passback_status - \&quot;favorites\&quot;: Optional information to include with each Course.   Indicates if the user has marked the course as a favorite course. - \&quot;teachers\&quot;: Teacher information to include with each Course.   Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information   for each teacher in the course. - \&quot;observed_users\&quot;: Optional information to include with each Course.   Will include data for observed users if the current user has an   observer enrollment. - \&quot;tabs\&quot;: Optional information to include with each Course.   Will include the list of tabs configured for each course.  See the   {api:TabsController#index List available tabs API} for more information. - \&quot;course_image\&quot;: Optional information to include with each Course. Returns course   image url if a course image has been set. - \&quot;banner_image\&quot;: Optional information to include with each Course. Returns course   banner image url if the course is a Canvas for Elementary subject and a banner   image has been set. - \&quot;concluded\&quot;: Optional information to include with each Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \&quot;post_manually\&quot;: Optional information to include with each Course. Returns true if   the course post policy is set to \&quot;Manually\&quot;. Returns false if the the course post   policy is set to \&quot;Automatically\&quot;.
     * @param state If set, only return courses that are in the given state(s). By default, \&quot;available\&quot; is returned for students and observers, and anything except \&quot;deleted\&quot;, for all other enrollment types
     * @param enrollmentState When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.
     * @param homeroom If set, only return homeroom courses.
     * @param accountId If set, only include courses associated with this account
     */
    public async listCoursesForUser (userId: string, include?: Array<string>, state?: Array<string>, enrollmentState?: 'active' | 'invited_or_pending' | 'completed', homeroom?: boolean, accountId?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<Course>;  }> {
        const localVarPath = this.basePath + '/v1/users/{user_id}/courses'
            .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listCoursesForUser.');
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        if (state !== undefined) {
            localVarQueryParameters['state'] = ObjectSerializer.serialize(state, "Array<string>");
        }

        if (enrollmentState !== undefined) {
            localVarQueryParameters['enrollment_state'] = ObjectSerializer.serialize(enrollmentState, "'active' | 'invited_or_pending' | 'completed'");
        }

        if (homeroom !== undefined) {
            localVarQueryParameters['homeroom'] = ObjectSerializer.serialize(homeroom, "boolean");
        }

        if (accountId !== undefined) {
            localVarQueryParameters['account_id'] = ObjectSerializer.serialize(accountId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<Course>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<Course>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the paginated list of users in this course, ordered by how recently they have logged in. The records include the \'last_login\' field which contains a timestamp of the last time that user logged into canvas.  The querying user must have the \'View usage reports\' permission.
     * @summary List recently logged in students
     * @param courseId ID
     */
    public async listRecentlyLoggedInStudents (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/recent_students'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listRecentlyLoggedInStudents.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<User>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<User>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the paginated list of students enrolled in this course.  DEPRECATED: Please use the {api:CoursesController#users course users} endpoint and pass \"student\" as the enrollment_type.
     * @summary List students
     * @param courseId ID
     */
    public async listStudents (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/students'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listStudents.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<User>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<User>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the paginated list of users in this course. And optionally the user\'s enrollments in the course.
     * @summary List users in course
     * @param courseId ID
     * @param searchTerm The partial name or full ID of the users to match and return in the results list.
     * @param sort When set, sort the results of the search based on the given field.
     * @param enrollmentType When set, only return users where the user is enrolled as this type. \&quot;student_view\&quot; implies include[]&#x3D;test_student. This argument is ignored if enrollment_role is given.
     * @param enrollmentRole Deprecated When set, only return users enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of \&#39;StudentEnrollment\&#39;, \&#39;TeacherEnrollment\&#39;, \&#39;TaEnrollment\&#39;, \&#39;ObserverEnrollment\&#39;, or \&#39;DesignerEnrollment\&#39;.
     * @param enrollmentRoleId When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role id with type \&#39;StudentEnrollment\&#39;, \&#39;TeacherEnrollment\&#39;, \&#39;TaEnrollment\&#39;, \&#39;ObserverEnrollment\&#39;, or \&#39;DesignerEnrollment\&#39;.
     * @param include - \&quot;enrollments\&quot;: Optionally include with each Course the user\&#39;s current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a \&#39;grades\&#39; key with \&#39;current_score\&#39;, \&#39;final_score\&#39;, \&#39;current_grade\&#39; and \&#39;final_grade\&#39; values. - \&quot;locked\&quot;: Optionally include whether an enrollment is locked. - \&quot;avatar_url\&quot;: Optionally include avatar_url. - \&quot;bio\&quot;: Optionally include each user\&#39;s bio. - \&quot;test_student\&quot;: Optionally include the course\&#39;s Test Student, if present. Default is to not include Test Student. - \&quot;custom_links\&quot;: Optionally include plugin-supplied custom links for each student, such as analytics information - \&quot;current_grading_period_scores\&quot;: if enrollments is included as well as this directive, the scores returned in the enrollment will be for the current grading period if there is one. A \&#39;grading_period_id\&#39; value will also be included with the scores. if grading_period_id is nil there is no current grading period and the score is a total score. - \&quot;uuid\&quot;: Optionally include the users uuid
     * @param userId If this parameter is given and it corresponds to a user in the course, the +page+ parameter will be ignored and the page containing the specified user will be returned instead.
     * @param userIds If included, the course users set will only include users with IDs specified by the param. Note: this will not work in conjunction with the \&quot;user_id\&quot; argument but multiple user_ids can be included.
     * @param enrollmentState When set, only return users where the enrollment workflow state is of one of the given types. \&quot;active\&quot; and \&quot;invited\&quot; enrollments are returned by default.
     */
    public async listUsersInCourseSearchUsers (courseId: string, searchTerm?: string, sort?: 'username' | 'last_login' | 'email' | 'sis_id', enrollmentType?: Array<string>, enrollmentRole?: string, enrollmentRoleId?: number, include?: Array<string>, userId?: string, userIds?: Array<number>, enrollmentState?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/search_users'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listUsersInCourseSearchUsers.');
        }

        if (searchTerm !== undefined) {
            localVarQueryParameters['search_term'] = ObjectSerializer.serialize(searchTerm, "string");
        }

        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'username' | 'last_login' | 'email' | 'sis_id'");
        }

        if (enrollmentType !== undefined) {
            localVarQueryParameters['enrollment_type'] = ObjectSerializer.serialize(enrollmentType, "Array<string>");
        }

        if (enrollmentRole !== undefined) {
            localVarQueryParameters['enrollment_role'] = ObjectSerializer.serialize(enrollmentRole, "string");
        }

        if (enrollmentRoleId !== undefined) {
            localVarQueryParameters['enrollment_role_id'] = ObjectSerializer.serialize(enrollmentRoleId, "number");
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        if (userId !== undefined) {
            localVarQueryParameters['user_id'] = ObjectSerializer.serialize(userId, "string");
        }

        if (userIds !== undefined) {
            localVarQueryParameters['user_ids'] = ObjectSerializer.serialize(userIds, "Array<number>");
        }

        if (enrollmentState !== undefined) {
            localVarQueryParameters['enrollment_state'] = ObjectSerializer.serialize(enrollmentState, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<User>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<User>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the paginated list of users in this course. And optionally the user\'s enrollments in the course.
     * @summary List users in course
     * @param courseId ID
     * @param searchTerm The partial name or full ID of the users to match and return in the results list.
     * @param sort When set, sort the results of the search based on the given field.
     * @param enrollmentType When set, only return users where the user is enrolled as this type. \&quot;student_view\&quot; implies include[]&#x3D;test_student. This argument is ignored if enrollment_role is given.
     * @param enrollmentRole Deprecated When set, only return users enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of \&#39;StudentEnrollment\&#39;, \&#39;TeacherEnrollment\&#39;, \&#39;TaEnrollment\&#39;, \&#39;ObserverEnrollment\&#39;, or \&#39;DesignerEnrollment\&#39;.
     * @param enrollmentRoleId When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role id with type \&#39;StudentEnrollment\&#39;, \&#39;TeacherEnrollment\&#39;, \&#39;TaEnrollment\&#39;, \&#39;ObserverEnrollment\&#39;, or \&#39;DesignerEnrollment\&#39;.
     * @param include - \&quot;enrollments\&quot;: Optionally include with each Course the user\&#39;s current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a \&#39;grades\&#39; key with \&#39;current_score\&#39;, \&#39;final_score\&#39;, \&#39;current_grade\&#39; and \&#39;final_grade\&#39; values. - \&quot;locked\&quot;: Optionally include whether an enrollment is locked. - \&quot;avatar_url\&quot;: Optionally include avatar_url. - \&quot;bio\&quot;: Optionally include each user\&#39;s bio. - \&quot;test_student\&quot;: Optionally include the course\&#39;s Test Student, if present. Default is to not include Test Student. - \&quot;custom_links\&quot;: Optionally include plugin-supplied custom links for each student, such as analytics information - \&quot;current_grading_period_scores\&quot;: if enrollments is included as well as this directive, the scores returned in the enrollment will be for the current grading period if there is one. A \&#39;grading_period_id\&#39; value will also be included with the scores. if grading_period_id is nil there is no current grading period and the score is a total score. - \&quot;uuid\&quot;: Optionally include the users uuid
     * @param userId If this parameter is given and it corresponds to a user in the course, the +page+ parameter will be ignored and the page containing the specified user will be returned instead.
     * @param userIds If included, the course users set will only include users with IDs specified by the param. Note: this will not work in conjunction with the \&quot;user_id\&quot; argument but multiple user_ids can be included.
     * @param enrollmentState When set, only return users where the enrollment workflow state is of one of the given types. \&quot;active\&quot; and \&quot;invited\&quot; enrollments are returned by default.
     */
    public async listUsersInCourseUsers (courseId: string, searchTerm?: string, sort?: 'username' | 'last_login' | 'email' | 'sis_id', enrollmentType?: Array<string>, enrollmentRole?: string, enrollmentRoleId?: number, include?: Array<string>, userId?: string, userIds?: Array<number>, enrollmentState?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/users'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listUsersInCourseUsers.');
        }

        if (searchTerm !== undefined) {
            localVarQueryParameters['search_term'] = ObjectSerializer.serialize(searchTerm, "string");
        }

        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'username' | 'last_login' | 'email' | 'sis_id'");
        }

        if (enrollmentType !== undefined) {
            localVarQueryParameters['enrollment_type'] = ObjectSerializer.serialize(enrollmentType, "Array<string>");
        }

        if (enrollmentRole !== undefined) {
            localVarQueryParameters['enrollment_role'] = ObjectSerializer.serialize(enrollmentRole, "string");
        }

        if (enrollmentRoleId !== undefined) {
            localVarQueryParameters['enrollment_role_id'] = ObjectSerializer.serialize(enrollmentRoleId, "number");
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        if (userId !== undefined) {
            localVarQueryParameters['user_id'] = ObjectSerializer.serialize(userId, "string");
        }

        if (userIds !== undefined) {
            localVarQueryParameters['user_ids'] = ObjectSerializer.serialize(userIds, "Array<number>");
        }

        if (enrollmentState !== undefined) {
            localVarQueryParameters['enrollment_state'] = ObjectSerializer.serialize(enrollmentState, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<User>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<User>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the paginated list of active courses for the current user.
     * @summary List your courses
     * @param enrollmentType When set, only return courses where the user is enrolled as this type. For example, set to \&quot;teacher\&quot; to return only courses where the user is enrolled as a Teacher.  This argument is ignored if enrollment_role is given.
     * @param enrollmentRole Deprecated When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of \&#39;StudentEnrollment\&#39;, \&#39;TeacherEnrollment\&#39;, \&#39;TaEnrollment\&#39;, \&#39;ObserverEnrollment\&#39;, or \&#39;DesignerEnrollment\&#39;.
     * @param enrollmentRoleId When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role type of \&#39;StudentEnrollment\&#39;, \&#39;TeacherEnrollment\&#39;, \&#39;TaEnrollment\&#39;, \&#39;ObserverEnrollment\&#39;, or \&#39;DesignerEnrollment\&#39;.
     * @param enrollmentState When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.
     * @param excludeBlueprintCourses When set, only return courses that are not configured as blueprint courses.
     * @param include - \&quot;needs_grading_count\&quot;: Optional information to include with each Course.   When needs_grading_count is given, and the current user has grading   rights, the total number of submissions needing grading for all   assignments is returned. - \&quot;syllabus_body\&quot;: Optional information to include with each Course.   When syllabus_body is given the user-generated html for the course   syllabus is returned. - \&quot;public_description\&quot;: Optional information to include with each Course.   When public_description is given the user-generated text for the course   public description is returned. - \&quot;total_scores\&quot;: Optional information to include with each Course.   When total_scores is given, any student enrollments will also   include the fields \&#39;computed_current_score\&#39;, \&#39;computed_final_score\&#39;,   \&#39;computed_current_grade\&#39;, and \&#39;computed_final_grade\&#39;, as well as (if   the user has permission) \&#39;unposted_current_score\&#39;,   \&#39;unposted_final_score\&#39;, \&#39;unposted_current_grade\&#39;, and   \&#39;unposted_final_grade\&#39; (see Enrollment documentation for more   information on these fields). This argument is ignored if the course is   configured to hide final grades. - \&quot;current_grading_period_scores\&quot;: Optional information to include with   each Course. When current_grading_period_scores is given and total_scores   is given, any student enrollments will also include the fields   \&#39;has_grading_periods\&#39;,   \&#39;totals_for_all_grading_periods_option\&#39;, \&#39;current_grading_period_title\&#39;,   \&#39;current_grading_period_id\&#39;, current_period_computed_current_score\&#39;,   \&#39;current_period_computed_final_score\&#39;,   \&#39;current_period_computed_current_grade\&#39;, and   \&#39;current_period_computed_final_grade\&#39;, as well as (if the user has permission)   \&#39;current_period_unposted_current_score\&#39;,   \&#39;current_period_unposted_final_score\&#39;,   \&#39;current_period_unposted_current_grade\&#39;, and   \&#39;current_period_unposted_final_grade\&#39; (see Enrollment documentation for   more information on these fields). In addition, when this argument is   passed, the course will have a \&#39;has_grading_periods\&#39; attribute   on it. This argument is ignored if the total_scores argument is not   included. If the course is configured to hide final grades, the   following fields are not returned:   \&#39;totals_for_all_grading_periods_option\&#39;,   \&#39;current_period_computed_current_score\&#39;,   \&#39;current_period_computed_final_score\&#39;,   \&#39;current_period_computed_current_grade\&#39;,   \&#39;current_period_computed_final_grade\&#39;,   \&#39;current_period_unposted_current_score\&#39;,   \&#39;current_period_unposted_final_score\&#39;,   \&#39;current_period_unposted_current_grade\&#39;, and   \&#39;current_period_unposted_final_grade\&#39; - \&quot;grading_periods\&quot;: Optional information to include with each Course. When   grading_periods is given, a list of the grading periods associated with   each course is returned. - \&quot;term\&quot;: Optional information to include with each Course. When   term is given, the information for the enrollment term for each course   is returned. - \&quot;account\&quot;: Optional information to include with each Course. When   account is given, the account json for each course is returned. - \&quot;course_progress\&quot;: Optional information to include with each Course.   When course_progress is given, each course will include a   \&#39;course_progress\&#39; object with the fields: \&#39;requirement_count\&#39;, an integer   specifying the total number of requirements in the course,   \&#39;requirement_completed_count\&#39;, an integer specifying the total number of   requirements in this course that have been completed, and   \&#39;next_requirement_url\&#39;, a string url to the next requirement item, and   \&#39;completed_at\&#39;, the date the course was completed (null if incomplete).   \&#39;next_requirement_url\&#39; will be null if all requirements have been   completed or the current module does not require sequential progress.   \&quot;course_progress\&quot; will return an error message if the course is not   module based or the user is not enrolled as a student in the course. - \&quot;sections\&quot;: Section enrollment information to include with each Course.   Returns an array of hashes containing the section ID (id), section name   (name), start and end dates (start_at, end_at), as well as the enrollment   type (enrollment_role, e.g. \&#39;StudentEnrollment\&#39;). - \&quot;storage_quota_used_mb\&quot;: The amount of storage space used by the files in this course - \&quot;total_students\&quot;: Optional information to include with each Course.   Returns an integer for the total amount of active and invited students. - \&quot;passback_status\&quot;: Include the grade passback_status - \&quot;favorites\&quot;: Optional information to include with each Course.   Indicates if the user has marked the course as a favorite course. - \&quot;teachers\&quot;: Teacher information to include with each Course.   Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information   for each teacher in the course. - \&quot;observed_users\&quot;: Optional information to include with each Course.   Will include data for observed users if the current user has an   observer enrollment. - \&quot;tabs\&quot;: Optional information to include with each Course.   Will include the list of tabs configured for each course.  See the   {api:TabsController#index List available tabs API} for more information. - \&quot;course_image\&quot;: Optional information to include with each Course. Returns course   image url if a course image has been set. - \&quot;banner_image\&quot;: Optional information to include with each Course. Returns course   banner image url if the course is a Canvas for Elementary subject and a banner   image has been set. - \&quot;concluded\&quot;: Optional information to include with each Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \&quot;post_manually\&quot;: Optional information to include with each Course. Returns true if   the course post policy is set to Manually post grades. Returns false if the the course   post policy is set to Automatically post grades.
     * @param state If set, only return courses that are in the given state(s). By default, \&quot;available\&quot; is returned for students and observers, and anything except \&quot;deleted\&quot;, for all other enrollment types
     */
    public async listYourCourses (enrollmentType?: 'teacher' | 'student' | 'ta' | 'observer' | 'designer', enrollmentRole?: string, enrollmentRoleId?: number, enrollmentState?: 'active' | 'invited_or_pending' | 'completed', excludeBlueprintCourses?: boolean, include?: Array<string>, state?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<Course>;  }> {
        const localVarPath = this.basePath + '/v1/courses';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (enrollmentType !== undefined) {
            localVarQueryParameters['enrollment_type'] = ObjectSerializer.serialize(enrollmentType, "'teacher' | 'student' | 'ta' | 'observer' | 'designer'");
        }

        if (enrollmentRole !== undefined) {
            localVarQueryParameters['enrollment_role'] = ObjectSerializer.serialize(enrollmentRole, "string");
        }

        if (enrollmentRoleId !== undefined) {
            localVarQueryParameters['enrollment_role_id'] = ObjectSerializer.serialize(enrollmentRoleId, "number");
        }

        if (enrollmentState !== undefined) {
            localVarQueryParameters['enrollment_state'] = ObjectSerializer.serialize(enrollmentState, "'active' | 'invited_or_pending' | 'completed'");
        }

        if (excludeBlueprintCourses !== undefined) {
            localVarQueryParameters['exclude_blueprint_courses'] = ObjectSerializer.serialize(excludeBlueprintCourses, "boolean");
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        if (state !== undefined) {
            localVarQueryParameters['state'] = ObjectSerializer.serialize(state, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<Course>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<Course>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns permission information for the calling user in the given course. See also the {api:AccountsController#permissions Account} and {api:GroupsController#permissions Group} counterparts.
     * @summary Permissions
     * @param courseId ID
     * @param permissions List of permissions to check against the authenticated user. Permission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.
     */
    public async permissions (courseId: string, permissions?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/permissions'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling permissions.');
        }

        if (permissions !== undefined) {
            localVarQueryParameters['permissions'] = ObjectSerializer.serialize(permissions, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Preview html content processed for this course
     * @summary Preview processed html
     * @param courseId ID
     * @param html The html content to process
     */
    public async previewProcessedHtml (courseId: string, html?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/preview_html'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling previewProcessedHtml.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (html !== undefined) {
            localVarFormParams['html'] = ObjectSerializer.serialize(html, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Remove alert about the limitations of quiz migrations that is displayed to a user in a course  you must be logged in to use this endpoint
     * @summary Remove quiz migration alert
     * @param id ID
     */
    public async removeQuizMigrationAlert (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{id}/dismiss_migration_limitation_message'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling removeQuizMigrationAlert.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Deletes the current course, and creates a new equivalent course with no content, but all sections and users moved over.
     * @summary Reset a course
     * @param courseId ID
     */
    public async resetCourse (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Course;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/reset_content'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling resetCourse.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Course;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Course");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns information for a test student in this course. Creates a test student if one does not already exist for the course. The caller must have permission to access the course\'s student view.
     * @summary Return test student for course
     * @param courseId ID
     */
    public async returnTestStudentForCourse (courseId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: User;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/student_view_student'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling returnTestStudentForCourse.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: User;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "User");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a paginated list of users you can share content with.  Requires the content share feature and the user must have the manage content permission for the course.
     * @summary Search for content share users
     * @param courseId ID
     * @param searchTerm Term used to find users.  Will search available share users with the search term in their name.
     */
    public async searchForContentShareUsers (courseId: string, searchTerm: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/content_share_users'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling searchForContentShareUsers.');
        }

        // verify required parameter 'searchTerm' is not null or undefined
        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling searchForContentShareUsers.');
        }

        if (searchTerm !== undefined) {
            localVarQueryParameters['search_term'] = ObjectSerializer.serialize(searchTerm, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<User>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<User>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an existing course.  Arguments are the same as Courses#create, with a few exceptions (enroll_me).  If a user has content management rights, but not full course editing rights, the only attribute editable through this endpoint will be \"syllabus_body\"  If an account has set prevent_course_availability_editing_by_teachers, a teacher cannot change course[start_at], course[conclude_at], or course[restrict_enrollments_to_course_dates] here.
     * @summary Update a course
     * @param id ID
     * @param courseAccountId The unique ID of the account to move the course to.
     * @param courseName The name of the course. If omitted, the course will be named \\\&quot;Unnamed Course.\\\&quot;
     * @param courseCourseCode The course code for the course.
     * @param courseStartAt Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless \\\&#39;restrict_enrollments_to_course_dates\\\&#39; is set to true, or the course is already published.
     * @param courseEndAt Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless \\\&#39;restrict_enrollments_to_course_dates\\\&#39; is set to true.
     * @param courseLicense The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference): - \\\&#39;private\\\&#39; (Private Copyrighted) - \\\&#39;cc_by_nc_nd\\\&#39; (CC Attribution Non-Commercial No Derivatives) - \\\&#39;cc_by_nc_sa\\\&#39; (CC Attribution Non-Commercial Share Alike) - \\\&#39;cc_by_nc\\\&#39; (CC Attribution Non-Commercial) - \\\&#39;cc_by_nd\\\&#39; (CC Attribution No Derivatives) - \\\&#39;cc_by_sa\\\&#39; (CC Attribution Share Alike) - \\\&#39;cc_by\\\&#39; (CC Attribution) - \\\&#39;public_domain\\\&#39; (Public Domain).
     * @param courseIsPublic Set to true if course is public to both authenticated and unauthenticated users.
     * @param courseIsPublicToAuthUsers Set to true if course is public only to authenticated users.
     * @param coursePublicSyllabus Set to true to make the course syllabus public.
     * @param coursePublicSyllabusToAuth Set to true to make the course syllabus to public for authenticated users.
     * @param coursePublicDescription A publicly visible description of the course.
     * @param courseAllowStudentWikiEdits If true, students will be able to modify the course wiki.
     * @param courseAllowWikiComments If true, course members will be able to comment on wiki pages.
     * @param courseAllowStudentForumAttachments If true, students can attach files to forum posts.
     * @param courseOpenEnrollment Set to true if the course is open enrollment.
     * @param courseSelfEnrollment Set to true if the course is self enrollment.
     * @param courseRestrictEnrollmentsToCourseDates Set to true to restrict user enrollments to the start and end dates of the course. Setting this value to false will remove the course end date (if it exists), as well as the course start date (if the course is unpublished).
     * @param courseTermId The unique ID of the term to create to course in.
     * @param courseSisCourseId The unique SIS identifier.
     * @param courseIntegrationId The unique Integration identifier.
     * @param courseHideFinalGrades If this option is set to true, the totals in student grades summary will be hidden.
     * @param courseTimeZone The time zone for the course. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.
     * @param courseApplyAssignmentGroupWeights Set to true to weight final grade based on assignment groups percentages.
     * @param courseStorageQuotaMb Set the storage quota for the course, in megabytes. The caller must have the \\\&quot;Manage storage quotas\\\&quot; account permission.
     * @param offer If this option is set to true, the course will be available to students immediately.
     * @param courseEvent The action to take on each course. * \\\&#39;claim\\\&#39; makes a course no longer visible to students. This action is also called \\\&quot;unpublish\\\&quot; on the web site.   A course cannot be unpublished if students have received graded submissions. * \\\&#39;offer\\\&#39; makes a course visible to students. This action is also called \\\&quot;publish\\\&quot; on the web site. * \\\&#39;conclude\\\&#39; prevents future enrollments and makes a course read-only for all participants. The course still appears   in prior-enrollment lists. * \\\&#39;delete\\\&#39; completely removes the course from the web site (including course menus and prior-enrollment lists).   All enrollments are deleted. Course content may be physically deleted at a future date. * \\\&#39;undelete\\\&#39; attempts to recover a course that has been deleted. This action requires account administrative rights.   (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course   will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.
     * @param courseDefaultView The type of page that users will see when they first visit the course * \\\&#39;feed\\\&#39; Recent Activity Dashboard * \\\&#39;wiki\\\&#39; Wiki Front Page * \\\&#39;modules\\\&#39; Course Modules/Sections Page * \\\&#39;assignments\\\&#39; Course Assignments List * \\\&#39;syllabus\\\&#39; Course Syllabus Page other types may be added in the future
     * @param courseSyllabusBody The syllabus body for the course
     * @param courseSyllabusCourseSummary Optional. Indicates whether the Course Summary (consisting of the course\\\&#39;s assignments and calendar events) is displayed on the syllabus page. Defaults to +true+.
     * @param courseGradingStandardId The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.
     * @param courseGradePassbackSetting Optional. The grade_passback_setting for the course. Only \\\&#39;nightly_sync\\\&#39; and \\\&#39;\\\&#39; are allowed
     * @param courseCourseFormat Optional. Specifies the format of the course. (Should be either \\\&#39;on_campus\\\&#39; or \\\&#39;online\\\&#39;)
     * @param courseImageId This is a file ID corresponding to an image file in the course that will be used as the course image. This will clear the course\\\&#39;s image_url setting if set.  If you attempt to provide image_url and image_id in a request it will fail.
     * @param courseImageUrl This is a URL to an image to be used as the course image. This will clear the course\\\&#39;s image_id setting if set.  If you attempt to provide image_url and image_id in a request it will fail.
     * @param courseRemoveImage If this option is set to true, the course image url and course image ID are both set to nil
     * @param courseRemoveBannerImage If this option is set to true, the course banner image url and course banner image ID are both set to nil
     * @param courseBlueprint Sets the course as a blueprint course.
     * @param courseBlueprintRestrictions Sets a default set to apply to blueprint course objects when restricted, unless _use_blueprint_restrictions_by_object_type_ is enabled. See the {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} documentation
     * @param courseUseBlueprintRestrictionsByObjectType When enabled, the _blueprint_restrictions_ parameter will be ignored in favor of the _blueprint_restrictions_by_object_type_ parameter
     * @param courseBlueprintRestrictionsByObjectType Allows setting multiple {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} to apply to blueprint course objects of the matching type when restricted. The possible object types are \\\&quot;assignment\\\&quot;, \\\&quot;attachment\\\&quot;, \\\&quot;discussion_topic\\\&quot;, \\\&quot;quiz\\\&quot; and \\\&quot;wiki_page\\\&quot;. Example usage:   course[blueprint_restrictions_by_object_type][assignment][content]&#x3D;1
     * @param courseHomeroomCourse Sets the course as a homeroom course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.
     * @param courseSyncEnrollmentsFromHomeroom Syncs enrollments from the homeroom that is set in homeroom_course_id. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.
     * @param courseHomeroomCourseId Sets the Homeroom Course id to be used with sync_enrollments_from_homeroom. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.
     * @param courseTemplate Enable or disable the course as a template that can be selected by an account
     * @param courseCourseColor Sets a color in hex code format to be associated with the course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.
     * @param courseFriendlyName Set a friendly name for the course. If this is provided and the course is associated with a Canvas for Elementary account, it will be shown instead of the course name. This setting takes priority over course nicknames defined by individual users.
     * @param courseEnableCoursePaces Enable or disable Course Pacing for the course. This setting only has an effect when the Course Pacing feature flag is enabled for the sub-account. Otherwise, Course Pacing are always disabled.
     * @param courseConditionalRelease Enable or disable individual learning paths for students based on assessment
     * @param coursePostManually When true, all grades in the course will be posted manually. When false, all grades in the course will be automatically posted. Use with caution as this setting will override any assignment level post policy.
     * @param overrideSisStickiness Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
     */
    public async updateCourse (id: string, courseAccountId?: number, courseName?: string, courseCourseCode?: string, courseStartAt?: Date, courseEndAt?: Date, courseLicense?: string, courseIsPublic?: boolean, courseIsPublicToAuthUsers?: boolean, coursePublicSyllabus?: boolean, coursePublicSyllabusToAuth?: boolean, coursePublicDescription?: string, courseAllowStudentWikiEdits?: boolean, courseAllowWikiComments?: boolean, courseAllowStudentForumAttachments?: boolean, courseOpenEnrollment?: boolean, courseSelfEnrollment?: boolean, courseRestrictEnrollmentsToCourseDates?: boolean, courseTermId?: number, courseSisCourseId?: string, courseIntegrationId?: string, courseHideFinalGrades?: boolean, courseTimeZone?: string, courseApplyAssignmentGroupWeights?: boolean, courseStorageQuotaMb?: number, offer?: boolean, courseEvent?: string, courseDefaultView?: string, courseSyllabusBody?: string, courseSyllabusCourseSummary?: boolean, courseGradingStandardId?: number, courseGradePassbackSetting?: string, courseCourseFormat?: string, courseImageId?: number, courseImageUrl?: string, courseRemoveImage?: boolean, courseRemoveBannerImage?: boolean, courseBlueprint?: boolean, courseBlueprintRestrictions?: any, courseUseBlueprintRestrictionsByObjectType?: boolean, courseBlueprintRestrictionsByObjectType?: any, courseHomeroomCourse?: boolean, courseSyncEnrollmentsFromHomeroom?: string, courseHomeroomCourseId?: string, courseTemplate?: boolean, courseCourseColor?: string, courseFriendlyName?: string, courseEnableCoursePaces?: boolean, courseConditionalRelease?: boolean, coursePostManually?: boolean, overrideSisStickiness?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCourse.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (courseAccountId !== undefined) {
            localVarFormParams['course[account_id]'] = ObjectSerializer.serialize(courseAccountId, "number");
        }

        if (courseName !== undefined) {
            localVarFormParams['course[name]'] = ObjectSerializer.serialize(courseName, "string");
        }

        if (courseCourseCode !== undefined) {
            localVarFormParams['course[course_code]'] = ObjectSerializer.serialize(courseCourseCode, "string");
        }

        if (courseStartAt !== undefined) {
            localVarFormParams['course[start_at]'] = ObjectSerializer.serialize(courseStartAt, "Date");
        }

        if (courseEndAt !== undefined) {
            localVarFormParams['course[end_at]'] = ObjectSerializer.serialize(courseEndAt, "Date");
        }

        if (courseLicense !== undefined) {
            localVarFormParams['course[license]'] = ObjectSerializer.serialize(courseLicense, "string");
        }

        if (courseIsPublic !== undefined) {
            localVarFormParams['course[is_public]'] = ObjectSerializer.serialize(courseIsPublic, "boolean");
        }

        if (courseIsPublicToAuthUsers !== undefined) {
            localVarFormParams['course[is_public_to_auth_users]'] = ObjectSerializer.serialize(courseIsPublicToAuthUsers, "boolean");
        }

        if (coursePublicSyllabus !== undefined) {
            localVarFormParams['course[public_syllabus]'] = ObjectSerializer.serialize(coursePublicSyllabus, "boolean");
        }

        if (coursePublicSyllabusToAuth !== undefined) {
            localVarFormParams['course[public_syllabus_to_auth]'] = ObjectSerializer.serialize(coursePublicSyllabusToAuth, "boolean");
        }

        if (coursePublicDescription !== undefined) {
            localVarFormParams['course[public_description]'] = ObjectSerializer.serialize(coursePublicDescription, "string");
        }

        if (courseAllowStudentWikiEdits !== undefined) {
            localVarFormParams['course[allow_student_wiki_edits]'] = ObjectSerializer.serialize(courseAllowStudentWikiEdits, "boolean");
        }

        if (courseAllowWikiComments !== undefined) {
            localVarFormParams['course[allow_wiki_comments]'] = ObjectSerializer.serialize(courseAllowWikiComments, "boolean");
        }

        if (courseAllowStudentForumAttachments !== undefined) {
            localVarFormParams['course[allow_student_forum_attachments]'] = ObjectSerializer.serialize(courseAllowStudentForumAttachments, "boolean");
        }

        if (courseOpenEnrollment !== undefined) {
            localVarFormParams['course[open_enrollment]'] = ObjectSerializer.serialize(courseOpenEnrollment, "boolean");
        }

        if (courseSelfEnrollment !== undefined) {
            localVarFormParams['course[self_enrollment]'] = ObjectSerializer.serialize(courseSelfEnrollment, "boolean");
        }

        if (courseRestrictEnrollmentsToCourseDates !== undefined) {
            localVarFormParams['course[restrict_enrollments_to_course_dates]'] = ObjectSerializer.serialize(courseRestrictEnrollmentsToCourseDates, "boolean");
        }

        if (courseTermId !== undefined) {
            localVarFormParams['course[term_id]'] = ObjectSerializer.serialize(courseTermId, "number");
        }

        if (courseSisCourseId !== undefined) {
            localVarFormParams['course[sis_course_id]'] = ObjectSerializer.serialize(courseSisCourseId, "string");
        }

        if (courseIntegrationId !== undefined) {
            localVarFormParams['course[integration_id]'] = ObjectSerializer.serialize(courseIntegrationId, "string");
        }

        if (courseHideFinalGrades !== undefined) {
            localVarFormParams['course[hide_final_grades]'] = ObjectSerializer.serialize(courseHideFinalGrades, "boolean");
        }

        if (courseTimeZone !== undefined) {
            localVarFormParams['course[time_zone]'] = ObjectSerializer.serialize(courseTimeZone, "string");
        }

        if (courseApplyAssignmentGroupWeights !== undefined) {
            localVarFormParams['course[apply_assignment_group_weights]'] = ObjectSerializer.serialize(courseApplyAssignmentGroupWeights, "boolean");
        }

        if (courseStorageQuotaMb !== undefined) {
            localVarFormParams['course[storage_quota_mb]'] = ObjectSerializer.serialize(courseStorageQuotaMb, "number");
        }

        if (offer !== undefined) {
            localVarFormParams['offer'] = ObjectSerializer.serialize(offer, "boolean");
        }

        if (courseEvent !== undefined) {
            localVarFormParams['course[event]'] = ObjectSerializer.serialize(courseEvent, "string");
        }

        if (courseDefaultView !== undefined) {
            localVarFormParams['course[default_view]'] = ObjectSerializer.serialize(courseDefaultView, "string");
        }

        if (courseSyllabusBody !== undefined) {
            localVarFormParams['course[syllabus_body]'] = ObjectSerializer.serialize(courseSyllabusBody, "string");
        }

        if (courseSyllabusCourseSummary !== undefined) {
            localVarFormParams['course[syllabus_course_summary]'] = ObjectSerializer.serialize(courseSyllabusCourseSummary, "boolean");
        }

        if (courseGradingStandardId !== undefined) {
            localVarFormParams['course[grading_standard_id]'] = ObjectSerializer.serialize(courseGradingStandardId, "number");
        }

        if (courseGradePassbackSetting !== undefined) {
            localVarFormParams['course[grade_passback_setting]'] = ObjectSerializer.serialize(courseGradePassbackSetting, "string");
        }

        if (courseCourseFormat !== undefined) {
            localVarFormParams['course[course_format]'] = ObjectSerializer.serialize(courseCourseFormat, "string");
        }

        if (courseImageId !== undefined) {
            localVarFormParams['course[image_id]'] = ObjectSerializer.serialize(courseImageId, "number");
        }

        if (courseImageUrl !== undefined) {
            localVarFormParams['course[image_url]'] = ObjectSerializer.serialize(courseImageUrl, "string");
        }

        if (courseRemoveImage !== undefined) {
            localVarFormParams['course[remove_image]'] = ObjectSerializer.serialize(courseRemoveImage, "boolean");
        }

        if (courseRemoveBannerImage !== undefined) {
            localVarFormParams['course[remove_banner_image]'] = ObjectSerializer.serialize(courseRemoveBannerImage, "boolean");
        }

        if (courseBlueprint !== undefined) {
            localVarFormParams['course[blueprint]'] = ObjectSerializer.serialize(courseBlueprint, "boolean");
        }

        if (courseBlueprintRestrictions !== undefined) {
            localVarFormParams['course[blueprint_restrictions]'] = ObjectSerializer.serialize(courseBlueprintRestrictions, "any");
        }

        if (courseUseBlueprintRestrictionsByObjectType !== undefined) {
            localVarFormParams['course[use_blueprint_restrictions_by_object_type]'] = ObjectSerializer.serialize(courseUseBlueprintRestrictionsByObjectType, "boolean");
        }

        if (courseBlueprintRestrictionsByObjectType !== undefined) {
            localVarFormParams['course[blueprint_restrictions_by_object_type]'] = ObjectSerializer.serialize(courseBlueprintRestrictionsByObjectType, "any");
        }

        if (courseHomeroomCourse !== undefined) {
            localVarFormParams['course[homeroom_course]'] = ObjectSerializer.serialize(courseHomeroomCourse, "boolean");
        }

        if (courseSyncEnrollmentsFromHomeroom !== undefined) {
            localVarFormParams['course[sync_enrollments_from_homeroom]'] = ObjectSerializer.serialize(courseSyncEnrollmentsFromHomeroom, "string");
        }

        if (courseHomeroomCourseId !== undefined) {
            localVarFormParams['course[homeroom_course_id]'] = ObjectSerializer.serialize(courseHomeroomCourseId, "string");
        }

        if (courseTemplate !== undefined) {
            localVarFormParams['course[template]'] = ObjectSerializer.serialize(courseTemplate, "boolean");
        }

        if (courseCourseColor !== undefined) {
            localVarFormParams['course[course_color]'] = ObjectSerializer.serialize(courseCourseColor, "string");
        }

        if (courseFriendlyName !== undefined) {
            localVarFormParams['course[friendly_name]'] = ObjectSerializer.serialize(courseFriendlyName, "string");
        }

        if (courseEnableCoursePaces !== undefined) {
            localVarFormParams['course[enable_course_paces]'] = ObjectSerializer.serialize(courseEnableCoursePaces, "boolean");
        }

        if (courseConditionalRelease !== undefined) {
            localVarFormParams['course[conditional_release]'] = ObjectSerializer.serialize(courseConditionalRelease, "boolean");
        }

        if (coursePostManually !== undefined) {
            localVarFormParams['course[post_manually]'] = ObjectSerializer.serialize(coursePostManually, "boolean");
        }

        if (overrideSisStickiness !== undefined) {
            localVarFormParams['override_sis_stickiness'] = ObjectSerializer.serialize(overrideSisStickiness, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Can update the following course settings:
     * @summary Update course settings
     * @param courseId ID
     * @param allowFinalGradeOverride Let student final grades for a grading period or the total grades for the course be overridden
     * @param allowStudentDiscussionTopics Let students create discussion topics
     * @param allowStudentForumAttachments Let students attach files to discussions
     * @param allowStudentDiscussionEditing Let students edit or delete their own discussion replies
     * @param allowStudentOrganizedGroups Let students organize their own groups
     * @param allowStudentDiscussionReporting Let students report offensive discussion content
     * @param allowStudentAnonymousDiscussionTopics Let students create anonymous discussion topics
     * @param filterSpeedGraderByStudentGroup Filter SpeedGrader to only the selected student group
     * @param hideFinalGrades Hide totals in student grades summary
     * @param hideDistributionGraphs Hide grade distribution graphs from students
     * @param hideSectionsOnCourseUsersPage Disallow students from viewing students in sections they do not belong to
     * @param lockAllAnnouncements Disable comments on announcements
     * @param usageRightsRequired Copyright and license information must be provided for files before they are published.
     * @param restrictStudentPastView Restrict students from viewing courses after end date
     * @param restrictStudentFutureView Restrict students from viewing courses before start date
     * @param showAnnouncementsOnHomePage Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit). Canvas for Elementary subjects ignore this setting.
     * @param homePageAnnouncementLimit Limit the number of announcements on the home page if enabled via show_announcements_on_home_page
     * @param syllabusCourseSummary Show the course summary (list of assignments and calendar events) on the syllabus page. Default is true.
     * @param defaultDueTime Set the default due time for assignments. This is the time that will be pre-selected in the Canvas user interface when setting a due date for an assignment. It does not change when any existing assignment is due. It should be given in 24-hour HH:MM:SS format. The default is \\\&quot;23:59:59\\\&quot;. Use \\\&quot;inherit\\\&quot; to inherit the account setting.
     * @param conditionalRelease Enable or disable individual learning paths for students based on assessment
     */
    public async updateCourseSettings (courseId: string, allowFinalGradeOverride?: boolean, allowStudentDiscussionTopics?: boolean, allowStudentForumAttachments?: boolean, allowStudentDiscussionEditing?: boolean, allowStudentOrganizedGroups?: boolean, allowStudentDiscussionReporting?: boolean, allowStudentAnonymousDiscussionTopics?: boolean, filterSpeedGraderByStudentGroup?: boolean, hideFinalGrades?: boolean, hideDistributionGraphs?: boolean, hideSectionsOnCourseUsersPage?: boolean, lockAllAnnouncements?: boolean, usageRightsRequired?: boolean, restrictStudentPastView?: boolean, restrictStudentFutureView?: boolean, showAnnouncementsOnHomePage?: boolean, homePageAnnouncementLimit?: number, syllabusCourseSummary?: boolean, defaultDueTime?: string, conditionalRelease?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/settings'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling updateCourseSettings.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (allowFinalGradeOverride !== undefined) {
            localVarFormParams['allow_final_grade_override'] = ObjectSerializer.serialize(allowFinalGradeOverride, "boolean");
        }

        if (allowStudentDiscussionTopics !== undefined) {
            localVarFormParams['allow_student_discussion_topics'] = ObjectSerializer.serialize(allowStudentDiscussionTopics, "boolean");
        }

        if (allowStudentForumAttachments !== undefined) {
            localVarFormParams['allow_student_forum_attachments'] = ObjectSerializer.serialize(allowStudentForumAttachments, "boolean");
        }

        if (allowStudentDiscussionEditing !== undefined) {
            localVarFormParams['allow_student_discussion_editing'] = ObjectSerializer.serialize(allowStudentDiscussionEditing, "boolean");
        }

        if (allowStudentOrganizedGroups !== undefined) {
            localVarFormParams['allow_student_organized_groups'] = ObjectSerializer.serialize(allowStudentOrganizedGroups, "boolean");
        }

        if (allowStudentDiscussionReporting !== undefined) {
            localVarFormParams['allow_student_discussion_reporting'] = ObjectSerializer.serialize(allowStudentDiscussionReporting, "boolean");
        }

        if (allowStudentAnonymousDiscussionTopics !== undefined) {
            localVarFormParams['allow_student_anonymous_discussion_topics'] = ObjectSerializer.serialize(allowStudentAnonymousDiscussionTopics, "boolean");
        }

        if (filterSpeedGraderByStudentGroup !== undefined) {
            localVarFormParams['filter_speed_grader_by_student_group'] = ObjectSerializer.serialize(filterSpeedGraderByStudentGroup, "boolean");
        }

        if (hideFinalGrades !== undefined) {
            localVarFormParams['hide_final_grades'] = ObjectSerializer.serialize(hideFinalGrades, "boolean");
        }

        if (hideDistributionGraphs !== undefined) {
            localVarFormParams['hide_distribution_graphs'] = ObjectSerializer.serialize(hideDistributionGraphs, "boolean");
        }

        if (hideSectionsOnCourseUsersPage !== undefined) {
            localVarFormParams['hide_sections_on_course_users_page'] = ObjectSerializer.serialize(hideSectionsOnCourseUsersPage, "boolean");
        }

        if (lockAllAnnouncements !== undefined) {
            localVarFormParams['lock_all_announcements'] = ObjectSerializer.serialize(lockAllAnnouncements, "boolean");
        }

        if (usageRightsRequired !== undefined) {
            localVarFormParams['usage_rights_required'] = ObjectSerializer.serialize(usageRightsRequired, "boolean");
        }

        if (restrictStudentPastView !== undefined) {
            localVarFormParams['restrict_student_past_view'] = ObjectSerializer.serialize(restrictStudentPastView, "boolean");
        }

        if (restrictStudentFutureView !== undefined) {
            localVarFormParams['restrict_student_future_view'] = ObjectSerializer.serialize(restrictStudentFutureView, "boolean");
        }

        if (showAnnouncementsOnHomePage !== undefined) {
            localVarFormParams['show_announcements_on_home_page'] = ObjectSerializer.serialize(showAnnouncementsOnHomePage, "boolean");
        }

        if (homePageAnnouncementLimit !== undefined) {
            localVarFormParams['home_page_announcement_limit'] = ObjectSerializer.serialize(homePageAnnouncementLimit, "number");
        }

        if (syllabusCourseSummary !== undefined) {
            localVarFormParams['syllabus_course_summary'] = ObjectSerializer.serialize(syllabusCourseSummary, "boolean");
        }

        if (defaultDueTime !== undefined) {
            localVarFormParams['default_due_time'] = ObjectSerializer.serialize(defaultDueTime, "string");
        }

        if (conditionalRelease !== undefined) {
            localVarFormParams['conditional_release'] = ObjectSerializer.serialize(conditionalRelease, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint} to query the status of an operation.
     * @summary Update courses
     * @param accountId ID
     * @param courseIds List of ids of courses to update. At most 500 courses may be updated in one call.
     * @param event The action to take on each course.  Must be one of \\\&#39;offer\\\&#39;, \\\&#39;conclude\\\&#39;, \\\&#39;delete\\\&#39;, or \\\&#39;undelete\\\&#39;. * \\\&#39;offer\\\&#39; makes a course visible to students. This action is also called \\\&quot;publish\\\&quot; on the web site. * \\\&#39;conclude\\\&#39; prevents future enrollments and makes a course read-only for all participants. The course still appears   in prior-enrollment lists. * \\\&#39;delete\\\&#39; completely removes the course from the web site (including course menus and prior-enrollment lists).   All enrollments are deleted. Course content may be physically deleted at a future date. * \\\&#39;undelete\\\&#39; attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude   rather than delete a course if there is any possibility the course will be used again.) The recovered course   will be unpublished. Deleted enrollments will not be recovered.
     */
    public async updateCourses (accountId: string, courseIds: Array<string>, event: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Progress;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/courses'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling updateCourses.');
        }

        // verify required parameter 'courseIds' is not null or undefined
        if (courseIds === null || courseIds === undefined) {
            throw new Error('Required parameter courseIds was null or undefined when calling updateCourses.');
        }

        // verify required parameter 'event' is not null or undefined
        if (event === null || event === undefined) {
            throw new Error('Required parameter event was null or undefined when calling updateCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (courseIds !== undefined) {
            localVarFormParams['course_ids'] = ObjectSerializer.serialize(courseIds, "Array<string>");
        }

        if (event !== undefined) {
            localVarFormParams['event'] = ObjectSerializer.serialize(event, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Progress;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Progress");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
