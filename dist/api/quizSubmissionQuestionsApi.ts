/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { QuizSubmissionQuestion } from '../model/quizSubmissionQuestion';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum QuizSubmissionQuestionsApiApiKeys {
}

export class QuizSubmissionQuestionsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: QuizSubmissionQuestionsApiApiKeys, value: string) {
        (this.authentications as any)[QuizSubmissionQuestionsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Provide or update an answer to one or more QuizQuestions.
     * @summary Answering questions
     * @param quizSubmissionId ID
     * @param attempt The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.
     * @param validationToken The unique validation token you received when the Quiz Submission was created.
     * @param accessCode Access code for the Quiz, if any.
     * @param quizQuestions Set of question IDs and the answer value.  See {Appendix: Question Answer Formats} for the accepted answer formats for each question type.
     */
    public async answeringQuestions (quizSubmissionId: string, attempt: number, validationToken: string, accessCode?: string, quizQuestions?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<QuizSubmissionQuestion>;  }> {
        const localVarPath = this.basePath + '/v1/quiz_submissions/{quiz_submission_id}/questions'
            .replace('{' + 'quiz_submission_id' + '}', encodeURIComponent(String(quizSubmissionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'quizSubmissionId' is not null or undefined
        if (quizSubmissionId === null || quizSubmissionId === undefined) {
            throw new Error('Required parameter quizSubmissionId was null or undefined when calling answeringQuestions.');
        }

        // verify required parameter 'attempt' is not null or undefined
        if (attempt === null || attempt === undefined) {
            throw new Error('Required parameter attempt was null or undefined when calling answeringQuestions.');
        }

        // verify required parameter 'validationToken' is not null or undefined
        if (validationToken === null || validationToken === undefined) {
            throw new Error('Required parameter validationToken was null or undefined when calling answeringQuestions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (attempt !== undefined) {
            localVarFormParams['attempt'] = ObjectSerializer.serialize(attempt, "number");
        }

        if (validationToken !== undefined) {
            localVarFormParams['validation_token'] = ObjectSerializer.serialize(validationToken, "string");
        }

        if (accessCode !== undefined) {
            localVarFormParams['access_code'] = ObjectSerializer.serialize(accessCode, "string");
        }

        if (quizQuestions !== undefined) {
            localVarFormParams['quiz_questions'] = ObjectSerializer.serialize(quizQuestions, "Array<string>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<QuizSubmissionQuestion>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<QuizSubmissionQuestion>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Set a flag on a quiz question to indicate that you want to return to it later.
     * @summary Flagging a question.
     * @param quizSubmissionId ID
     * @param id ID
     * @param attempt The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.
     * @param validationToken The unique validation token you received when the Quiz Submission was created.
     * @param accessCode Access code for the Quiz, if any.
     */
    public async flaggingQuestion (quizSubmissionId: string, id: string, attempt: number, validationToken: string, accessCode?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag'
            .replace('{' + 'quiz_submission_id' + '}', encodeURIComponent(String(quizSubmissionId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'quizSubmissionId' is not null or undefined
        if (quizSubmissionId === null || quizSubmissionId === undefined) {
            throw new Error('Required parameter quizSubmissionId was null or undefined when calling flaggingQuestion.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling flaggingQuestion.');
        }

        // verify required parameter 'attempt' is not null or undefined
        if (attempt === null || attempt === undefined) {
            throw new Error('Required parameter attempt was null or undefined when calling flaggingQuestion.');
        }

        // verify required parameter 'validationToken' is not null or undefined
        if (validationToken === null || validationToken === undefined) {
            throw new Error('Required parameter validationToken was null or undefined when calling flaggingQuestion.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (attempt !== undefined) {
            localVarFormParams['attempt'] = ObjectSerializer.serialize(attempt, "number");
        }

        if (validationToken !== undefined) {
            localVarFormParams['validation_token'] = ObjectSerializer.serialize(validationToken, "string");
        }

        if (accessCode !== undefined) {
            localVarFormParams['access_code'] = ObjectSerializer.serialize(accessCode, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get a list of all the question records for this quiz submission.  <b>200 OK</b> response code is returned if the request was successful.
     * @summary Get all quiz submission questions.
     * @param quizSubmissionId ID
     * @param include Associations to include with the quiz submission question.
     */
    public async getAllQuizSubmissionQuestions (quizSubmissionId: string, include?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/quiz_submissions/{quiz_submission_id}/questions'
            .replace('{' + 'quiz_submission_id' + '}', encodeURIComponent(String(quizSubmissionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'quizSubmissionId' is not null or undefined
        if (quizSubmissionId === null || quizSubmissionId === undefined) {
            throw new Error('Required parameter quizSubmissionId was null or undefined when calling getAllQuizSubmissionQuestions.');
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Matches the intended behavior of the UI when a numerical answer is entered and returns the resulting formatted number
     * @summary Get a formatted student numerical answer.
     * @param quizSubmissionId ID
     * @param id ID
     * @param answer no description
     */
    public async getFormattedStudentNumericalAnswer (quizSubmissionId: string, id: string, answer: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/formatted_answer'
            .replace('{' + 'quiz_submission_id' + '}', encodeURIComponent(String(quizSubmissionId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'quizSubmissionId' is not null or undefined
        if (quizSubmissionId === null || quizSubmissionId === undefined) {
            throw new Error('Required parameter quizSubmissionId was null or undefined when calling getFormattedStudentNumericalAnswer.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFormattedStudentNumericalAnswer.');
        }

        // verify required parameter 'answer' is not null or undefined
        if (answer === null || answer === undefined) {
            throw new Error('Required parameter answer was null or undefined when calling getFormattedStudentNumericalAnswer.');
        }

        if (answer !== undefined) {
            localVarQueryParameters['answer'] = ObjectSerializer.serialize(answer, "any");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Remove the flag that you previously set on a quiz question after you\'ve returned to it.
     * @summary Unflagging a question.
     * @param quizSubmissionId ID
     * @param id ID
     * @param attempt The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified.
     * @param validationToken The unique validation token you received when the Quiz Submission was created.
     * @param accessCode Access code for the Quiz, if any.
     */
    public async unflaggingQuestion (quizSubmissionId: string, id: string, attempt: number, validationToken: string, accessCode?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag'
            .replace('{' + 'quiz_submission_id' + '}', encodeURIComponent(String(quizSubmissionId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'quizSubmissionId' is not null or undefined
        if (quizSubmissionId === null || quizSubmissionId === undefined) {
            throw new Error('Required parameter quizSubmissionId was null or undefined when calling unflaggingQuestion.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling unflaggingQuestion.');
        }

        // verify required parameter 'attempt' is not null or undefined
        if (attempt === null || attempt === undefined) {
            throw new Error('Required parameter attempt was null or undefined when calling unflaggingQuestion.');
        }

        // verify required parameter 'validationToken' is not null or undefined
        if (validationToken === null || validationToken === undefined) {
            throw new Error('Required parameter validationToken was null or undefined when calling unflaggingQuestion.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (attempt !== undefined) {
            localVarFormParams['attempt'] = ObjectSerializer.serialize(attempt, "number");
        }

        if (validationToken !== undefined) {
            localVarFormParams['validation_token'] = ObjectSerializer.serialize(validationToken, "string");
        }

        if (accessCode !== undefined) {
            localVarFormParams['access_code'] = ObjectSerializer.serialize(accessCode, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
