/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { DeveloperKey } from '../model/developerKey';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DeveloperKeysApiApiKeys {
}

export class DeveloperKeysApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: DeveloperKeysApiApiKeys, value: string) {
        (this.authentications as any)[DeveloperKeysApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Create a new Canvas API key. Creating an LTI 1.3 registration is not supported here and should be done via the LTI Registration API.
     * @summary Create a Developer Key
     * @param accountId ID
     * @param developerKey no description
     * @param developerKeyAutoExpireTokens Defaults to false. If true, access tokens generated by this key will expire after 1 hour.
     * @param developerKeyEmail Contact email for the key.
     * @param developerKeyIconUrl URL for a small icon to display in key list.
     * @param developerKeyName The display name.
     * @param developerKeyNotes User-provided notes about the key.
     * @param developerKeyRedirectUri Deprecated in favor of redirect_uris. Do not use.
     * @param developerKeyRedirectUris List of URLs used during OAuth2 flow to validate given redirect URI.
     * @param developerKeyVendorCode User-specified code representing the vendor that uses the key.
     * @param developerKeyVisible Defaults to true. If false, key will not be visible in the UI.
     * @param developerKeyTestClusterOnly Defaults to false. If true, key is only usable in non-production environments (test, beta). Avoids problems with beta refresh.
     * @param developerKeyClientCredentialsAudience Used in OAuth2 client credentials flow to specify the audience for the access token.
     * @param developerKeyScopes List of API endpoints key is allowed to access.
     * @param developerKeyRequireScopes If true, then token requests with this key must include scopes.
     * @param developerKeyAllowIncludes If true, allows &#x60;includes&#x60; parameters in API requests that match the scopes of this key.
     */
    public async createDeveloperKey (accountId: string, developerKey: any, developerKeyAutoExpireTokens?: boolean, developerKeyEmail?: string, developerKeyIconUrl?: string, developerKeyName?: string, developerKeyNotes?: string, developerKeyRedirectUri?: string, developerKeyRedirectUris?: Array<string>, developerKeyVendorCode?: string, developerKeyVisible?: boolean, developerKeyTestClusterOnly?: boolean, developerKeyClientCredentialsAudience?: string, developerKeyScopes?: Array<string>, developerKeyRequireScopes?: boolean, developerKeyAllowIncludes?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DeveloperKey;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/developer_keys'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling createDeveloperKey.');
        }

        // verify required parameter 'developerKey' is not null or undefined
        if (developerKey === null || developerKey === undefined) {
            throw new Error('Required parameter developerKey was null or undefined when calling createDeveloperKey.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (developerKey !== undefined) {
            localVarFormParams['developer_key'] = ObjectSerializer.serialize(developerKey, "any");
        }

        if (developerKeyAutoExpireTokens !== undefined) {
            localVarFormParams['developer_key[auto_expire_tokens]'] = ObjectSerializer.serialize(developerKeyAutoExpireTokens, "boolean");
        }

        if (developerKeyEmail !== undefined) {
            localVarFormParams['developer_key[email]'] = ObjectSerializer.serialize(developerKeyEmail, "string");
        }

        if (developerKeyIconUrl !== undefined) {
            localVarFormParams['developer_key[icon_url]'] = ObjectSerializer.serialize(developerKeyIconUrl, "string");
        }

        if (developerKeyName !== undefined) {
            localVarFormParams['developer_key[name]'] = ObjectSerializer.serialize(developerKeyName, "string");
        }

        if (developerKeyNotes !== undefined) {
            localVarFormParams['developer_key[notes]'] = ObjectSerializer.serialize(developerKeyNotes, "string");
        }

        if (developerKeyRedirectUri !== undefined) {
            localVarFormParams['developer_key[redirect_uri]'] = ObjectSerializer.serialize(developerKeyRedirectUri, "string");
        }

        if (developerKeyRedirectUris !== undefined) {
            localVarFormParams['developer_key[redirect_uris]'] = ObjectSerializer.serialize(developerKeyRedirectUris, "Array<string>");
        }

        if (developerKeyVendorCode !== undefined) {
            localVarFormParams['developer_key[vendor_code]'] = ObjectSerializer.serialize(developerKeyVendorCode, "string");
        }

        if (developerKeyVisible !== undefined) {
            localVarFormParams['developer_key[visible]'] = ObjectSerializer.serialize(developerKeyVisible, "boolean");
        }

        if (developerKeyTestClusterOnly !== undefined) {
            localVarFormParams['developer_key[test_cluster_only]'] = ObjectSerializer.serialize(developerKeyTestClusterOnly, "boolean");
        }

        if (developerKeyClientCredentialsAudience !== undefined) {
            localVarFormParams['developer_key[client_credentials_audience]'] = ObjectSerializer.serialize(developerKeyClientCredentialsAudience, "string");
        }

        if (developerKeyScopes !== undefined) {
            localVarFormParams['developer_key[scopes]'] = ObjectSerializer.serialize(developerKeyScopes, "Array<string>");
        }

        if (developerKeyRequireScopes !== undefined) {
            localVarFormParams['developer_key[require_scopes]'] = ObjectSerializer.serialize(developerKeyRequireScopes, "boolean");
        }

        if (developerKeyAllowIncludes !== undefined) {
            localVarFormParams['developer_key[allow_includes]'] = ObjectSerializer.serialize(developerKeyAllowIncludes, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DeveloperKey;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DeveloperKey");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete an existing Canvas API key. Deleting an LTI 1.3 registration should be done via the LTI Registration API.
     * @summary Delete a Developer Key
     * @param id ID
     */
    public async deleteDeveloperKey (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DeveloperKey;  }> {
        const localVarPath = this.basePath + '/v1/developer_keys/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDeveloperKey.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DeveloperKey;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DeveloperKey");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * List all developer keys created in the current account.
     * @summary List Developer Keys
     * @param accountId ID
     * @param inherited Defaults to false. If true, lists keys inherited from Site Admin (and consortium parent account, if applicable).
     */
    public async listDeveloperKeys (accountId: string, inherited?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<DeveloperKey>;  }> {
        const localVarPath = this.basePath + '/v1/accounts/{account_id}/developer_keys'
            .replace('{' + 'account_id' + '}', encodeURIComponent(String(accountId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling listDeveloperKeys.');
        }

        if (inherited !== undefined) {
            localVarQueryParameters['inherited'] = ObjectSerializer.serialize(inherited, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<DeveloperKey>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<DeveloperKey>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an existing Canvas API key. Updating an LTI 1.3 registration is not supported here and should be done via the LTI Registration API.
     * @summary Update a Developer Key
     * @param id ID
     * @param developerKey no description
     * @param developerKeyAutoExpireTokens Defaults to false. If true, access tokens generated by this key will expire after 1 hour.
     * @param developerKeyEmail Contact email for the key.
     * @param developerKeyIconUrl URL for a small icon to display in key list.
     * @param developerKeyName The display name.
     * @param developerKeyNotes User-provided notes about the key.
     * @param developerKeyRedirectUri Deprecated in favor of redirect_uris. Do not use.
     * @param developerKeyRedirectUris List of URLs used during OAuth2 flow to validate given redirect URI.
     * @param developerKeyVendorCode User-specified code representing the vendor that uses the key.
     * @param developerKeyVisible Defaults to true. If false, key will not be visible in the UI.
     * @param developerKeyTestClusterOnly Defaults to false. If true, key is only usable in non-production environments (test, beta). Avoids problems with beta refresh.
     * @param developerKeyClientCredentialsAudience Used in OAuth2 client credentials flow to specify the audience for the access token.
     * @param developerKeyScopes List of API endpoints key is allowed to access.
     * @param developerKeyRequireScopes If true, then token requests with this key must include scopes.
     * @param developerKeyAllowIncludes If true, allows &#x60;includes&#x60; parameters in API requests that match the scopes of this key.
     */
    public async updateDeveloperKey (id: string, developerKey: any, developerKeyAutoExpireTokens?: boolean, developerKeyEmail?: string, developerKeyIconUrl?: string, developerKeyName?: string, developerKeyNotes?: string, developerKeyRedirectUri?: string, developerKeyRedirectUris?: Array<string>, developerKeyVendorCode?: string, developerKeyVisible?: boolean, developerKeyTestClusterOnly?: boolean, developerKeyClientCredentialsAudience?: string, developerKeyScopes?: Array<string>, developerKeyRequireScopes?: boolean, developerKeyAllowIncludes?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DeveloperKey;  }> {
        const localVarPath = this.basePath + '/v1/developer_keys/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDeveloperKey.');
        }

        // verify required parameter 'developerKey' is not null or undefined
        if (developerKey === null || developerKey === undefined) {
            throw new Error('Required parameter developerKey was null or undefined when calling updateDeveloperKey.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (developerKey !== undefined) {
            localVarFormParams['developer_key'] = ObjectSerializer.serialize(developerKey, "any");
        }

        if (developerKeyAutoExpireTokens !== undefined) {
            localVarFormParams['developer_key[auto_expire_tokens]'] = ObjectSerializer.serialize(developerKeyAutoExpireTokens, "boolean");
        }

        if (developerKeyEmail !== undefined) {
            localVarFormParams['developer_key[email]'] = ObjectSerializer.serialize(developerKeyEmail, "string");
        }

        if (developerKeyIconUrl !== undefined) {
            localVarFormParams['developer_key[icon_url]'] = ObjectSerializer.serialize(developerKeyIconUrl, "string");
        }

        if (developerKeyName !== undefined) {
            localVarFormParams['developer_key[name]'] = ObjectSerializer.serialize(developerKeyName, "string");
        }

        if (developerKeyNotes !== undefined) {
            localVarFormParams['developer_key[notes]'] = ObjectSerializer.serialize(developerKeyNotes, "string");
        }

        if (developerKeyRedirectUri !== undefined) {
            localVarFormParams['developer_key[redirect_uri]'] = ObjectSerializer.serialize(developerKeyRedirectUri, "string");
        }

        if (developerKeyRedirectUris !== undefined) {
            localVarFormParams['developer_key[redirect_uris]'] = ObjectSerializer.serialize(developerKeyRedirectUris, "Array<string>");
        }

        if (developerKeyVendorCode !== undefined) {
            localVarFormParams['developer_key[vendor_code]'] = ObjectSerializer.serialize(developerKeyVendorCode, "string");
        }

        if (developerKeyVisible !== undefined) {
            localVarFormParams['developer_key[visible]'] = ObjectSerializer.serialize(developerKeyVisible, "boolean");
        }

        if (developerKeyTestClusterOnly !== undefined) {
            localVarFormParams['developer_key[test_cluster_only]'] = ObjectSerializer.serialize(developerKeyTestClusterOnly, "boolean");
        }

        if (developerKeyClientCredentialsAudience !== undefined) {
            localVarFormParams['developer_key[client_credentials_audience]'] = ObjectSerializer.serialize(developerKeyClientCredentialsAudience, "string");
        }

        if (developerKeyScopes !== undefined) {
            localVarFormParams['developer_key[scopes]'] = ObjectSerializer.serialize(developerKeyScopes, "Array<string>");
        }

        if (developerKeyRequireScopes !== undefined) {
            localVarFormParams['developer_key[require_scopes]'] = ObjectSerializer.serialize(developerKeyRequireScopes, "boolean");
        }

        if (developerKeyAllowIncludes !== undefined) {
            localVarFormParams['developer_key[allow_includes]'] = ObjectSerializer.serialize(developerKeyAllowIncludes, "boolean");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DeveloperKey;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DeveloperKey");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
