/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { LineItem } from '../model/lineItem';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum LineItemsApiApiKeys {
}

export class LineItemsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: LineItemsApiApiKeys, value: string) {
        (this.authentications as any)[LineItemsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Create a new Line Item
     * @summary Create a Line Item
     * @param courseId ID
     * @param scoreMaximum The maximum score for the line item. Scores created for the Line Item may exceed this value.
     * @param label The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment.
     * @param resourceId A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.
     * @param tag A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.
     * @param resourceLinkId The resource link id the Line Item should be attached to. This value should match the LTI id of the Canvas assignment associated with the tool.
     * @param startDateTime The ISO8601 date and time when the line item is made available. Corresponds to the assignment\\\&#39;s unlock_at date.
     * @param endDateTime The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment\\\&#39;s due_at date.
     * @param httpsCanvasInstructureComLtiSubmissionType (EXTENSION) - Optional block to set Assignment Submission Type when creating a new assignment is created. type - \\\&#39;none\\\&#39; or \\\&#39;external_tool\\\&#39;:: external_tool_url - Submission URL only used when type: \\\&#39;external_tool\\\&#39;::
     */
    public async createLineItem (courseId: string, scoreMaximum: number, label: string, resourceId?: string, tag?: string, resourceLinkId?: string, startDateTime?: string, endDateTime?: string, httpsCanvasInstructureComLtiSubmissionType?: object, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LineItem;  }> {
        const localVarPath = this.basePath + '/lti/courses/{course_id}/line_items'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling createLineItem.');
        }

        // verify required parameter 'scoreMaximum' is not null or undefined
        if (scoreMaximum === null || scoreMaximum === undefined) {
            throw new Error('Required parameter scoreMaximum was null or undefined when calling createLineItem.');
        }

        // verify required parameter 'label' is not null or undefined
        if (label === null || label === undefined) {
            throw new Error('Required parameter label was null or undefined when calling createLineItem.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (scoreMaximum !== undefined) {
            localVarFormParams['scoreMaximum'] = ObjectSerializer.serialize(scoreMaximum, "number");
        }

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (resourceId !== undefined) {
            localVarFormParams['resourceId'] = ObjectSerializer.serialize(resourceId, "string");
        }

        if (tag !== undefined) {
            localVarFormParams['tag'] = ObjectSerializer.serialize(tag, "string");
        }

        if (resourceLinkId !== undefined) {
            localVarFormParams['resourceLinkId'] = ObjectSerializer.serialize(resourceLinkId, "string");
        }

        if (startDateTime !== undefined) {
            localVarFormParams['startDateTime'] = ObjectSerializer.serialize(startDateTime, "string");
        }

        if (endDateTime !== undefined) {
            localVarFormParams['endDateTime'] = ObjectSerializer.serialize(endDateTime, "string");
        }

        if (httpsCanvasInstructureComLtiSubmissionType !== undefined) {
            localVarFormParams['https://canvas.instructure.com/lti/submission_type'] = ObjectSerializer.serialize(httpsCanvasInstructureComLtiSubmissionType, "object");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LineItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "LineItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete an existing Line Item
     * @summary Delete a Line Item
     * @param courseId ID
     * @param id ID
     */
    public async deleteLineItem (courseId: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LineItem;  }> {
        const localVarPath = this.basePath + '/lti/courses/{course_id}/line_items/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling deleteLineItem.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteLineItem.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LineItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "LineItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * List all Line Items for a course
     * @summary List line Items
     * @param courseId ID
     * @param tag If specified only Line Items with this tag will be included.
     * @param resourceId If specified only Line Items with this resource_id will be included.
     * @param resourceLinkId If specified only Line Items attached to the specified resource_link_id will be included.
     * @param limit May be used to limit the number of Line Items returned in a page
     * @param include Array of additional information to include.  \&quot;launch_url\&quot;:: includes the launch URL for each line item using the \&quot;https\\://canvas.instructure.com/lti/launch_url\&quot; extension
     */
    public async listLineItems (courseId: string, tag?: string, resourceId?: string, resourceLinkId?: string, limit?: string, include?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LineItem;  }> {
        const localVarPath = this.basePath + '/lti/courses/{course_id}/line_items'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling listLineItems.');
        }

        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }

        if (resourceId !== undefined) {
            localVarQueryParameters['resource_id'] = ObjectSerializer.serialize(resourceId, "string");
        }

        if (resourceLinkId !== undefined) {
            localVarQueryParameters['resource_link_id'] = ObjectSerializer.serialize(resourceLinkId, "string");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "string");
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LineItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "LineItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Show existing Line Item
     * @summary Show a Line Item
     * @param courseId ID
     * @param id ID
     * @param include Array of additional information to include.  \&quot;launch_url\&quot;:: includes the launch URL for this line item using the \&quot;https\\://canvas.instructure.com/lti/launch_url\&quot; extension
     */
    public async showLineItem (courseId: string, id: string, include?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LineItem;  }> {
        const localVarPath = this.basePath + '/lti/courses/{course_id}/line_items/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling showLineItem.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling showLineItem.');
        }

        if (include !== undefined) {
            localVarQueryParameters['include'] = ObjectSerializer.serialize(include, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LineItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "LineItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update new Line Item
     * @summary Update a Line Item
     * @param courseId ID
     * @param id ID
     * @param scoreMaximum The maximum score for the line item. Scores created for the Line Item may exceed this value.
     * @param label The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment.
     * @param resourceId A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.
     * @param tag A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.
     * @param startDateTime The ISO8601 date and time when the line item is made available. Corresponds to the assignment\\\&#39;s unlock_at date.
     * @param endDateTime The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment\\\&#39;s due_at date.
     */
    public async updateLineItem (courseId: string, id: string, scoreMaximum?: number, label?: string, resourceId?: string, tag?: string, startDateTime?: string, endDateTime?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LineItem;  }> {
        const localVarPath = this.basePath + '/lti/courses/{course_id}/line_items/{id}'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling updateLineItem.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateLineItem.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (scoreMaximum !== undefined) {
            localVarFormParams['scoreMaximum'] = ObjectSerializer.serialize(scoreMaximum, "number");
        }

        if (label !== undefined) {
            localVarFormParams['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (resourceId !== undefined) {
            localVarFormParams['resourceId'] = ObjectSerializer.serialize(resourceId, "string");
        }

        if (tag !== undefined) {
            localVarFormParams['tag'] = ObjectSerializer.serialize(tag, "string");
        }

        if (startDateTime !== undefined) {
            localVarFormParams['startDateTime'] = ObjectSerializer.serialize(startDateTime, "string");
        }

        if (endDateTime !== undefined) {
            localVarFormParams['endDateTime'] = ObjectSerializer.serialize(endDateTime, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LineItem;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "LineItem");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
