/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { CoursePace } from '../model/coursePace';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://canvas.instructure.com/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum CoursePaceApiApiKeys {
}

export class CoursePaceApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: CoursePaceApiApiKeys, value: string) {
        (this.authentications as any)[CoursePaceApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @summary Create a Course pace
     * @param courseId The id of the course
     * @param endDate End date of the course pace
     * @param endDateContext End date context (course, section, hupothetical)
     * @param startDate Start date of the course pace
     * @param startDateContext Start date context (course, section, hupothetical)
     * @param excludeWeekends Course pace dates excludes weekends if true
     * @param selectedDaysToSkip [Array&lt;String&gt;] Course pace dates excludes weekends if true
     * @param hardEndDates Course pace uess hard end dates if true
     * @param workflowState The state of the course pace
     * @param coursePaceModuleItemAttributes Module Items attributes
     * @param contextId Pace Context ID
     * @param contextType Pace Context Type (Course, Section, User)
     */
    public async createCoursePace (courseId: number, endDate?: Date, endDateContext?: string, startDate?: Date, startDateContext?: string, excludeWeekends?: boolean, selectedDaysToSkip?: string, hardEndDates?: boolean, workflowState?: string, coursePaceModuleItemAttributes?: Array<string>, contextId?: number, contextType?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoursePace;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/course_pacing'
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling createCoursePace.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (endDate !== undefined) {
            localVarFormParams['end_date'] = ObjectSerializer.serialize(endDate, "Date");
        }

        if (endDateContext !== undefined) {
            localVarFormParams['end_date_context'] = ObjectSerializer.serialize(endDateContext, "string");
        }

        if (startDate !== undefined) {
            localVarFormParams['start_date'] = ObjectSerializer.serialize(startDate, "Date");
        }

        if (startDateContext !== undefined) {
            localVarFormParams['start_date_context'] = ObjectSerializer.serialize(startDateContext, "string");
        }

        if (excludeWeekends !== undefined) {
            localVarFormParams['exclude_weekends'] = ObjectSerializer.serialize(excludeWeekends, "boolean");
        }

        if (selectedDaysToSkip !== undefined) {
            localVarFormParams['selected_days_to_skip'] = ObjectSerializer.serialize(selectedDaysToSkip, "string");
        }

        if (hardEndDates !== undefined) {
            localVarFormParams['hard_end_dates'] = ObjectSerializer.serialize(hardEndDates, "boolean");
        }

        if (workflowState !== undefined) {
            localVarFormParams['workflow_state'] = ObjectSerializer.serialize(workflowState, "string");
        }

        if (coursePaceModuleItemAttributes !== undefined) {
            localVarFormParams['course_pace_module_item_attributes'] = ObjectSerializer.serialize(coursePaceModuleItemAttributes, "Array<string>");
        }

        if (contextId !== undefined) {
            localVarFormParams['context_id'] = ObjectSerializer.serialize(contextId, "number");
        }

        if (contextType !== undefined) {
            localVarFormParams['context_type'] = ObjectSerializer.serialize(contextType, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoursePace;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoursePace");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the updated course pace
     * @summary Delete a Course pace
     * @param id ID
     * @param courseId The id of the course
     * @param coursePaceId The id of the course_pace
     */
    public async deleteCoursePace (id: string, courseId: number, coursePaceId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoursePace;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/course_pacing/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCoursePace.');
        }

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling deleteCoursePace.');
        }

        // verify required parameter 'coursePaceId' is not null or undefined
        if (coursePaceId === null || coursePaceId === undefined) {
            throw new Error('Required parameter coursePaceId was null or undefined when calling deleteCoursePace.');
        }

        if (coursePaceId !== undefined) {
            localVarQueryParameters['course_pace_id'] = ObjectSerializer.serialize(coursePaceId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoursePace;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoursePace");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a course pace for the course and pace id provided
     * @summary Show a Course pace
     * @param id ID
     * @param courseId The id of the course
     * @param coursePaceId The id of the course_pace
     */
    public async showCoursePace (id: string, courseId: number, coursePaceId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoursePace;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/course_pacing/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling showCoursePace.');
        }

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling showCoursePace.');
        }

        // verify required parameter 'coursePaceId' is not null or undefined
        if (coursePaceId === null || coursePaceId === undefined) {
            throw new Error('Required parameter coursePaceId was null or undefined when calling showCoursePace.');
        }

        if (coursePaceId !== undefined) {
            localVarQueryParameters['course_pace_id'] = ObjectSerializer.serialize(coursePaceId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoursePace;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoursePace");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the updated course pace
     * @summary Update a Course pace
     * @param id ID
     * @param courseId The id of the course
     * @param coursePaceId The id of the course pace
     * @param endDate End date of the course pace
     * @param excludeWeekends Course pace dates excludes weekends if true
     * @param selectedDaysToSkip [Array&lt;String&gt;] Course pace dates excludes weekends if true
     * @param hardEndDates Course pace uess hard end dates if true
     * @param workflowState The state of the course pace
     * @param coursePaceModuleItemAttributes Module Items attributes
     */
    public async updateCoursePace (id: string, courseId: number, coursePaceId: number, endDate?: Date, excludeWeekends?: boolean, selectedDaysToSkip?: string, hardEndDates?: boolean, workflowState?: string, coursePaceModuleItemAttributes?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoursePace;  }> {
        const localVarPath = this.basePath + '/v1/courses/{course_id}/course_pacing/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'course_id' + '}', encodeURIComponent(String(courseId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCoursePace.');
        }

        // verify required parameter 'courseId' is not null or undefined
        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling updateCoursePace.');
        }

        // verify required parameter 'coursePaceId' is not null or undefined
        if (coursePaceId === null || coursePaceId === undefined) {
            throw new Error('Required parameter coursePaceId was null or undefined when calling updateCoursePace.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (coursePaceId !== undefined) {
            localVarFormParams['course_pace_id'] = ObjectSerializer.serialize(coursePaceId, "number");
        }

        if (endDate !== undefined) {
            localVarFormParams['end_date'] = ObjectSerializer.serialize(endDate, "Date");
        }

        if (excludeWeekends !== undefined) {
            localVarFormParams['exclude_weekends'] = ObjectSerializer.serialize(excludeWeekends, "boolean");
        }

        if (selectedDaysToSkip !== undefined) {
            localVarFormParams['selected_days_to_skip'] = ObjectSerializer.serialize(selectedDaysToSkip, "string");
        }

        if (hardEndDates !== undefined) {
            localVarFormParams['hard_end_dates'] = ObjectSerializer.serialize(hardEndDates, "boolean");
        }

        if (workflowState !== undefined) {
            localVarFormParams['workflow_state'] = ObjectSerializer.serialize(workflowState, "string");
        }

        if (coursePaceModuleItemAttributes !== undefined) {
            localVarFormParams['course_pace_module_item_attributes'] = ObjectSerializer.serialize(coursePaceModuleItemAttributes, "Array<string>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoursePace;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoursePace");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
