/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { MultipleAttemptsSettings } from './multipleAttemptsSettings';
import { ResultViewSettings } from './resultViewSettings';

export class QuizSettings {
    /**
    * whether to allow user to return to previous questions when \'one_at_a_time_type\' is set to \'question\'
    */
    'allowBacktracking'?: boolean;
    /**
    * type of calculator the user will have access to during the quiz (\'none\', basic\' or \'scientific\')
    */
    'calculatorType'?: string;
    /**
    * whether access to the quiz should be restricted to the IP address ranges described in \'filters\'
    */
    'filterIpAddress'?: boolean;
    /**
    * IP address ranges from which users can take the quiz, if \'filter_ip_address\' is true
    */
    'filters'?: object;
    /**
    * whether the quiz has a time limit (set as \'session_time_limit_in_seconds\')
    */
    'hasTimeLimit'?: boolean;
    'multipleAttempts'?: MultipleAttemptsSettings;
    /**
    * whether questions should be shown all at once (\'none\') or one-at-a-time (\'question\')
    */
    'oneAtATimeType'?: string;
    /**
    * whether to require an access code to take the quiz (set as \'student_access_code\')
    */
    'requireStudentAccessCode'?: boolean;
    'resultViewSettings'?: ResultViewSettings;
    /**
    * time limit during the quiz (in seconds)
    */
    'sessionTimeLimitInSeconds'?: number;
    /**
    * whether answers should be shuffled during quiz
    */
    'shuffleAnswers'?: boolean;
    /**
    * whether questions should be shuffled during quiz
    */
    'shuffleQuestions'?: boolean;
    /**
    * access code that is required to take the quiz if \'require_student_access_code\' is true
    */
    'studentAccessCode'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowBacktracking",
            "baseName": "allow_backtracking",
            "type": "boolean"
        },
        {
            "name": "calculatorType",
            "baseName": "calculator_type",
            "type": "string"
        },
        {
            "name": "filterIpAddress",
            "baseName": "filter_ip_address",
            "type": "boolean"
        },
        {
            "name": "filters",
            "baseName": "filters",
            "type": "object"
        },
        {
            "name": "hasTimeLimit",
            "baseName": "has_time_limit",
            "type": "boolean"
        },
        {
            "name": "multipleAttempts",
            "baseName": "multiple_attempts",
            "type": "MultipleAttemptsSettings"
        },
        {
            "name": "oneAtATimeType",
            "baseName": "one_at_a_time_type",
            "type": "string"
        },
        {
            "name": "requireStudentAccessCode",
            "baseName": "require_student_access_code",
            "type": "boolean"
        },
        {
            "name": "resultViewSettings",
            "baseName": "result_view_settings",
            "type": "ResultViewSettings"
        },
        {
            "name": "sessionTimeLimitInSeconds",
            "baseName": "session_time_limit_in_seconds",
            "type": "number"
        },
        {
            "name": "shuffleAnswers",
            "baseName": "shuffle_answers",
            "type": "boolean"
        },
        {
            "name": "shuffleQuestions",
            "baseName": "shuffle_questions",
            "type": "boolean"
        },
        {
            "name": "studentAccessCode",
            "baseName": "student_access_code",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return QuizSettings.attributeTypeMap;
    }
}

