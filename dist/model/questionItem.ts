/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { QuestionFeedback } from './questionFeedback';

export class QuestionItem {
    /**
    * feedback provided for each answer (rich content, only available on \'choice\' question types)
    */
    'answerFeedback'?: object;
    /**
    * type of calculator the user will have access to during the question (\'none\', basic\' or \'scientific\')
    */
    'calculatorType'?: string;
    'feedback'?: QuestionFeedback;
    /**
    * an object that contains the question data. See Appendix: Question Types for more info about this field.
    */
    'interactionData'?: object;
    /**
    * can be thought of as the question type. One of \'multi-answer\', \'matching\', \'categorization\',       \'file-upload\', \'formula\', \'ordering\', \'rich-fill-blank\', \'hot-spot\', \'choice\', \'numeric\', \'true-false\',       \'essay\', or \'fill-blank\' (deprecated). See Appendix: Question Types for more info about each type.
    */
    'interactionTypeSlug'?: string;
    /**
    * the question content (can include html for rich content)
    */
    'itemBody'?: string;
    /**
    * an object that contains additional properties for some question types. See Appendix: Question Types for more info about this field.
    */
    'properties'?: object;
    /**
    * the algorithm used to score the question. See Appendix: Question Types for more info about this field.
    */
    'scoringAlgorithm'?: string;
    /**
    * describes how to score the question. See Appendix: Question Types for more info about this field.
    */
    'scoringData'?: object;
    /**
    * the question title
    */
    'title'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "answerFeedback",
            "baseName": "answer_feedback",
            "type": "object"
        },
        {
            "name": "calculatorType",
            "baseName": "calculator_type",
            "type": "string"
        },
        {
            "name": "feedback",
            "baseName": "feedback",
            "type": "QuestionFeedback"
        },
        {
            "name": "interactionData",
            "baseName": "interaction_data",
            "type": "object"
        },
        {
            "name": "interactionTypeSlug",
            "baseName": "interaction_type_slug",
            "type": "string"
        },
        {
            "name": "itemBody",
            "baseName": "item_body",
            "type": "string"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "object"
        },
        {
            "name": "scoringAlgorithm",
            "baseName": "scoring_algorithm",
            "type": "string"
        },
        {
            "name": "scoringData",
            "baseName": "scoring_data",
            "type": "object"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return QuestionItem.attributeTypeMap;
    }
}

