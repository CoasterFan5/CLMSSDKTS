/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* The tool\'s configuration for a specific placement
*/
export class LtiPlacement {
    /**
    * Comma-separated list of media types that the tool can accept. Only valid for file_item.
    */
    'acceptMediaTypes'?: string;
    /**
    * The HTML class name of an InstUI Icon. Used instead of an icon_url in select placements.
    */
    'canvasIconClass'?: string;
    /**
    * Placement-specific custom fields to send in the launch. Merged with tool-level custom fields.
    */
    'customFields'?: object;
    /**
    * Default display state for course_navigation. If \'enabled\', will show in course sidebar. If \'disabled\', will be hidden.
    */
    '_default'?: string;
    /**
    * The Canvas layout to use when launching the tool. See the Navigation Placement docs.
    */
    'displayType'?: LtiPlacement.DisplayTypeEnum;
    /**
    * If true, the tool will show in this placement. If false, it will not.
    */
    'enabled'?: boolean;
    /**
    * An SVG to use instead of an icon_url. Only valid for global_navigation.
    */
    'iconSvgPath64'?: string;
    /**
    * Default icon URL. Not valid for all placements. Overrides tool-level icon_url.
    */
    'iconUrl'?: string;
    /**
    * Canvas-specific i18n for placement text. See the Navigation Placement docs.
    */
    'labels'?: object;
    /**
    * Default iframe height. Not valid for all placements. Overrides tool-level launch_height.
    */
    'launchHeight'?: number;
    /**
    * Default iframe width. Not valid for all placements. Overrides tool-level launch_width.
    */
    'launchWidth'?: number;
    /**
    * Default message type for all placements
    */
    'messageType'?: LtiPlacement.MessageTypeEnum;
    /**
    * (Only applies to 1.1) If true, Canvas will not copy launch URL query parameters to the POST body.
    */
    'oauthCompliant'?: boolean;
    /**
    * The name of the placement.
    */
    'placement'?: LtiPlacement.PlacementEnum;
    /**
    * 1.1 specific. If true, the tool will send the SIS email in the lis_person_contact_email_primary launch property
    */
    'preferSisEmail'?: boolean;
    /**
    * Comma-separated list of Canvas permission short names required for a user to launch from this placement.
    */
    'requiredPermissions'?: string;
    /**
    * Default iframe height. Not valid for all placements. Overrides tool-level launch_height.
    */
    'selectionHeight'?: number;
    /**
    * Default iframe width. Not valid for all placements. Overrides tool-level launch_width.
    */
    'selectionWidth'?: number;
    /**
    * The 1.3 launch URL for this placement. Overrides tool-level target_link_uri.
    */
    'targetLinkUri'?: string;
    /**
    * The text of the link to the tool (if applicable).
    */
    'text'?: string;
    /**
    * The 1.1 launch URL for this placement. Overrides tool-level url.
    */
    'url'?: string;
    /**
    * If true, the tool will be launched in the tray. Only used by the editor_button placement.
    */
    'useTray'?: boolean;
    /**
    * Specifies types of users that can see this placement. Only valid for some placements like course_navigation.
    */
    'visibility'?: LtiPlacement.VisibilityEnum;
    /**
    * When set to \'_blank\', opens placement in a new tab.
    */
    'windowTarget'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "acceptMediaTypes",
            "baseName": "accept_media_types",
            "type": "string"
        },
        {
            "name": "canvasIconClass",
            "baseName": "canvas_icon_class",
            "type": "string"
        },
        {
            "name": "customFields",
            "baseName": "custom_fields",
            "type": "object"
        },
        {
            "name": "_default",
            "baseName": "default",
            "type": "string"
        },
        {
            "name": "displayType",
            "baseName": "display_type",
            "type": "LtiPlacement.DisplayTypeEnum"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "iconSvgPath64",
            "baseName": "icon_svg_path_64",
            "type": "string"
        },
        {
            "name": "iconUrl",
            "baseName": "icon_url",
            "type": "string"
        },
        {
            "name": "labels",
            "baseName": "labels",
            "type": "object"
        },
        {
            "name": "launchHeight",
            "baseName": "launch_height",
            "type": "number"
        },
        {
            "name": "launchWidth",
            "baseName": "launch_width",
            "type": "number"
        },
        {
            "name": "messageType",
            "baseName": "message_type",
            "type": "LtiPlacement.MessageTypeEnum"
        },
        {
            "name": "oauthCompliant",
            "baseName": "oauth_compliant",
            "type": "boolean"
        },
        {
            "name": "placement",
            "baseName": "placement",
            "type": "LtiPlacement.PlacementEnum"
        },
        {
            "name": "preferSisEmail",
            "baseName": "prefer_sis_email",
            "type": "boolean"
        },
        {
            "name": "requiredPermissions",
            "baseName": "required_permissions",
            "type": "string"
        },
        {
            "name": "selectionHeight",
            "baseName": "selection_height",
            "type": "number"
        },
        {
            "name": "selectionWidth",
            "baseName": "selection_width",
            "type": "number"
        },
        {
            "name": "targetLinkUri",
            "baseName": "target_link_uri",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "useTray",
            "baseName": "use_tray",
            "type": "boolean"
        },
        {
            "name": "visibility",
            "baseName": "visibility",
            "type": "LtiPlacement.VisibilityEnum"
        },
        {
            "name": "windowTarget",
            "baseName": "windowTarget",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return LtiPlacement.attributeTypeMap;
    }
}

export namespace LtiPlacement {
    export enum DisplayTypeEnum {
        Default = <any> 'default',
        FullWidth = <any> 'full_width',
        FullWidthInContext = <any> 'full_width_in_context',
        FullWidthWithNav = <any> 'full_width_with_nav',
        InNavContext = <any> 'in_nav_context',
        Borderless = <any> 'borderless'
    }
    export enum MessageTypeEnum {
        LtiResourceLinkRequest = <any> 'LtiResourceLinkRequest',
        LtiDeepLinkingRequest = <any> 'LtiDeepLinkingRequest'
    }
    export enum PlacementEnum {
        AccountNavigation = <any> 'account_navigation',
        AnalyticsHub = <any> 'analytics_hub',
        AssignmentEdit = <any> 'assignment_edit',
        AssignmentGroupMenu = <any> 'assignment_group_menu',
        AssignmentIndexMenu = <any> 'assignment_index_menu',
        AssignmentMenu = <any> 'assignment_menu',
        AssignmentSelection = <any> 'assignment_selection',
        AssignmentView = <any> 'assignment_view',
        Collaboration = <any> 'collaboration',
        ConferenceSelection = <any> 'conference_selection',
        CourseAssignmentsMenu = <any> 'course_assignments_menu',
        CourseHomeSubNavigation = <any> 'course_home_sub_navigation',
        CourseNavigation = <any> 'course_navigation',
        CourseSettingsSubNavigation = <any> 'course_settings_sub_navigation',
        DiscussionTopicIndexMenu = <any> 'discussion_topic_index_menu',
        DiscussionTopicMenu = <any> 'discussion_topic_menu',
        FileIndexMenu = <any> 'file_index_menu',
        FileMenu = <any> 'file_menu',
        GlobalNavigation = <any> 'global_navigation',
        HomeworkSubmission = <any> 'homework_submission',
        LinkSelection = <any> 'link_selection',
        MigrationSelection = <any> 'migration_selection',
        ModuleGroupMenu = <any> 'module_group_menu',
        ModuleIndexMenu = <any> 'module_index_menu',
        ModuleIndexMenuModal = <any> 'module_index_menu_modal',
        ModuleMenuModal = <any> 'module_menu_modal',
        ModuleMenu = <any> 'module_menu',
        PostGrades = <any> 'post_grades',
        QuizIndexMenu = <any> 'quiz_index_menu',
        QuizMenu = <any> 'quiz_menu',
        ResourceSelection = <any> 'resource_selection',
        SimilarityDetection = <any> 'similarity_detection',
        StudentContextCard = <any> 'student_context_card',
        SubmissionTypeSelection = <any> 'submission_type_selection',
        ToolConfiguration = <any> 'tool_configuration',
        TopNavigation = <any> 'top_navigation',
        UserNavigation = <any> 'user_navigation',
        WikiIndexMenu = <any> 'wiki_index_menu',
        WikiPageMenu = <any> 'wiki_page_menu',
        EditorButton = <any> 'editor_button'
    }
    export enum VisibilityEnum {
        Admins = <any> 'admins',
        Members = <any> 'members',
        Public = <any> 'public'
    }
}
