/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AssignmentOverride } from './assignmentOverride';

export class LearningObjectDates {
    /**
    * [exclusive to blueprint child content only] list of lock types
    */
    'blueprintDateLocks'?: Array<string>;
    /**
    * list of Checkpoint objects, only present if a learning object has subAssignments
    */
    'checkpoints'?: Array<LearningObjectDates>;
    /**
    * the due date for the learning object. returns null if not present or applicable. never applicable for ungraded discussions, pages, and files
    */
    'dueAt'?: Date;
    /**
    * whether the learning object is graded (and thus has a due date)
    */
    'graded'?: boolean;
    /**
    * the ID of the learning object (not present for checkpoints)
    */
    'id'?: number;
    /**
    * the lock date (learning object is locked after this date). returns null if not present
    */
    'lockAt'?: Date;
    /**
    * whether the learning object is only visible to overrides
    */
    'onlyVisibleToOverrides'?: boolean;
    /**
    * paginated list of AssignmentOverride objects
    */
    'overrides'?: Array<AssignmentOverride>;
    /**
    * the reply_to_topic sub_assignment due_date. returns null if not present
    */
    'replyToTopicDueAt'?: Date;
    /**
    * the reply_to_entry sub_assignment due_date. returns null if not present
    */
    'requiredRepliesDueAt'?: Date;
    /**
    * the tag identifying the type of checkpoint (only present for checkpoints)
    */
    'tag'?: string;
    /**
    * the unlock date (learning object is unlocked after this date). returns null if not present
    */
    'unlockAt'?: Date;
    /**
    * whether the learning object is visible to everyone
    */
    'visibleToEveryone'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "blueprintDateLocks",
            "baseName": "blueprint_date_locks",
            "type": "Array<string>"
        },
        {
            "name": "checkpoints",
            "baseName": "checkpoints",
            "type": "Array<LearningObjectDates>"
        },
        {
            "name": "dueAt",
            "baseName": "due_at",
            "type": "Date"
        },
        {
            "name": "graded",
            "baseName": "graded",
            "type": "boolean"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "lockAt",
            "baseName": "lock_at",
            "type": "Date"
        },
        {
            "name": "onlyVisibleToOverrides",
            "baseName": "only_visible_to_overrides",
            "type": "boolean"
        },
        {
            "name": "overrides",
            "baseName": "overrides",
            "type": "Array<AssignmentOverride>"
        },
        {
            "name": "replyToTopicDueAt",
            "baseName": "reply_to_topic_due_at",
            "type": "Date"
        },
        {
            "name": "requiredRepliesDueAt",
            "baseName": "required_replies_due_at",
            "type": "Date"
        },
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "unlockAt",
            "baseName": "unlock_at",
            "type": "Date"
        },
        {
            "name": "visibleToEveryone",
            "baseName": "visible_to_everyone",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return LearningObjectDates.attributeTypeMap;
    }
}

