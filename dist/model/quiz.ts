/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AssignmentDate } from './assignmentDate';
import { LockInfo } from './lockInfo';
import { QuizPermissions } from './quizPermissions';

export class Quiz {
    /**
    * access code to restrict quiz access
    */
    'accessCode'?: string;
    /**
    * list of due dates for the quiz
    */
    'allDates'?: Array<AssignmentDate>;
    /**
    * how many times a student can take the quiz -1 = unlimited attempts
    */
    'allowedAttempts'?: number;
    /**
    * Whether survey submissions will be kept anonymous (only applicable to \'graded_survey\', \'survey\' quiz types)
    */
    'anonymousSubmissions'?: boolean;
    /**
    * the ID of the quiz\'s assignment group:
    */
    'assignmentGroupId'?: number;
    /**
    * lock questions after answering? only valid if one_question_at_a_time=true
    */
    'cantGoBack'?: boolean;
    /**
    * the description of the quiz
    */
    'description'?: string;
    /**
    * when the quiz is due
    */
    'dueAt'?: Date;
    /**
    * prevent the students from seeing correct answers after the specified date has passed. only valid if show_correct_answers=true
    */
    'hideCorrectAnswersAt'?: Date;
    /**
    * let students see their quiz responses? possible values: null, \'always\', \'until_after_last_attempt\'
    */
    'hideResults'?: string;
    /**
    * the HTTP/HTTPS URL to the quiz
    */
    'htmlUrl'?: string;
    /**
    * the ID of the quiz
    */
    'id'?: number;
    /**
    * IP address or range that quiz access is limited to
    */
    'ipFilter'?: string;
    /**
    * when to lock the quiz
    */
    'lockAt'?: Date;
    /**
    * (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.
    */
    'lockExplanation'?: string;
    'lockInfo'?: LockInfo;
    /**
    * Whether or not this is locked for the user.
    */
    'lockedForUser'?: boolean;
    /**
    * a url suitable for loading the quiz in a mobile webview.  it will persiste the headless session and, for quizzes in public courses, will force the user to login
    */
    'mobileUrl'?: string;
    /**
    * show one question at a time?
    */
    'oneQuestionAtATime'?: boolean;
    /**
    * prevent the students from seeing their results more than once (right after they submit the quiz)
    */
    'oneTimeResults'?: boolean;
    'permissions'?: QuizPermissions;
    /**
    * The total point value given to the quiz
    */
    'pointsPossible'?: number;
    /**
    * A url that can be visited in the browser with a POST request to preview a quiz as the teacher. Only present when the user may grade
    */
    'previewUrl'?: string;
    /**
    * whether the quiz has a published or unpublished draft state.
    */
    'published'?: boolean;
    /**
    * the number of questions in the quiz
    */
    'questionCount'?: number;
    /**
    * List of question types in the quiz
    */
    'questionTypes'?: Array<string>;
    /**
    * Link to endpoint to send extensions for this quiz.
    */
    'quizExtensionsUrl'?: string;
    /**
    * type of quiz possible values: \'practice_quiz\', \'assignment\', \'graded_survey\', \'survey\'
    */
    'quizType'?: string;
    /**
    * which quiz score to keep (only if allowed_attempts != 1) possible values: \'keep_highest\', \'keep_latest\'
    */
    'scoringPolicy'?: string;
    /**
    * show which answers were correct when results are shown? only valid if hide_results=null
    */
    'showCorrectAnswers'?: boolean;
    /**
    * when should the correct answers be visible by students? only valid if show_correct_answers=true
    */
    'showCorrectAnswersAt'?: Date;
    /**
    * restrict the show_correct_answers option above to apply only to the last submitted attempt of a quiz that allows multiple attempts. only valid if show_correct_answers=true and allowed_attempts > 1
    */
    'showCorrectAnswersLastAttempt'?: boolean;
    /**
    * shuffle answers for students?
    */
    'shuffleAnswers'?: boolean;
    /**
    * Link to SpeedGrader for this quiz. Will not be present if quiz is unpublished
    */
    'speedgraderUrl'?: string;
    /**
    * quiz time limit in minutes
    */
    'timeLimit'?: number;
    /**
    * the title of the quiz
    */
    'title'?: string;
    /**
    * when to unlock the quiz
    */
    'unlockAt'?: Date;
    /**
    * Whether the assignment\'s \'published\' state can be changed to false. Will be false if there are student submissions for the quiz.
    */
    'unpublishable'?: boolean;
    /**
    * Current version number of the quiz
    */
    'versionNumber'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "accessCode",
            "baseName": "access_code",
            "type": "string"
        },
        {
            "name": "allDates",
            "baseName": "all_dates",
            "type": "Array<AssignmentDate>"
        },
        {
            "name": "allowedAttempts",
            "baseName": "allowed_attempts",
            "type": "number"
        },
        {
            "name": "anonymousSubmissions",
            "baseName": "anonymous_submissions",
            "type": "boolean"
        },
        {
            "name": "assignmentGroupId",
            "baseName": "assignment_group_id",
            "type": "number"
        },
        {
            "name": "cantGoBack",
            "baseName": "cant_go_back",
            "type": "boolean"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "dueAt",
            "baseName": "due_at",
            "type": "Date"
        },
        {
            "name": "hideCorrectAnswersAt",
            "baseName": "hide_correct_answers_at",
            "type": "Date"
        },
        {
            "name": "hideResults",
            "baseName": "hide_results",
            "type": "string"
        },
        {
            "name": "htmlUrl",
            "baseName": "html_url",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "ipFilter",
            "baseName": "ip_filter",
            "type": "string"
        },
        {
            "name": "lockAt",
            "baseName": "lock_at",
            "type": "Date"
        },
        {
            "name": "lockExplanation",
            "baseName": "lock_explanation",
            "type": "string"
        },
        {
            "name": "lockInfo",
            "baseName": "lock_info",
            "type": "LockInfo"
        },
        {
            "name": "lockedForUser",
            "baseName": "locked_for_user",
            "type": "boolean"
        },
        {
            "name": "mobileUrl",
            "baseName": "mobile_url",
            "type": "string"
        },
        {
            "name": "oneQuestionAtATime",
            "baseName": "one_question_at_a_time",
            "type": "boolean"
        },
        {
            "name": "oneTimeResults",
            "baseName": "one_time_results",
            "type": "boolean"
        },
        {
            "name": "permissions",
            "baseName": "permissions",
            "type": "QuizPermissions"
        },
        {
            "name": "pointsPossible",
            "baseName": "points_possible",
            "type": "number"
        },
        {
            "name": "previewUrl",
            "baseName": "preview_url",
            "type": "string"
        },
        {
            "name": "published",
            "baseName": "published",
            "type": "boolean"
        },
        {
            "name": "questionCount",
            "baseName": "question_count",
            "type": "number"
        },
        {
            "name": "questionTypes",
            "baseName": "question_types",
            "type": "Array<string>"
        },
        {
            "name": "quizExtensionsUrl",
            "baseName": "quiz_extensions_url",
            "type": "string"
        },
        {
            "name": "quizType",
            "baseName": "quiz_type",
            "type": "string"
        },
        {
            "name": "scoringPolicy",
            "baseName": "scoring_policy",
            "type": "string"
        },
        {
            "name": "showCorrectAnswers",
            "baseName": "show_correct_answers",
            "type": "boolean"
        },
        {
            "name": "showCorrectAnswersAt",
            "baseName": "show_correct_answers_at",
            "type": "Date"
        },
        {
            "name": "showCorrectAnswersLastAttempt",
            "baseName": "show_correct_answers_last_attempt",
            "type": "boolean"
        },
        {
            "name": "shuffleAnswers",
            "baseName": "shuffle_answers",
            "type": "boolean"
        },
        {
            "name": "speedgraderUrl",
            "baseName": "speedgrader_url",
            "type": "string"
        },
        {
            "name": "timeLimit",
            "baseName": "time_limit",
            "type": "number"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "unlockAt",
            "baseName": "unlock_at",
            "type": "Date"
        },
        {
            "name": "unpublishable",
            "baseName": "unpublishable",
            "type": "boolean"
        },
        {
            "name": "versionNumber",
            "baseName": "version_number",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Quiz.attributeTypeMap;
    }
}

