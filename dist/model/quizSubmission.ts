/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class QuizSubmission {
    /**
    * For quizzes that allow multiple attempts, this field specifies the quiz submission attempt number.
    */
    'attempt'?: number;
    /**
    * The time at which the quiz submission will be overdue, and be flagged as a late submission.
    */
    'endAt'?: Date;
    /**
    * Number of times the student was allowed to re-take the quiz over the multiple-attempt limit.
    */
    'extraAttempts'?: number;
    /**
    * Amount of extra time allowed for the quiz submission, in minutes.
    */
    'extraTime'?: number;
    /**
    * The time at which the student submitted the quiz submission.
    */
    'finishedAt'?: Date;
    /**
    * Number of points the quiz submission\'s score was fudged by.
    */
    'fudgePoints'?: number;
    /**
    * Whether the student has viewed their results to the quiz.
    */
    'hasSeenResults'?: boolean;
    /**
    * The ID of the quiz submission.
    */
    'id': number;
    /**
    * For quizzes that allow multiple attempts, this is the score that will be used, which might be the score of the latest, or the highest, quiz submission.
    */
    'keptScore'?: number;
    /**
    * The student can take the quiz even if it\'s locked for everyone else
    */
    'manuallyUnlocked'?: boolean;
    /**
    * Indicates whether the quiz submission is overdue and needs submission
    */
    'overdueAndNeedsSubmission'?: boolean;
    /**
    * The ID of the Quiz the quiz submission belongs to.
    */
    'quizId': number;
    /**
    * The score of the quiz submission, if graded.
    */
    'score'?: number;
    /**
    * The original score of the quiz submission prior to any re-grading.
    */
    'scoreBeforeRegrade'?: number;
    /**
    * The time at which the student started the quiz submission.
    */
    'startedAt'?: Date;
    /**
    * The ID of the Submission the quiz submission represents.
    */
    'submissionId'?: number;
    /**
    * Amount of time spent, in seconds.
    */
    'timeSpent'?: number;
    /**
    * The ID of the Student that made the quiz submission.
    */
    'userId'?: number;
    /**
    * The current state of the quiz submission. Possible values: [\'untaken\'|\'pending_review\'|\'complete\'|\'settings_only\'|\'preview\'].
    */
    'workflowState'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "attempt",
            "baseName": "attempt",
            "type": "number"
        },
        {
            "name": "endAt",
            "baseName": "end_at",
            "type": "Date"
        },
        {
            "name": "extraAttempts",
            "baseName": "extra_attempts",
            "type": "number"
        },
        {
            "name": "extraTime",
            "baseName": "extra_time",
            "type": "number"
        },
        {
            "name": "finishedAt",
            "baseName": "finished_at",
            "type": "Date"
        },
        {
            "name": "fudgePoints",
            "baseName": "fudge_points",
            "type": "number"
        },
        {
            "name": "hasSeenResults",
            "baseName": "has_seen_results",
            "type": "boolean"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "keptScore",
            "baseName": "kept_score",
            "type": "number"
        },
        {
            "name": "manuallyUnlocked",
            "baseName": "manually_unlocked",
            "type": "boolean"
        },
        {
            "name": "overdueAndNeedsSubmission",
            "baseName": "overdue_and_needs_submission",
            "type": "boolean"
        },
        {
            "name": "quizId",
            "baseName": "quiz_id",
            "type": "number"
        },
        {
            "name": "score",
            "baseName": "score",
            "type": "number"
        },
        {
            "name": "scoreBeforeRegrade",
            "baseName": "score_before_regrade",
            "type": "number"
        },
        {
            "name": "startedAt",
            "baseName": "started_at",
            "type": "Date"
        },
        {
            "name": "submissionId",
            "baseName": "submission_id",
            "type": "number"
        },
        {
            "name": "timeSpent",
            "baseName": "time_spent",
            "type": "number"
        },
        {
            "name": "userId",
            "baseName": "user_id",
            "type": "number"
        },
        {
            "name": "workflowState",
            "baseName": "workflow_state",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return QuizSubmission.attributeTypeMap;
    }
}

