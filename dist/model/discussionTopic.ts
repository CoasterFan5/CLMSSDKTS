/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FileAttachment } from './fileAttachment';
import { LockInfo } from './lockInfo';

/**
* A discussion topic
*/
export class DiscussionTopic {
    /**
    * Whether or not users can rate entries in this topic.
    */
    'allowRating'?: boolean;
    /**
    * The unique identifier of the assignment if the topic is for grading, otherwise null.
    */
    'assignmentId'?: number;
    /**
    * Array of file attachments.
    */
    'attachments'?: Array<FileAttachment>;
    /**
    * The datetime to publish the topic (if not right away).
    */
    'delayedPostAt'?: Date;
    /**
    * The count of entries in the topic.
    */
    'discussionSubentryCount'?: number;
    /**
    * The type of discussion. Values are \'side_comment\' or \'not_threaded\', for discussions that only allow one level of nested comments, and \'threaded\' for fully threaded discussions.
    */
    'discussionType'?: string;
    /**
    * Threaded replies should be expanded by default.
    */
    'expand'?: boolean;
    /**
    * Can users decide their preferred thread expand setting.
    */
    'expandLocked'?: boolean;
    /**
    * The unique identifier of the group category if the topic is a group discussion, otherwise null.
    */
    'groupCategoryId'?: number;
    /**
    * An array of group discussions the user is a part of. Fields include: id, group_id
    */
    'groupTopicChildren'?: Array<object>;
    /**
    * The URL to the discussion topic in canvas.
    */
    'htmlUrl'?: string;
    /**
    * The ID of this topic.
    */
    'id'?: number;
    /**
    * The datetime for when the last reply was in the topic.
    */
    'lastReplyAt'?: Date;
    /**
    * The datetime to lock the topic (if ever).
    */
    'lockAt'?: Date;
    /**
    * (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.
    */
    'lockExplanation'?: string;
    'lockInfo'?: LockInfo;
    /**
    * Whether or not the discussion is \'closed for comments\'.
    */
    'locked'?: boolean;
    /**
    * Whether or not this is locked for the user.
    */
    'lockedForUser'?: boolean;
    /**
    * The HTML content of the message body.
    */
    'message'?: string;
    /**
    * Whether or not grade permissions are required to rate entries.
    */
    'onlyGradersCanRate'?: boolean;
    /**
    * The current user\'s permissions on this topic.
    */
    'permissions'?: object;
    /**
    * Whether or not the discussion has been \'pinned\' by an instructor
    */
    'pinned'?: boolean;
    /**
    * If the topic is a podcast topic this is the feed url for the current user.
    */
    'podcastUrl'?: string;
    /**
    * The datetime the topic was posted. If it is null it hasn\'t been posted yet. (see delayed_post_at)
    */
    'postedAt'?: Date;
    /**
    * Whether this discussion topic is published (true) or draft state (false)
    */
    'published'?: boolean;
    /**
    * The read_state of the topic for the current user, \'read\' or \'unread\'.
    */
    'readState'?: string;
    /**
    * If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.
    */
    'requireInitialPost'?: boolean;
    /**
    * If the topic is for grading and a group assignment this will point to the original topic in the course.
    */
    'rootTopicId'?: number;
    /**
    * DEPRECATED, Whether or not entries should be sorted by rating.
    */
    'sortByRating'?: boolean;
    /**
    * How entries should be sorted by default.
    */
    'sortOrder'?: string;
    /**
    * Can users decide their preferred sort order.
    */
    'sortOrderLocked'?: boolean;
    /**
    * Whether or not the current user is subscribed to this topic.
    */
    'subscribed'?: boolean;
    /**
    * (Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: \'initial_post_required\': The user must post a reply first; \'not_in_group_set\': The user is not in the group set for this graded group discussion; \'not_in_group\': The user is not in this topic\'s group; \'topic_is_announcement\': This topic is an announcement
    */
    'subscriptionHold'?: string;
    /**
    * The topic title.
    */
    'title'?: string;
    /**
    * DEPRECATED An array of topic_ids for the group discussions the user is a part of.
    */
    'topicChildren'?: Array<number>;
    /**
    * The count of unread entries of this topic for the current user.
    */
    'unreadCount'?: number;
    /**
    * Whether or not posts in this topic are visible to the user.
    */
    'userCanSeePosts'?: boolean;
    /**
    * The username of the topic creator.
    */
    'userName'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowRating",
            "baseName": "allow_rating",
            "type": "boolean"
        },
        {
            "name": "assignmentId",
            "baseName": "assignment_id",
            "type": "number"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<FileAttachment>"
        },
        {
            "name": "delayedPostAt",
            "baseName": "delayed_post_at",
            "type": "Date"
        },
        {
            "name": "discussionSubentryCount",
            "baseName": "discussion_subentry_count",
            "type": "number"
        },
        {
            "name": "discussionType",
            "baseName": "discussion_type",
            "type": "string"
        },
        {
            "name": "expand",
            "baseName": "expand",
            "type": "boolean"
        },
        {
            "name": "expandLocked",
            "baseName": "expand_locked",
            "type": "boolean"
        },
        {
            "name": "groupCategoryId",
            "baseName": "group_category_id",
            "type": "number"
        },
        {
            "name": "groupTopicChildren",
            "baseName": "group_topic_children",
            "type": "Array<object>"
        },
        {
            "name": "htmlUrl",
            "baseName": "html_url",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "lastReplyAt",
            "baseName": "last_reply_at",
            "type": "Date"
        },
        {
            "name": "lockAt",
            "baseName": "lock_at",
            "type": "Date"
        },
        {
            "name": "lockExplanation",
            "baseName": "lock_explanation",
            "type": "string"
        },
        {
            "name": "lockInfo",
            "baseName": "lock_info",
            "type": "LockInfo"
        },
        {
            "name": "locked",
            "baseName": "locked",
            "type": "boolean"
        },
        {
            "name": "lockedForUser",
            "baseName": "locked_for_user",
            "type": "boolean"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "onlyGradersCanRate",
            "baseName": "only_graders_can_rate",
            "type": "boolean"
        },
        {
            "name": "permissions",
            "baseName": "permissions",
            "type": "object"
        },
        {
            "name": "pinned",
            "baseName": "pinned",
            "type": "boolean"
        },
        {
            "name": "podcastUrl",
            "baseName": "podcast_url",
            "type": "string"
        },
        {
            "name": "postedAt",
            "baseName": "posted_at",
            "type": "Date"
        },
        {
            "name": "published",
            "baseName": "published",
            "type": "boolean"
        },
        {
            "name": "readState",
            "baseName": "read_state",
            "type": "string"
        },
        {
            "name": "requireInitialPost",
            "baseName": "require_initial_post",
            "type": "boolean"
        },
        {
            "name": "rootTopicId",
            "baseName": "root_topic_id",
            "type": "number"
        },
        {
            "name": "sortByRating",
            "baseName": "sort_by_rating",
            "type": "boolean"
        },
        {
            "name": "sortOrder",
            "baseName": "sort_order",
            "type": "string"
        },
        {
            "name": "sortOrderLocked",
            "baseName": "sort_order_locked",
            "type": "boolean"
        },
        {
            "name": "subscribed",
            "baseName": "subscribed",
            "type": "boolean"
        },
        {
            "name": "subscriptionHold",
            "baseName": "subscription_hold",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "topicChildren",
            "baseName": "topic_children",
            "type": "Array<number>"
        },
        {
            "name": "unreadCount",
            "baseName": "unread_count",
            "type": "number"
        },
        {
            "name": "userCanSeePosts",
            "baseName": "user_can_see_posts",
            "type": "boolean"
        },
        {
            "name": "userName",
            "baseName": "user_name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return DiscussionTopic.attributeTypeMap;
    }
}

