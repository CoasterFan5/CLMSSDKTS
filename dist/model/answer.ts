/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class Answer {
    /**
    * Specific contextual comments for a particular answer.
    */
    'answerComments'?: string;
    /**
    * Used in matching questions.  The static value of the answer that will be displayed on the left for students to match for.
    */
    'answerMatchLeft'?: string;
    /**
    * Used in matching questions. The correct match for the value given in answer_match_left.  Will be displayed in a dropdown with the other answer_match_right values..
    */
    'answerMatchRight'?: string;
    /**
    * The text of the answer.
    */
    'answerText': string;
    /**
    * An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should be 100.
    */
    'answerWeight': number;
    /**
    * Used in numerical questions of type \'precision_answer\'.  The value the answer should equal.
    */
    'approximate'?: number;
    /**
    * Used in fill in multiple blank and multiple dropdowns questions.
    */
    'blankId'?: number;
    /**
    * Used in numerical questions of type \'range_answer\'. The end of the allowed range (inclusive).
    */
    'end'?: number;
    /**
    * Used in numerical questions of type \'exact_answer\'.  The value the answer should equal.
    */
    'exact'?: number;
    /**
    * The unique identifier for the answer.  Do not supply if this answer is part of a new question
    */
    'id'?: number;
    /**
    * Used in numerical questions of type \'exact_answer\'. The margin of error allowed for the student\'s answer.
    */
    'margin'?: number;
    /**
    * Used in matching questions. A list of distractors, delimited by new lines ( ) that will be seeded with all the answer_match_right values.
    */
    'matchingAnswerIncorrectMatches'?: string;
    /**
    * Used in numerical questions.  Values can be \'exact_answer\', \'range_answer\', or \'precision_answer\'.
    */
    'numericalAnswerType'?: string;
    /**
    * Used in numerical questions of type \'precision_answer\'. The numerical precision that will be used when comparing the student\'s answer.
    */
    'precision'?: number;
    /**
    * Used in numerical questions of type \'range_answer\'. The start of the allowed range (inclusive).
    */
    'start'?: number;
    /**
    * Used in missing word questions.  The text to follow the missing word
    */
    'textAfterAnswers'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "answerComments",
            "baseName": "answer_comments",
            "type": "string"
        },
        {
            "name": "answerMatchLeft",
            "baseName": "answer_match_left",
            "type": "string"
        },
        {
            "name": "answerMatchRight",
            "baseName": "answer_match_right",
            "type": "string"
        },
        {
            "name": "answerText",
            "baseName": "answer_text",
            "type": "string"
        },
        {
            "name": "answerWeight",
            "baseName": "answer_weight",
            "type": "number"
        },
        {
            "name": "approximate",
            "baseName": "approximate",
            "type": "number"
        },
        {
            "name": "blankId",
            "baseName": "blank_id",
            "type": "number"
        },
        {
            "name": "end",
            "baseName": "end",
            "type": "number"
        },
        {
            "name": "exact",
            "baseName": "exact",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "margin",
            "baseName": "margin",
            "type": "number"
        },
        {
            "name": "matchingAnswerIncorrectMatches",
            "baseName": "matching_answer_incorrect_matches",
            "type": "string"
        },
        {
            "name": "numericalAnswerType",
            "baseName": "numerical_answer_type",
            "type": "string"
        },
        {
            "name": "precision",
            "baseName": "precision",
            "type": "number"
        },
        {
            "name": "start",
            "baseName": "start",
            "type": "number"
        },
        {
            "name": "textAfterAnswers",
            "baseName": "text_after_answers",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Answer.attributeTypeMap;
    }
}

