/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FederatedAttributesConfig } from './federatedAttributesConfig';

export class AuthenticationProvider {
    /**
    * Valid for LDAP and CAS providers.
    */
    'authBase'?: string;
    /**
    * Valid for LDAP providers.
    */
    'authFilter'?: string;
    /**
    * Valid for LDAP providers.
    */
    'authHost'?: string;
    /**
    * Valid for LDAP providers.
    */
    'authOverTls'?: number;
    /**
    * Valid for LDAP providers.
    */
    'authPort'?: number;
    /**
    * Valid for all providers.
    */
    'authType'?: string;
    /**
    * Valid for LDAP providers.
    */
    'authUsername'?: string;
    /**
    * Valid for SAML providers.
    */
    'certificateFingerprint'?: string;
    'federatedAttributes'?: FederatedAttributesConfig;
    /**
    * Valid for all providers.
    */
    'id'?: number;
    /**
    * Valid for SAML providers.
    */
    'identifierFormat'?: string;
    /**
    * Valid for SAML providers.
    */
    'idpEntityId'?: string;
    /**
    * Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).
    */
    'jitProvisioning'?: boolean;
    /**
    * Valid for SAML and CAS providers.
    */
    'logInUrl'?: string;
    /**
    * Valid for SAML providers.
    */
    'logOutUrl'?: string;
    /**
    * Valid for SAML providers.
    */
    'loginAttribute'?: string;
    /**
    * If multi-factor authentication is required when logging in with this authentication provider. The account must not have MFA disabled.
    */
    'mfaRequired'?: boolean;
    /**
    * Valid for all providers.
    */
    'position'?: number;
    /**
    * Valid for SAML providers.
    */
    'requestedAuthnContext'?: string;
    /**
    * Valid for SAML providers.
    */
    'sigAlg'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authBase",
            "baseName": "auth_base",
            "type": "string"
        },
        {
            "name": "authFilter",
            "baseName": "auth_filter",
            "type": "string"
        },
        {
            "name": "authHost",
            "baseName": "auth_host",
            "type": "string"
        },
        {
            "name": "authOverTls",
            "baseName": "auth_over_tls",
            "type": "number"
        },
        {
            "name": "authPort",
            "baseName": "auth_port",
            "type": "number"
        },
        {
            "name": "authType",
            "baseName": "auth_type",
            "type": "string"
        },
        {
            "name": "authUsername",
            "baseName": "auth_username",
            "type": "string"
        },
        {
            "name": "certificateFingerprint",
            "baseName": "certificate_fingerprint",
            "type": "string"
        },
        {
            "name": "federatedAttributes",
            "baseName": "federated_attributes",
            "type": "FederatedAttributesConfig"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "identifierFormat",
            "baseName": "identifier_format",
            "type": "string"
        },
        {
            "name": "idpEntityId",
            "baseName": "idp_entity_id",
            "type": "string"
        },
        {
            "name": "jitProvisioning",
            "baseName": "jit_provisioning",
            "type": "boolean"
        },
        {
            "name": "logInUrl",
            "baseName": "log_in_url",
            "type": "string"
        },
        {
            "name": "logOutUrl",
            "baseName": "log_out_url",
            "type": "string"
        },
        {
            "name": "loginAttribute",
            "baseName": "login_attribute",
            "type": "string"
        },
        {
            "name": "mfaRequired",
            "baseName": "mfa_required",
            "type": "boolean"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number"
        },
        {
            "name": "requestedAuthnContext",
            "baseName": "requested_authn_context",
            "type": "string"
        },
        {
            "name": "sigAlg",
            "baseName": "sig_alg",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AuthenticationProvider.attributeTypeMap;
    }
}

