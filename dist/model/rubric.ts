/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { RubricAssessment } from './rubricAssessment';
import { RubricAssociation } from './rubricAssociation';
import { RubricCriterion } from './rubricCriterion';

export class Rubric {
    /**
    * If an assessment type is included in the \'include\' parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.
    */
    'assessments'?: Array<RubricAssessment>;
    /**
    * If an association type is included in the \'include\' parameter, includes an array of rubric association objects for a given rubric, based on the association type requested. If the user does not request an association type this key will be absent.
    */
    'associations'?: Array<RubricAssociation>;
    /**
    * the context owning the rubric
    */
    'contextId'?: number;
    'contextType'?: string;
    /**
    * An array with all of this Rubric\'s grading Criteria
    */
    'data'?: Array<RubricCriterion>;
    /**
    * whether or not free-form comments are used
    */
    'freeFormCriterionComments'?: boolean;
    'hideScoreTotal'?: boolean;
    /**
    * the ID of the rubric
    */
    'id'?: number;
    'pointsPossible'?: number;
    'readOnly'?: boolean;
    'reusable'?: boolean;
    /**
    * title of the rubric
    */
    'title'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "assessments",
            "baseName": "assessments",
            "type": "Array<RubricAssessment>"
        },
        {
            "name": "associations",
            "baseName": "associations",
            "type": "Array<RubricAssociation>"
        },
        {
            "name": "contextId",
            "baseName": "context_id",
            "type": "number"
        },
        {
            "name": "contextType",
            "baseName": "context_type",
            "type": "string"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "Array<RubricCriterion>"
        },
        {
            "name": "freeFormCriterionComments",
            "baseName": "free_form_criterion_comments",
            "type": "boolean"
        },
        {
            "name": "hideScoreTotal",
            "baseName": "hide_score_total",
            "type": "boolean"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "pointsPossible",
            "baseName": "points_possible",
            "type": "number"
        },
        {
            "name": "readOnly",
            "baseName": "read_only",
            "type": "boolean"
        },
        {
            "name": "reusable",
            "baseName": "reusable",
            "type": "boolean"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Rubric.attributeTypeMap;
    }
}

