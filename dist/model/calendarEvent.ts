/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Uuid } from './uuid';

export class CalendarEvent {
    /**
    * a comma-separated list of all calendar contexts this event is part of
    */
    'allContextCodes'?: string;
    /**
    * Boolean indicating whether this is an all-day event (midnight to midnight)
    */
    'allDay'?: boolean;
    /**
    * The date of this event
    */
    'allDayDate'?: Date;
    /**
    * Various Appointment-Group-related fields.These fields are only pertinent to time slots (appointments) and reservations of those time slots. See the Appointment Groups API. The id of the appointment group
    */
    'appointmentGroupId'?: number;
    /**
    * The API URL of the appointment group
    */
    'appointmentGroupUrl'?: string;
    /**
    * If the event is a time slot and it has a participant limit, an integer indicating how many slots are available
    */
    'availableSlots'?: number;
    /**
    * Boolean indicating whether this has blackout date.
    */
    'blackoutDate'?: boolean;
    /**
    * Included by default, but may be excluded (see include[] option). If this is a time slot (see the Appointment Groups API) this will be a list of any reservations. If this is a course-level event, this will be a list of section-level events (if any)
    */
    'childEvents'?: Array<number>;
    /**
    * The number of child_events. See child_events (and parent_event_id)
    */
    'childEventsCount'?: number;
    /**
    * the context code of the calendar this event belongs to (course, group, user, or account)
    */
    'contextCode'?: string;
    /**
    * the context name of the calendar this event belongs to (course, user or group)
    */
    'contextName'?: string;
    /**
    * When the calendar event was created
    */
    'createdAt'?: Date;
    /**
    * The HTML description of the event
    */
    'description'?: string;
    /**
    * if specified, it indicates which calendar this event should be displayed on. for example, a section-level event would have the course\'s context code here, while the section\'s context code would be returned above)
    */
    'effectiveContextCode'?: string;
    /**
    * The end timestamp of the event
    */
    'endAt'?: Date;
    /**
    * If the event is a group-level reservation, this will contain the group participant JSON (refer to the Groups API).
    */
    'group'?: string;
    /**
    * Whether this event should be displayed on the calendar. Only true for course-level events with section-level child events.
    */
    'hidden'?: boolean;
    /**
    * URL for a user to view this event
    */
    'htmlUrl'?: string;
    /**
    * The ID of the calendar event
    */
    'id'?: number;
    /**
    * Boolean indicating whether this has important dates.
    */
    'importantDates'?: boolean;
    /**
    * The address where the event is taking place
    */
    'locationAddress'?: string;
    /**
    * The location name of the event
    */
    'locationName'?: string;
    /**
    * If the event is a reservation, this a boolean indicating whether it is the current user\'s reservation, or someone else\'s
    */
    'ownReservation'?: boolean;
    /**
    * Normally null. If this is a reservation (see the Appointment Groups API), the id will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event.
    */
    'parentEventId'?: number;
    /**
    * The type of participant to sign up for a slot: \'User\' or \'Group\'
    */
    'participantType'?: string;
    /**
    * If the event is a time slot, this is the participant limit
    */
    'participantsPerAppointment'?: number;
    /**
    * If the event is a time slot, the API URL for reserving it
    */
    'reserveUrl'?: string;
    /**
    * If the event is a time slot, a boolean indicating whether the user has already made a reservation for it
    */
    'reserved'?: boolean;
    /**
    * An iCalendar RRULE for defining how events in a recurring event series repeat.
    */
    'rrule'?: string;
    /**
    * Boolean indicating if is the first event in the series of recurring events.
    */
    'seriesHead'?: boolean;
    /**
    * A natural language expression of how events occur in the series.
    */
    'seriesNaturalLanguage'?: string;
    'seriesUuid'?: Uuid;
    /**
    * The start timestamp of the event
    */
    'startAt'?: Date;
    /**
    * The title of the calendar event
    */
    'title'?: string;
    /**
    * When the calendar event was last updated
    */
    'updatedAt'?: Date;
    /**
    * URL for this calendar event (to update, delete, etc.)
    */
    'url'?: string;
    /**
    * If the event is a user-level reservation, this will contain the user participant JSON (refer to the Users API).
    */
    'user'?: string;
    /**
    * Current state of the event (\'active\', \'locked\' or \'deleted\') \'locked\' indicates that start_at/end_at cannot be changed (though the event could be deleted). Normally only reservations or time slots with reservations are locked (see the Appointment Groups API)
    */
    'workflowState'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allContextCodes",
            "baseName": "all_context_codes",
            "type": "string"
        },
        {
            "name": "allDay",
            "baseName": "all_day",
            "type": "boolean"
        },
        {
            "name": "allDayDate",
            "baseName": "all_day_date",
            "type": "Date"
        },
        {
            "name": "appointmentGroupId",
            "baseName": "appointment_group_id",
            "type": "number"
        },
        {
            "name": "appointmentGroupUrl",
            "baseName": "appointment_group_url",
            "type": "string"
        },
        {
            "name": "availableSlots",
            "baseName": "available_slots",
            "type": "number"
        },
        {
            "name": "blackoutDate",
            "baseName": "blackout_date",
            "type": "boolean"
        },
        {
            "name": "childEvents",
            "baseName": "child_events",
            "type": "Array<number>"
        },
        {
            "name": "childEventsCount",
            "baseName": "child_events_count",
            "type": "number"
        },
        {
            "name": "contextCode",
            "baseName": "context_code",
            "type": "string"
        },
        {
            "name": "contextName",
            "baseName": "context_name",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "effectiveContextCode",
            "baseName": "effective_context_code",
            "type": "string"
        },
        {
            "name": "endAt",
            "baseName": "end_at",
            "type": "Date"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "hidden",
            "baseName": "hidden",
            "type": "boolean"
        },
        {
            "name": "htmlUrl",
            "baseName": "html_url",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "importantDates",
            "baseName": "important_dates",
            "type": "boolean"
        },
        {
            "name": "locationAddress",
            "baseName": "location_address",
            "type": "string"
        },
        {
            "name": "locationName",
            "baseName": "location_name",
            "type": "string"
        },
        {
            "name": "ownReservation",
            "baseName": "own_reservation",
            "type": "boolean"
        },
        {
            "name": "parentEventId",
            "baseName": "parent_event_id",
            "type": "number"
        },
        {
            "name": "participantType",
            "baseName": "participant_type",
            "type": "string"
        },
        {
            "name": "participantsPerAppointment",
            "baseName": "participants_per_appointment",
            "type": "number"
        },
        {
            "name": "reserveUrl",
            "baseName": "reserve_url",
            "type": "string"
        },
        {
            "name": "reserved",
            "baseName": "reserved",
            "type": "boolean"
        },
        {
            "name": "rrule",
            "baseName": "rrule",
            "type": "string"
        },
        {
            "name": "seriesHead",
            "baseName": "series_head",
            "type": "boolean"
        },
        {
            "name": "seriesNaturalLanguage",
            "baseName": "series_natural_language",
            "type": "string"
        },
        {
            "name": "seriesUuid",
            "baseName": "series_uuid",
            "type": "Uuid"
        },
        {
            "name": "startAt",
            "baseName": "start_at",
            "type": "Date"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "string"
        },
        {
            "name": "workflowState",
            "baseName": "workflow_state",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CalendarEvent.attributeTypeMap;
    }
}

