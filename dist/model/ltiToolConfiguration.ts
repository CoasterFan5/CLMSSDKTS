/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { LtiLaunchSettings } from './ltiLaunchSettings';
import { LtiPlacement } from './ltiPlacement';

/**
* A Registration\'s Canvas-specific tool configuration.
*/
export class LtiToolConfiguration {
    /**
    * A key-value listing of all custom fields the tool has requested
    */
    'customFields'?: object;
    /**
    * The description of the tool
    */
    'description'?: string;
    /**
    * The tool\'s main domain. Highly recommended for deep linking, used to match links to the tool.
    */
    'domain'?: string;
    'launchSettings'?: LtiLaunchSettings;
    /**
    * 1.3 specific. URL used for initial login request
    */
    'oidcInitiationUrl'?: string;
    /**
    * 1.3 specific. Region-specific login URLs for data protection compliance
    */
    'oidcInitiationUrls'?: object;
    /**
    * List of placements configured by the tool
    */
    'placements'?: Array<LtiPlacement>;
    /**
    * Canvas-defined privacy level for the tool
    */
    'privacyLevel'?: LtiToolConfiguration.PrivacyLevelEnum;
    /**
    * 1.3 specific. The tool\'s public JWK in JSON format. Discouraged in favor of a url hosting a JWK set.
    */
    'publicJwk'?: object;
    /**
    * 1.3 specific. The tool-hosted URL containing its public JWK keyset. Canvas may cache JWKs up to 5 minutes.
    */
    'publicJwkUrl'?: string;
    /**
    * 1.3 specific. List of possible launch URLs for after the Canvas authorize redirect step
    */
    'redirectUris'?: Array<string>;
    /**
    * 1.3 specific. List of LTI scopes requested by the tool
    */
    'scopes'?: Array<string>;
    /**
    * The default launch URL for the tool. Overridable by placements.
    */
    'targetLinkUri'?: string;
    /**
    * The display name of the tool
    */
    'title'?: string;
    /**
    * Tool-provided identifier, can be anything
    */
    'toolId'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "customFields",
            "baseName": "custom_fields",
            "type": "object"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        },
        {
            "name": "launchSettings",
            "baseName": "launch_settings",
            "type": "LtiLaunchSettings"
        },
        {
            "name": "oidcInitiationUrl",
            "baseName": "oidc_initiation_url",
            "type": "string"
        },
        {
            "name": "oidcInitiationUrls",
            "baseName": "oidc_initiation_urls",
            "type": "object"
        },
        {
            "name": "placements",
            "baseName": "placements",
            "type": "Array<LtiPlacement>"
        },
        {
            "name": "privacyLevel",
            "baseName": "privacy_level",
            "type": "LtiToolConfiguration.PrivacyLevelEnum"
        },
        {
            "name": "publicJwk",
            "baseName": "public_jwk",
            "type": "object"
        },
        {
            "name": "publicJwkUrl",
            "baseName": "public_jwk_url",
            "type": "string"
        },
        {
            "name": "redirectUris",
            "baseName": "redirect_uris",
            "type": "Array<string>"
        },
        {
            "name": "scopes",
            "baseName": "scopes",
            "type": "Array<string>"
        },
        {
            "name": "targetLinkUri",
            "baseName": "target_link_uri",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "toolId",
            "baseName": "tool_id",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return LtiToolConfiguration.attributeTypeMap;
    }
}

export namespace LtiToolConfiguration {
    export enum PrivacyLevelEnum {
        Public = <any> 'public',
        Anonymous = <any> 'anonymous',
        NameOnly = <any> 'name_only',
        EmailOnly = <any> 'email_only'
    }
}
