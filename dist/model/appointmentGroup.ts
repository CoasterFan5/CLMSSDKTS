/**
 * Title was not specified
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Appointment } from './appointment';
import { CalendarEvent } from './calendarEvent';

export class AppointmentGroup {
    /**
    * Boolean indicating whether observer users should be able to sign-up for an appointment
    */
    'allowObserverSignup'?: boolean;
    /**
    * Calendar Events representing the time slots (see include[] argument) Refer to the Calendar Events API for more information
    */
    'appointments'?: Array<CalendarEvent>;
    /**
    * Number of time slots in this appointment group
    */
    'appointmentsCount'?: number;
    /**
    * The context codes (i.e. courses) this appointment group belongs to. Only people in these courses will be eligible to sign up.
    */
    'contextCodes'?: Array<string>;
    /**
    * When the appointment group was created
    */
    'createdAt'?: Date;
    /**
    * The text description of the appointment group
    */
    'description'?: string;
    /**
    * The end of the last time slot in the appointment group
    */
    'endAt'?: Date;
    /**
    * URL for a user to view this appointment group
    */
    'htmlUrl'?: string;
    /**
    * The ID of the appointment group
    */
    'id'?: number;
    /**
    * The address of the appointment group\'s location
    */
    'locationAddress'?: string;
    /**
    * The location name of the appointment group
    */
    'locationName'?: string;
    /**
    * Maximum number of time slots a user may register for, or null if no limit
    */
    'maxAppointmentsPerParticipant'?: number;
    /**
    * Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots
    */
    'minAppointmentsPerParticipant'?: number;
    /**
    * Newly created time slots (same format as appointments above). Only returned in Create/Update responses where new time slots have been added
    */
    'newAppointments'?: Array<CalendarEvent>;
    /**
    * The number of participant who have reserved slots (see include[] argument)
    */
    'participantCount'?: number;
    /**
    * Indicates how participants sign up for the appointment group, either as individuals (\'User\') or in student groups (\'Group\'). Related to sub_context_codes (i.e. \'Group\' signups always have a single group category)
    */
    'participantType'?: string;
    /**
    * \'private\' means participants cannot see who has signed up for a particular time slot, \'protected\' means that they can
    */
    'participantVisibility'?: string;
    /**
    * Maximum number of participants that may register for each time slot, or null if no limit
    */
    'participantsPerAppointment'?: number;
    /**
    * Boolean indicating whether the current user needs to sign up for this appointment group (i.e. it\'s reservable and the min_appointments_per_participant limit has not been met by this user).
    */
    'requiringAction'?: boolean;
    /**
    * The start and end times of slots reserved by the current user as well as the id of the calendar event for the reservation (see include[] argument)
    */
    'reservedTimes'?: Array<Appointment>;
    /**
    * The start of the first time slot in the appointment group
    */
    'startAt'?: Date;
    /**
    * The sub-context codes (i.e. course sections and group categories) this appointment group is restricted to
    */
    'subContextCodes'?: Array<number>;
    /**
    * The title of the appointment group
    */
    'title'?: string;
    /**
    * When the appointment group was last updated
    */
    'updatedAt'?: Date;
    /**
    * URL for this appointment group (to update, delete, etc.)
    */
    'url'?: string;
    /**
    * Current state of the appointment group (\'pending\', \'active\' or \'deleted\'). \'pending\' indicates that it has not been published yet and is invisible to participants.
    */
    'workflowState'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "allowObserverSignup",
            "baseName": "allow_observer_signup",
            "type": "boolean"
        },
        {
            "name": "appointments",
            "baseName": "appointments",
            "type": "Array<CalendarEvent>"
        },
        {
            "name": "appointmentsCount",
            "baseName": "appointments_count",
            "type": "number"
        },
        {
            "name": "contextCodes",
            "baseName": "context_codes",
            "type": "Array<string>"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "endAt",
            "baseName": "end_at",
            "type": "Date"
        },
        {
            "name": "htmlUrl",
            "baseName": "html_url",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "locationAddress",
            "baseName": "location_address",
            "type": "string"
        },
        {
            "name": "locationName",
            "baseName": "location_name",
            "type": "string"
        },
        {
            "name": "maxAppointmentsPerParticipant",
            "baseName": "max_appointments_per_participant",
            "type": "number"
        },
        {
            "name": "minAppointmentsPerParticipant",
            "baseName": "min_appointments_per_participant",
            "type": "number"
        },
        {
            "name": "newAppointments",
            "baseName": "new_appointments",
            "type": "Array<CalendarEvent>"
        },
        {
            "name": "participantCount",
            "baseName": "participant_count",
            "type": "number"
        },
        {
            "name": "participantType",
            "baseName": "participant_type",
            "type": "string"
        },
        {
            "name": "participantVisibility",
            "baseName": "participant_visibility",
            "type": "string"
        },
        {
            "name": "participantsPerAppointment",
            "baseName": "participants_per_appointment",
            "type": "number"
        },
        {
            "name": "requiringAction",
            "baseName": "requiring_action",
            "type": "boolean"
        },
        {
            "name": "reservedTimes",
            "baseName": "reserved_times",
            "type": "Array<Appointment>"
        },
        {
            "name": "startAt",
            "baseName": "start_at",
            "type": "Date"
        },
        {
            "name": "subContextCodes",
            "baseName": "sub_context_codes",
            "type": "Array<number>"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "workflowState",
            "baseName": "workflow_state",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AppointmentGroup.attributeTypeMap;
    }
}

